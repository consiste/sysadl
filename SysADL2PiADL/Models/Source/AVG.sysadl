Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Real {
	}
	value type Void {
	}
	enum NotificationToSupervisory {
		departed, arrived, passed, traveling
	}
	enum NotificationFromArm {
		loaded, unloaded
	}
	enum CommandToArm {
		load, unload, idle
	}
	enum NotificationFromMotor {
		started, stopped
	}
	enum CommandToMotor {
		start, stop
	}
	
	datatype Location{
		attributes: location1 : String;
	}
	datatype VehicleData{
		attributes: destination : Location;
		command : CommandToArm;
	}
	datatype Status {
		attributes: 
		command : CommandToArm;
		location1 : Location;
		destination : Location;
	}	
}
package PortsAGV {
	import SysADL.types;
	port def inLocation {
		flow in Location
	}
	port def outLocation {
		flow out Location
	}
	port def inStatus {
		flow in Status
	}
	port def outStatus {
		flow out Status
	}
	port def inVehicleData {
		flow in VehicleData
	}
	port def outVehicleData {
		flow out VehicleData
	}
	port def inNotificationFromMotor {
		flow in NotificationFromMotor
	}
	port def outNotificationFromMotor {
		flow out NotificationFromMotor
	}
	port def inCommandToMotor {
		flow in CommandToMotor
	}
	port def outCommandToMotor {
		flow out CommandToMotor
	}
	port def inNotificationFromArm {
		flow in NotificationFromArm
	}
	port def outNotificationFromArm {
		flow out NotificationFromArm
	}
	port def inCommandToArm {
		flow in CommandToArm
	}
	port def outCommandToArm {
		flow out CommandToArm
	}
	port def inNotificationToSupervisory {
		flow in NotificationToSupervisory
	}
	port def outNotificationToSupervisory {
		flow out NotificationToSupervisory
	}
	
	port def IAGVSystem {
		ports: 
			inMoveToStation : inVehicleData {
			}
			outNotifications : outNotificationToSupervisory {
			}
	}
	
	port def ISupervisorySystem {
		ports: 
			outMoveToStation : outVehicleData {
			}
			inNotifications : inNotificationToSupervisory {
			}
	}
}

package ConnectorsAGV {
	import PortsAGV;
	
	connector def notifySupervisory {
		participants: 
			~ nsIPT : inNotificationToSupervisory {
			}
			~ nsOPT : outNotificationToSupervisory {
		}
		flows: NotificationToSupervisory from nsOPT to nsIPT
	}
	
	connector def sendVehicleData {
		participants: 
			~ vdOPT : outVehicleData {
			}
			~ vdIPT : inVehicleData {
			}
		flows: VehicleData from vdOPT to vdIPT
	}
	
	connector def notificationMotor {
		participants: ~ nmOPT : outNotificationFromMotor {
		}
		~ nmIPT : inNotificationFromMotor {
		}
		flows: NotificationFromMotor from nmOPT to nmIPT
	}
	connector def commandArm {
		participants: ~ caOPT : outCommandToArm {
		}
		~ caIPT : inCommandToArm {
		}
		flows: CommandToArm from caOPT to caIPT
	}
	connector def notificationArm {
		participants: ~ naIPT : inNotificationFromArm {
		}
		~ naOPT : outNotificationFromArm {
		}
		flows: NotificationFromArm from naOPT to naIPT
	}
	connector def commandMotor {
		participants: ~ cmOPT : outCommandToMotor {
		}
		~ cmIPT : inCommandToMotor {
		}
		flows: /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ CommandToMotor from /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ cmOPT to cmIPT
	}
	connector def interactionAGVAndSupervisory {
		participants: ~ iagvs : IAGVSystem {
		}
		~ iss : ISupervisorySystem {
		}
		configuration {
			connectors:
			nS : notifySupervisory bindings outNotifications = inNotifications; 
			sVD : sendVehicleData bindings outMoveToStation = inMoveToStation;
		}
	}
	connector def locationVehicle {
		participants: 
			~ lOPT : outLocation {}
			~ lIPT : inLocation {}
		flows: Location from lOPT to lIPT
	}
	
	
	
	connector def status {
		participants: 
			~ sOPT : outStatus {
			}
			~ sIPT : inStatus {
			}
		flows: Status from sOPT to sIPT
	}
	
	
	
	
}
package ComponentsAGV {
	import PortsAGV;
	import ConnectorsAGV;
	import SysADL.types;
	architecture def FactoryAutomationSystem {
		ports:
		configuration {
			components:
			ss : SupervisorySystem {
				using ports: in_outDataS : ISupervisorySystem {
				}
			}
			agvs : IAGVSystemCP [ 1, -1 ] {
				using ports: sendStatus : outStatus {
				}
				in_outDataAgv : IAGVSystem {
				}
			}
			ds : DisplaySystem {
				using ports: receiveStatus : inStatus {
				}
			}
			connectors:
			dataExchange : interactionAGVAndSupervisory bindings in_outDataS = in_outDataAgv;
			updateStatus : status bindings sendStatus = receiveStatus;
		}
	}
	boundary component def DisplaySystem {
		ports: receiveStatus : inStatus {
		}
	}
	boundary component def SupervisorySystem {
		ports: in_outData : ISupervisorySystem {
		}
	}
	
	
	
	component def IAGVSystemCP {
		ports: 
			sendStatus : outStatus {}
			in_outData : IAGVSystem {}
		configuration {
			components:
			m : Motor {
				using ports: 
					start_stop_in : inCommandToMotor {}
					started_stopped_out : outNotificationFromMotor {}
			}
			as : ArrivalSensor {
				using ports: 
					arrivalDetected_out : outLocation {}
			}
			ra : RobotArm {
				using ports: 
					start : inCommandToArm {}
					started : outNotificationFromArm {}
			}
			vc : VehicleControl {
				using ports: 
					sendStatus : outStatus {}
					arrivalDetected_in : inLocation {}
					startArm : outCommandToArm {}
					startedArm : inNotificationFromArm {}
					started_stopped_in : inNotificationFromMotor {}
					start_stop_out : outCommandToMotor {}
					in_outData : IAGVSystem {}
			}
			connectors:
				arrived : locationVehicle bindings arrivalDetected_out = arrivalDetected_in; 
				ackArm : notificationArm bindings started = startedArm; 
				cmdArm : commandArm bindings startArm = start;
				ackMotor : notificationMotor bindings started_stopped_out = started_stopped_in;
				cmdMotor : commandMotor bindings start_stop_out = start_stop_in;
			delegations:
				sendStatus to sendStatus 
				in_outData to in_outData
		}
	}
	
	
	
	
	
		component def VehicleControl {
		ports: sendStatus : outStatus {
		}
		arrivalDetected : inLocation {
		}
		startArm : outCommandToArm {
		}
		startedArm : inNotificationFromArm {
		}
		started_stopped : inNotificationFromMotor {
		}
		start_stop : outCommandToMotor {
		}
		in_outData : IAGVSystem {
		}
		configuration {
			components:
			cs : CheckStation {
				using ports: ack_cs : inNotificationFromMotor {
				}
				location1_cs : outLocation {
				}
				destination_cs : inLocation {
				}
				stop : outCommandToMotor {
				}
				arrivalDetected : inLocation {
				}
				passed : outNotificationToSupervisory {
				}
			}
			ca : ControlArm {
				using ports: cmd_ca : inCommandToArm {
				}
				ack_ca : inNotificationFromMotor {
				}
				startArm : outCommandToArm {
				}
			}
			nm : NotifierMotor {
				using ports: inAck : inNotificationFromMotor {
				}
				ack : outNotificationToSupervisory {
				}
				outAck : outNotificationFromMotor {
				}
			}
			sm : StartMoving {
				using ports: move : inVehicleData {
				}
				cmd_sm : outCommandToArm {
				}
				destination : outLocation {
				}
				start : outCommandToMotor {
				}
			}
			na : NotifierArm {
				using ports: arrivedStatus : outNotificationToSupervisory {
				}
				loaded_unloaded : inNotificationFromArm {
				}
			}
			vt : VehicleTimer {
				using ports: AGVStatus : outStatus {
				}
				location1_vt : inLocation {
				}
				destination_vt : inLocation {
				}
				cmd : inCommandToArm {
				}
			}
			connectors:
			destinationStation : locationVehicle bindings destination = destination_vt; 
			destinationStation2 : locationVehicle bindings destination = destination_cs;
			command : commandArm bindings cmd_sm = cmd;
			command2 : commandArm bindings cmd_sm = cmd_ca;
			currentLocation : locationVehicle bindings location1_cs = location1_vt;
			sendNotificationMotor : notificationMotor bindings outAck = ack_ca;
			sendNotificationMotor2 : notificationMotor bindings outAck = ack_cs;
			delegations:
			ack to outNotifications
			arrivedStatus to outNotifications
			move to inMoveToStation
			passed to outNotifications
			loaded_unloaded to startedArm
			inAck to started_stopped
			startArm to startArm 
			AGVStatus to sendStatus 
			start to start_stop 
			stop to start_stop 
			arrivalDetected to arrivalDetected 
		}
	}
	
	
	boundary component def RobotArm {
		ports: start : inCommandToArm {
		}
		started : outNotificationFromArm {
		}
	}
	boundary component def Motor {
		ports: start_stop : inCommandToMotor {
		}
		started_stopped : outNotificationFromMotor {
		}
	}
	boundary component def ArrivalSensor {
		ports: arrivalDetected : outLocation {
		}
	}
		component def VehicleTimer {
		ports: AGVStatus : outStatus {
		}
		location1 : inLocation {
		}
		destination : inLocation {
		}
		cmd : inCommandToArm {
		}
	}
	component def NotifierArm {
		ports: arrivedStatus : outNotificationToSupervisory {
		}
		loaded_unloaded : inNotificationFromArm {
		}
	}
	
	
	
	component def ControlArm {
		ports: 
			cmd : inCommandToArm {
			}
			ack : inNotificationFromMotor {
			}
			startArm : outCommandToArm {
			}
	}
	
	
	
	component def CheckStation {
		ports: ack : inNotificationFromMotor {
		}
		location1 : outLocation {
		}
		destination : inLocation {
		}
		stop : outCommandToMotor {
		}
		arrivalDetected : inLocation {
		}
		passed : outNotificationToSupervisory {
		}
	}
	component def NotifierMotor {
		ports: inAck : inNotificationFromMotor {
		}
		ack : outNotificationToSupervisory {
		}
		outAck : outNotificationFromMotor {
		}
	}
	component def StartMoving {
		ports: move : inVehicleData {
		}
		cmd : outCommandToArm {
		}
		destination : outLocation {
		}
		start : outCommandToMotor {
		}
	}
activity def StartMovingAC ( move : VehicleData) : (cmd : CommandToArm, destination : Location, start : CommandToMotor) {
		body {
		actions : sc : SendCommandAN {
				using pins: moveSC : VehicleData;
			}
			sd : SendDestinationAN {
				using pins: moveSD : VehicleData;
			}
			ssm : SendStartMotorAN {
				using pins: moveSSM : VehicleData;
			}
			delegate destination to sd 
			delegate cmd to sc 
			delegate start to ssm
			delegate move to moveSD 
			delegate move to moveSC 
			delegate move to moveSSM
		}
	}
action def SendStartMotorAN ( move : VehicleData ) : CommandToMotor {
	constraint : post-condition SendStartMotorEQ
		delegate SendStartMotorAN to cmd
	}
	action def SendCommandAN ( move : VehicleData ) : CommandToArm {
	constraint : post-condition SendCommandEQ
	delegate SendCommandAN to cmd delegate move to move
	}
	action def SendDestinationAN ( move : VehicleData ) : Location {
	constraint : post-condition SendDestinationEQ
	delegate SendDestinationAN to destination delegate move to move
	}
	activity def NotifierMotorAC ( inStatusMotor : NotificationFromMotor ) : (outStatusMotor : NotificationFromMotor, ack : NotificationToSupervisory) {
		body {
		actions : nagvm : NotifyAGVFromMotorAN {
				using pins: statusMotor : NotificationFromMotor;
			}
			nsm : NotifySupervisoryFromMotorAN {
				using pins: statusMotor : NotificationFromMotor;
			}
			delegate outStatusMotor to nagvm 
			delegate ack to nsm 
			delegate inStatusMotor to statusMotor 
			delegate inStatusMotor to statusMotor
		}
	}
	action def NotifyAGVFromMotorAN ( statusMotor : NotificationFromMotor ) : NotificationFromMotor {
	constraint : post-condition NotifyAGVFromMotorEQ
	delegate NotifyAGVFromMotorAN to outStatusMotor delegate
		statusMotor to inStatusMotor
	}
	action def NotifySupervisoryFromMotorAN ( statusMotor : NotificationFromMotor ) : NotificationToSupervisory {
	constraint : post-condition NotifySupervisoryFromMotorEQ
	delegate NotifySupervisoryFromMotorAN to ack
		delegate statusMotor to statusMotor
	}
	activity def CheckStationAC ( statusMotor : NotificationFromMotor, destination : Location, inLocation : Location ) : (stopMotor :
	CommandToMotor, outLocation : Location, passed : NotificationToSupervisory) {
		body {
		actions : cs : CompareStationsAN {
				using pins: statusMotor : NotificationFromMotor; 
				destination : Location; location1 : Location;
			}
			scl : SendCurrentLocationAN {
				using pins: location1 : Location;
			}
			sm : StopMotorAN {
				using pins: comparisonResultSM : Boolean;
			}
			pm : PassedMotorAN {
				using pins: comparisonResultPM : Boolean;
			}
			delegate statusMotor to NotificationsMotor 
			delegate destination to	Destinations 
			flow from NotificationsMotor to statusMotor 
			flow from Destinations to destination 
			delegate inLocation to location1
			delegate outLocation to scl 
			delegate inLocation to location1 
			delegate stopMotor to sm 
			delegate passed to pm 
			flow from cs to comparisonResultPM
			flow from cs to comparisonResultSM
			datastore NotificationsMotor : NotificationFromMotor {
			}
			datastore Destinations : Location {
			}
		}
	}
	action def CompareStationsAN ( statusMotor : NotificationFromMotor, destination : Location, location1 : Location ) : Boolean {
	constraint : post-condition CompareStationsEQ pre-condition NotificationMotorIsStartedEQ
	delegate CompareStationsAN to result delegate location1 to
		loc delegate destination to dest
		delegate statusMotor to statusMotor
	}
	action def StopMotorAN ( comparisonResult : Boolean ) : CommandToMotor {
	constraint : post-condition StopMotorEQ
	delegate comparisonResult to result delegate StopMotorAN to cmd
	}
	action def PassedMotorAN ( comparisonResult : Boolean ) : NotificationToSupervisory {
	constraint : post-condition PassedMotorEQ
	delegate PassedMotorAN to ack delegate comparisonResult to result
	}
	action def SendCurrentLocationAN ( location1 : Location ) : Location {
	constraint : post-condition SendCurrentLocationEQ
	delegate location1 to inLocation delegate
		SendCurrentLocationAN to outLocation
	}
	activity def ControlArmAC ( cmd : CommandToArm, statusMotor : NotificationFromMotor ) : (startArm : CommandToArm) {
		body {
		actions : ca : ControlArmAN {
				using pins: cmd : CommandToArm;
				statusMotor : NotificationFromMotor;
			}
			delegate startArm to ca delegate cmd to cmd delegate statusMotor to statusMotor
		}
	}
	activity def NotifierArmAC ( statusArm : NotificationFromArm ) :
	(ack : NotificationToSupervisory) {
		body {
		actions : na : NotifierArmAN {
				using pins: statusArm : NotificationFromArm;
			}
			delegate ack to na delegate statusArm to statusArm
		}
	}
	activity def VehicleTimerAC ( destination : Location, location1 : Location, cmd : CommandToArm ) : (status : Status) {
		body {
		actions : vt : VehicleTimerAN {
				using pins: cmd : CommandToArm;
				destination : Location;
				location1 : Location;
			}
			delegate status to vt delegate cmd to cmd delegate destination to
			destination delegate location1 to location1
		}
	}
	action def ControlArmAN ( cmd : CommandToArm, statusMotor : NotificationFromMotor ) : CommandToArm {
	constraint : post-condition ControlArmEQ
	delegate ControlArmAN to startArm delegate statusMotor to
		statusMotor delegate cmd to cmd
	}
	action def NotifierArmAN ( statusArm : NotificationFromArm ) : NotificationToSupervisory {
	constraint : post-condition NotifierArmEQ
	delegate NotifierArmAN to ack
	}
	action def VehicleTimerAN ( destination : Location, location1 : Location, cmd : CommandToArm ) : Status {
	constraint : post-condition VehicleTimerEQ
	delegate VehicleTimerAN to s delegate location1 to
		loc delegate destination to dest delegate cmd
		to cmd
	}
	constraint SendStartMotorEQ () : 
		(cmd : CommandToMotor) {
			equation = cmd == /*Se der um Ctrl+space aqui ele n�o mostra as op��es do escopo*/ CommandToMotor::start
		}
	constraint SendDestinationEQ ( move : VehicleData ) :
		(destination : Location) {
			equation = destination == move->destination
		}
	constraint NotifyAGVFromMotorEQ ( inStatusMotor : NotificationFromMotor ) :
		(outStatusMotor : NotificationFromMotor) {
			equation = outStatusMotor == inStatusMotor
		}
	constraint SendCommandEQ ( move : VehicleData ) :
		(cmd : CommandToArm) {
			equation = cmd == move->command
		}
	constraint NotifySupervisoryFromMotorEQ ( statusMotor : NotificationFromMotor ) :
		(ack : NotificationToSupervisory) {
			equation = statusMotor == NotificationFromMotor::started ? 
			ack == NotificationToSupervisory::departed : 
			ack == NotificationToSupervisory::traveling
		}
	constraint NotificationMotorIsStartedEQ (statusMotor : NotificationFromMotor) {
			equation = statusMotor == NotificationFromMotor::started
		}
	constraint CompareStationsEQ ( dest : Location, loc : Location ) :
		(result : Boolean) {
			equation = dest == loc ? result == true : result == false
		}
	constraint StopMotorEQ ( result : Boolean ) :
		(cmd : CommandToMotor) {
			equation = result == true ? cmd == CommandToMotor::stop : cmd == SysADL.types.Void
		}
	constraint PassedMotorEQ ( result : Boolean ) :
		(ack : NotificationToSupervisory) {
			equation = result == false ? ack == NotificationToSupervisory::passed : ack == SysADL.types.Void
		}
	constraint SendCurrentLocationEQ ( inLocation : Location ) :
		(outLocation : Location) {
			equation = outLocation == inLocation
		}
	constraint ControlArmEQ ( cmd : CommandToArm, statusMotor : NotificationFromMotor ) :
		(startArm : CommandToArm) {
			equation = statusMotor == NotificationFromMotor::stopped ?
			startArm == cmd : startArm == CommandToArm::idle
		}
	constraint NotifierArmEQ () :
		(ack : NotificationToSupervisory) {
			equation = ack == NotificationToSupervisory::arrived
		}
	constraint VehicleTimerEQ ( dest : Location, loc : Location, cmd : CommandToArm ) :
		(s : Status) {
			equation = s->destination == dest && s->location1 == loc && s->command == cmd
		}
}
Requirement RequestMove ( 1.0 ) {
	text = "The external Supervisory System sends a \"Move\" command to the AGV System requesting it to move to a factory station and load/unload a part."
	satisfied by ComponentsAGV.SupervisorySystem;
}
Requirement ReceiveNotifications ( 1.1 ) {
	text = "The Supervisory System should receive the AGV system notifications." 
	satisfied by ComponentsAGV.SupervisorySystem;
}
Requirement ControlLoadingUnloading ( 2.0 ) {
	text = "The AGV system must control the loading and unloading of parts between stations factory, interacting with Supervisory and Display Systems."
	satisfied by ComponentsAGV.IAGVSystemCP;
	Requirement MoveToStation ( 2.1 ) {
		text = "An AGV can move along a track in the factory in a clockwise direction, and start and stop at factory stations."
		Requirement CommandMotorStartMove ( 2.2 ) {
			text = "The AGV System sends a \"Start Motor\" command to Motor to start moving."
			satisfied by ComponentsAGV.StartMoving;
		}
		Requirement SendStartedAcknowledgement ( 2.3 ) {
			text = "Motor sends \"Started\" acknowledge message to AGV System."
			satisfied by ComponentsAGV.Motor;
		}
		Requirement DetectArrived ( 2.4 ) {
			text = "The arrival sensor must detect that it has arrived at the factory station and notifies the AGV System."
			satisfied by ComponentsAGV.ArrivalSensor;
		}
		Requirement CheckDestination ( 2.5 ) {
			text = "The AGV System checks if the current station is the arrival station."
			satisfied by ComponentsAGV.CheckStation;
		}
		Requirement CommandMotorStopMove ( 2.6 ) {
			text = "If this station is the destination station, the AGV System sends \"Stop Moto\" message to Motor, else the vehicle passes the station without stopping."
			satisfied by ComponentsAGV.CheckStation;
		}
		Requirement SendStoppedAcknowledgement ( 2.7 ) {
			text = "Motor sends \"Stopped\" acknowledge message to AGV System."
			satisfied by ComponentsAGV.Motor;
		}
		Requirement CommandLoadUnload ( 2.8 ) {
			text = "The AGV System sends \"Load/Unload\" message to Robot Arm."
			satisfied by ComponentsAGV.ControlArm;
		}
		Requirement SendAcknowledgement ( 2.9 ) {
			text = "Robot Arm sends;Load/Unload acknowledge message to AGV System indicating that the arm has finished."
			satisfied by ComponentsAGV.RobotArm;
		}
		Requirement NotifySupervisorySystem ( 2.10 ) {
			text = "The AGV System must notify the supervisory system when the vehicle start moving or get to a station."
		}
	}
	Requirement SendVehicleStatus ( 2.13 ) {
		text = "The AGV system should send vehicle status to an external Display System every 30 seconds."
		satisfied by ComponentsAGV.VehicleTimer;
	}
}
Requirement NotifyFromMotor ( 2.11 ) {
	text = "The AGV System must send a \"Departed\" message to the Supervisory System when vehicle start moving and a \"Passed\" message when vehicle come to a different station of destination station."
	satisfied by ComponentsAGV.NotifierMotor;
	derive ControlLoadingUnloading.MoveToStation.NotifySupervisorySystem;
}
Requirement NotifyFromArm ( 2.12 ) {
	text = "The AGV System must send a \"Arrived\" message when the part has been loaded/unloaded."
	satisfied by ComponentsAGV.NotifierArm;
	derive ControlLoadingUnloading.MoveToStation.NotifySupervisorySystem;
}
Requirement ReceiveVehicleStatus ( 3.0 ) {
	text = "The Display System must receive of AGV system the vehicle status."
	satisfied by ComponentsAGV.DisplaySystem;
}