Model SysADLArchitecture;
package SysADL.types {
	
	//////////////types//////////////
	
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	value type LocalTemperature {
	}
	value type CelsiusTemperature{
	}
	value type FahrenheitTemperature {
	}
	value type AtmPressure {
	}
	value type Humidity {
	}
	datatype Location {
		attributes: 
			latitude : Real; 
			longitude : Real;
	}
	datatype WeatherStation {
		attributes: 
			ct : Int;
			l : Location;
			t : LocalTemperature;
			h : Humidity;
			p : AtmPressure;
	}
	
	//////////////Ports//////////////

	port def TemperatureIPT {
		flow in LocalTemperature
	}
	port def TemperatureOPT {
		flow out LocalTemperature
	}
	port def HumidityIPT {
		flow in Humidity
	}
	port def HumidityOPT {
		flow out Humidity
	}
	port def AtmPressureIPT {
		flow in AtmPressure
	}
	port def AtmPressureOPT {
		flow out AtmPressure
	}
	port def WeatherStationIPT {
		flow in WeatherStation
	}
	port def WeatherStationOPT {
		flow out WeatherStation
	}

	//////////////Connectors//////////////
	
	connector def TemperatureCN {
		participants: ~ t_out : TemperatureOPT {
		}
		~ t_in : TemperatureIPT {
		}
		flows: LocalTemperature from t_out to t_in
	}
	connector def HumidityCN {
		participants: ~ h_out : HumidityOPT {
		}
		~ h_in : HumidityIPT {
		}
		flows: Humidity from h_out to h_in
	}
	connector def AtmPressureCN {
		participants: ~ ap_out : AtmPressureOPT {
		}
		~ ap_in : AtmPressureIPT {
		}
		flows: AtmPressure from ap_out to ap_in
	}
	connector def WatherStationCN {
		participants: ~ op : WeatherStationOPT {
		}
		~ ip : WeatherStationIPT {
		}
		flows: WeatherStation from op to ip
	}
	
	//////////////Components//////////////

	boundary component def DisplayCP {
		ports: 
			t : TemperatureIPT {}
			h : HumidityIPT {}
			ap : AtmPressureIPT {}
	}
	boundary component def TemperatureSensorCP {
		ports: 
			tp : TemperatureOPT {}
	}
	boundary component def HumiditySensorCP {
		ports: 
			hp : HumidityOPT {}
	}
	boundary component def AtmPressureSensorCP {
		ports: 
			ap : AtmPressureOPT {}
	}
	component def WatherStationCN_2 {
		ports: 
			op : WeatherStationOPT {}
			ip : WeatherStationIPT {}
	}
	component def WeatherProcessingSubSystemCP {
		ports:
			ip : WeatherStationIPT {}
			tp : TemperatureOPT {}
			hp : HumidityOPT {}
			ap : AtmPressureOPT {}
	}
	component def WSDataAggregatorCP {
		ports: 
			ap : AtmPressureIPT {}
			hp : HumidityIPT {}
			tp : TemperatureIPT {}
			op : WeatherStationOPT {}
			ip : WeatherStationIPT {}
	}
	component def WeatherStationCP {
		ports: 
			ip : WeatherStationIPT {}
			op : WeatherStationOPT {}
		configuration {
			components:
				ts : TemperatureSensorCP {
					using ports: 
						tp_ts : TemperatureOPT {}
				}
				hs : HumiditySensorCP {
					using ports: 
						hp_hs : HumidityOPT {}
				}
				aps : AtmPressureSensorCP {
					using ports: 
						ap_aps : AtmPressureOPT {}
				}
				WSDA : WSDataAggregatorCP {
					using ports: 
						ap_WSDA : AtmPressureIPT {}
						hp_WSDA : HumidityIPT {}
						tp_WSDA : TemperatureIPT {}
						op_WSDA : WeatherStationOPT {}
						ip_WSDA : WeatherStationIPT {}
				}
			connectors:
				hcn : HumidityCN bindings hp_hs = hp_WSDA; 
				apcn : AtmPressureCN bindings ap_aps = ap_WSDA;
				tcn : TemperatureCN bindings tp_ts = tp_WSDA;
			delegations:
				op_WSDA to op ip_WSDA to ip
		}
	}
	architecture def Arch1 {
		ports:
		configuration {
			components:
				wps : WeatherProcessingSubSystemCP {
					using ports: 
						ip_wps : WeatherStationIPT {}
						tp : TemperatureOPT {}
						hp : HumidityOPT {}
						ap : AtmPressureOPT {}
				}
				ws3 : WeatherStationCP {
					using ports: 
						ip_ws3 : WeatherStationIPT {}
						op_ws3 : WeatherStationOPT {}
				}
				ws2 : WeatherStationCP {
					using ports: 
						ip_ws2 : WeatherStationIPT {}
						op_ws2 : WeatherStationOPT {}
				}
				ws1 : WeatherStationCP {
					using ports: 
						ip_ws1 : WeatherStationIPT {}
						op_ws1 : WeatherStationOPT {}
				}
				d : DisplayCP {
					using ports: 
						t : TemperatureIPT {}
						h : HumidityIPT {}
						ap : AtmPressureIPT {}
				}
			connectors:
				wscn3 : WatherStationCN bindings op_ws3 = ip_ws2; 
				wscn2 : WatherStationCN bindings op_ws2 = ip_ws1; 
				wscn1 :	WatherStationCN bindings op_ws1 = ip_wps;
				apCN :AtmPressureCN bindings ap = ap; 
				hCN : HumidityCN bindings hp = h; 
				tCN : TemperatureCN bindings tp = t;
		}
	}
	architecture def Arch2 {
		ports:
		configuration {
			components:
				ws3 : WeatherStationCP {
					using ports: 
						ip_ws3 : WeatherStationIPT {}
						op_ws3 : WeatherStationOPT {}
				}
				ws1 : WeatherStationCP {
					using ports: 
						ip_ws1 : WeatherStationIPT {}
						op_ws1 : WeatherStationOPT {}
				}
				ws4 : WeatherStationCP {
					using ports: 
						ip_ws4 : WeatherStationIPT {}
						op_ws4 : WeatherStationOPT {}
				}
				wps : WeatherProcessingSubSystemCP {
					using ports:
						ip : WeatherStationIPT {}
						tp : TemperatureOPT {}
						hp : HumidityOPT {}
						ap : AtmPressureOPT {}
				}
				ws5 : WeatherStationCP {
					using ports: 
						ip_ws5 : WeatherStationIPT {}
						op_ws5 : WeatherStationOPT {}
				}
				ws2 : WeatherStationCP {
					using ports: 
						ip_ws2 : WeatherStationIPT {}
						op_ws2 : WeatherStationOPT {}
				}
				ws6 : WeatherStationCP {
					using ports: 
						ip_ws6 : WeatherStationIPT {}
						op_ws6 : WeatherStationOPT {}
				}
				d : DisplayCP {
					using ports: 
						t : TemperatureIPT {}
						h : HumidityIPT {}
						ap : AtmPressureIPT {}
				}
			connectors:
				wscn6 : WatherStationCN bindings op_ws6 = ip_ws5;
				wscn3 : WatherStationCN bindings op_ws3 = ip_ws2;
				wscn5 :	WatherStationCN bindings op_ws5 = ip_ws4;
				wscn1 :	WatherStationCN bindings op_ws1 = ip;
				wscn2 :	WatherStationCN bindings op_ws2 = ip_ws1;
				wscn4 :	WatherStationCN bindings op_ws4 = ip;
				apCN : AtmPressureCN bindings ap = ap;
				tCN : TemperatureCN bindings tp = t;
				hCN : HumidityCN bindings hp = h;
		}
	}
	architecture def Arch3 {
		ports:
		configuration {
			components:
				ws3 : WeatherStationCP {
					using ports: 
						ip_ws3 : WeatherStationIPT {}
						op_ws3 : WeatherStationOPT {}
				}
				ws2 : WeatherStationCP {
					using ports: 
						ip_ws2 : WeatherStationIPT {}
						op_ws2 : WeatherStationOPT {}
				}
				ws1 : WeatherStationCP {
					using ports: 
						ip_ws1 : WeatherStationIPT {}
						op_ws1 : WeatherStationOPT {}
				}
				wps : WeatherProcessingSubSystemCP {
					using ports:		 
						ip1 : WeatherStationIPT {}
						ip2 : WeatherStationIPT {}
						tp : TemperatureOPT {}
						hp : HumidityOPT {}
						ap : AtmPressureOPT {}
				}
				ws6 : WeatherStationCP {
					using ports: 
						ip_ws6 : WeatherStationIPT {}
						op_ws6 : WeatherStationOPT {}
				}
				ws5 : WeatherStationCP {
					using ports: 
						ip_ws5 : WeatherStationIPT {}
						op_ws5 : WeatherStationOPT {}
				}
				ws4 : WeatherStationCP {
					using ports: 
						ip_ws4 : WeatherStationIPT {}
						op_ws4 : WeatherStationOPT {}
				}
				d : DisplayCP {
					using ports: 
						t : TemperatureIPT {}
						h : HumidityIPT {}
						ap : AtmPressureIPT {}
			}
			connectors:
				wscn1 : WatherStationCN bindings op_ws1 = ip1; 
				wscn2 : WatherStationCN bindings op_ws2 = ip_ws1;
				wscn3 :	WatherStationCN bindings op_ws3 = ip_ws2;
				wscn6 :	WatherStationCN bindings op_ws6 = ip_ws5;
				wscn5 :	WatherStationCN bindings op_ws5 = ip_ws4;
				wscn4 : WatherStationCN bindings op_ws4 = ip2;
				apCN : AtmPressureCN bindings ap = ap;
				hCN : HumidityCN bindings hp = h;
				tCN : TemperatureCN bindings tp = t;
		}
	}	

}