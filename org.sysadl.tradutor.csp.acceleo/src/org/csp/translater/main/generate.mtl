[comment encoding = UTF-8 /]
[module generate('http://org.sysadl')]
[import org::csp::translater::query::auxQuery /]

[template public generateModel(aModel : sysadl::Model)]
[comment @main/]
[file ('sysadl2csp.csp', false, 'UTF-8')]
subset(s1, s2) = (inter(s1,s2)==s1)
IS_TRUE(h) = if (h) then SKIP else DIV

	[for (pck : sysadl::Package | aModel.packages)]		
	[comment Traduzindo Tipos /]		
		[for (elem : ElementDef | pck.definitions)]
			[let unity : UnitDef = self]				
				[for (type : ElementDef | pck.definitions)? (type.oclIsKindOf(TypeDef))]
					[if (unity.name.concat(unity.dimension.name).equalsIgnoreCase(type.name))]
[type.name/] = [getTypeUnity(type.oclAsType(TypeDef))/]						
					[/if]
				[/for]								
				
			[/let]			
			[let aux : Enumeration = self]
datatype [aux.name/] = [for (literal : EnumLiteralValue | aux.literals)separator ('|')][literal.name/][/for] 					
			[/let]		
			[let datatype : DataTypeDef = self]
[datatype.name/] = { [for (attribute : TypeUse | datatype.attributes)before ('(')separator(',')after (')')][attribute.name/][/for] | [for (attributeDef : TypeUse | datatype.attributes) separator (',')][attributeDef.name/]<- [if (attributeDef.definition.name.equalsIgnoreCase('String'))]Char [elseif(attributeDef.definition.name.equalsIgnoreCase('Boolean'))]Bool[elseif(attributeDef.definition.name.equalsIgnoreCase('Int'))]Nat[elseif(attributeDef.definition.name.equalsIgnoreCase('Real'))]Nat.Nat[else][attributeDef.definition.name/][/if] [/for] }
[for (attribute : TypeUse | datatype.attributes)separator ('\n')][datatype.name/]_[attribute.name/]([for (attribute : TypeUse | datatype.attributes)before ('(')separator(',')after (')')][attribute.name/][/for]) = [attribute.name/][/for]
			[/let]
			
	[comment Traduzindo Canais /]
			[let compDef : ComponentDef = self]					
					[if (not compDef.isBoundary and compDef.composite <> null)]		
						[for (compUse : ComponentUse| compDef.composite.components)]
							[for (portUse : PortUse | compUse.ports)]
								[if (portUse.definition.oclIsKindOf(sysadl::SimplePortDef))]
channel [compUse.name/]_[portUse.name/]_[portUse.definition.name/] : [getTypePort(portUse)/]
								[/if]
								[if (portUse.definition.oclIsKindOf(sysadl::CompositePortDef))]
								[for (compPort : PortUse | portUse.definition.oclAsType(sysadl::CompositePortDef).ports )]
									[if (compPort.definition.oclIsKindOf(sysadl::SimplePortDef))]
channel [compUse.name/]_[portUse.name/]_[compPort.name/]_[portUse.definition.name/] : [getTypePort(portUse)/]
									[/if]
								[/for]
								[/if]
							[/for]
						[/for] 

			[comment traduzindo configuração /]
						[if ( isEmpty_Delegations(compDef.composite))]									
[compDef.name/] =  ([compDef.name/]_COMPONENTS ['['/]| [compDef.name/]_Paralell |] [compDef.name/]_CONNECTORS) \[compDef.name/]_internal

[compDef.name/]_Paralell = {| [for (compUse : ComponentUse | compDef.composite.components)separator (',')][for (portUse : PortUse | compUse.ports)separator (',')]
 								[compUse.name/]_[portUse.name/]_[portUse.definition.name/]
 [/for]
 [/for] 					|}
[compDef.name/]_internal = {| [getInternalChannelsCompDef(compDef)/] |}

assert [compDef.name/]:['['/]deadlock free]
assert [compDef.name/]:['['/]livelock free]

[compDef.name/]_COMPONENTS = ['\n\t'/][for (compUse : ComponentUse | compDef.composite.components)separator ('\t|||')]
[compUse.name/]_[compUse.definition.name/]
 [/for]

[compDef.name/]_CONNECTORS = ['\n\t'/][for (connectorUse : ConnectorUse | compDef.composite.connectors)separator ('\t|||')]
[connectorUse.name/]_[connectorUse.definition.name/]
 [/for]
													
						[/if]
						
			[comment traduzindo componentes /]						
						[for (compUse : ComponentUse | compDef.composite.components)]
							[if (compUse.definition.isBoundary)]
[compUse.name/]_[compUse.definition.name/] = 
								[for (port : PortUse | compUse.ports)]								
									[if (port.definition.oclIsKindOf(sysadl::SimplePortDef))]
										[if (port.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('in'))]
['\t'/][compUse.name/]_[port.name/]_[port.definition.name/]?[port.name.toLowerCase()/] ->
										[/if]
									[else]
										[for (compPort : PortUse | port.definition.oclAsType(sysadl::CompositePortDef).ports)]
											[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('in'))]
['\t'/][compUse.name/]_[port.name/]_[compPort.name/]_[port.definition.name/]?[compPort.name.toLowerCase()/] ->
											[/if]
										[/for]
									[/if]
								[/for]
								[for (port : PortUse | compUse.ports)]								
									[if (port.definition.oclIsKindOf(sysadl::SimplePortDef))]
										[if (port.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('out'))]
['\t'/]|~| [port.name.toLowerCase()/]:[getTypePort(port)/] @ [compUse.name/]_[port.name/]_[port.definition.name/]![port.name.toLowerCase()/] ->
										[/if]
									[else]
										[for (compPort : PortUse | port.definition.oclAsType(sysadl::CompositePortDef).ports)]
											[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('out'))]
['\t'/]|~|[compPort.name.toLowerCase()/]:[getTypePort(port)/] @ [compUse.name/]_[port.name/]_[compPort.name/]_[port.definition.name/]![compPort.name.toLowerCase()/] ->
											[/if]
										[/for]
									[/if]
								[/for]
[compUse.name/]_[compUse.definition.name/]

							[elseif (compUse.definition.composite <> null and (not compUse.definition.isBoundary))]								
[compUse.name/]_[compUse.definition.name/] = 								
	[compUse.name/]_[compUse.definition.name/]_Config

[compUse.name/]_[compUse.definition.name/]_Config = ([compUse.name/]_COMPONENTS ['['/]| [compUse.name/]_internal |] [compUse.name/]_CONNECTORS) \[compUse.name/]_internal

[compUse.name/]_internal = {| [getInternalChannelsCompDef(compUse.definition)/],
								[for (portUse : PortUse | compUse.ports)separator (',')] [compUse.name/]_[portUse.name/]_[portUse.definition.name/]
								[/for]|}

[compUse.name/]_COMPONENTS = ['\n\t'/][for (compUseInt : ComponentUse | compUse.definition.composite.components)separator ('\t|||')]
[compUseInt.name/]_[compUseInt.definition.name/]
 [/for]

[compUse.name/]_CONNECTORS = ['\n\t'/][for (connectorUse : ConnectorUse | compUse.definition.composite.connectors)separator ('\t|||')]
[connectorUse.name/]_[connectorUse.definition.name/]
 [/for]
								[if (compUse.definition.composite.delegations <> null)]
[compUse.name/]_DELEGATIONS = ['\n\t'/][for (delegation : Delegation | compUse.definition.composite.delegations)separator ('\t|||')]
[delegation.source.name/]_To_[delegation.destination.name/]	
[/for]
									
								[/if]								

							[else]
[compUse.name/]_[compUse.definition.name/] =								
['\t'/][compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]

[compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/] = 
['\t'/]([compUse.name/]_PINS_[getActivityToStructure(compUse.definition, aModel.allocation)/] 
['\t\t'/]['['/]| [compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]_internal |]
['\t'/][compUse.name/]_ACTIONS_[getActivityToStructure(compUse.definition, aModel.allocation)/]) \[compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]_internal 

[compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]_internal = {|
[for (flow : ActivityRelation | getActivityFromAllocTable(compUse.definition, aModel.allocation)._body.flows )separator (',')]
	[if (flow.target.oclIsKindOf(Pin) and flow.oclIsKindOf(ActivityFlow))]
[compUse.name/]_[flow.target.oclAsType(Pin).name/]_[flow.target.oclAsType(Pin).definition.name/]
	[else]
[compUse.name/]_[flow.source.oclAsType(Pin).name/]_[flow.source.oclAsType(Pin).definition.name/]
	[/if]
[/for],
[for (portUse : PortUse | compUse.ports)separator (',')]
[compUse.name/]_[portUse.name/]_[portUse.definition.name/]
[/for]
 |}

[for (flow : ActivityRelation | getActivityFromAllocTable(compUse.definition, aModel.allocation)._body.flows )]
	[if (flow.target.oclIsKindOf(Pin) and flow.oclIsKindOf(ActivityFlow))]
channel [compUse.name/]_[flow.target.oclAsType(Pin).name/]_[flow.target.oclAsType(Pin).definition.name/] : [getTypePin(flow.target.oclAsType(Pin))/]		
	[else]
channel [compUse.name/]_[flow.source.oclAsType(Pin).name/]_[flow.source.oclAsType(Pin).definition.name/] : [getTypePin(flow.source.oclAsType(Pin))/]
	[/if]
[/for]


[if (getActivityFromAllocTable(compUse.definition, aModel.allocation) <> null)]
[compUse.name/]_ACTIONS_[getActivityToStructure(compUse.definition, aModel.allocation)/] =
['['/]| [compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]_internal |] i : {1 .. [getActionListSize(getActivityFromAllocTable(compUse.definition, aModel.allocation))/]} @ [compUse.name/]_[getActivityFromAllocTable(compUse.definition, aModel.allocation).name/]_ACTIONS(i)

[getActionFunction(getActivityFromAllocTable(compUse.definition, aModel.allocation), compUse.name)/]

[for (action : ActionUse | getActivityFromAllocTable(compUse.definition, aModel.allocation)._body.actions)]
[compUse.name/]_[action.name/]_[action.definition.name/] = 
['\t'/][getActionBody(getActivityFromAllocTable(compUse.definition, aModel.allocation),action, compUse.name)/]
['\t'/][compUse.name/]_[action.name/]_[action.definition.name/]

		[/for]
[compUse.name/]_PINS_[getActivityToStructure(compUse.definition, aModel.allocation)/] = 
['\t'/]['['/]| [compUse.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]_internal |] i : {1 .. [getPinListSize(getActivityFromAllocTable(compUse.definition, aModel.allocation))/]} @ [compUse.name/]_[getActivityFromAllocTable(compUse.definition, aModel.allocation).name/]_PIN(i)

[getPinFunction(getActivityFromAllocTable(compUse.definition, aModel.allocation), compUse.name)/]

[for (pin : Pin | getActivityFromAllocTable(compUse.definition, aModel.allocation).inParameters)]
[compUse.name/]_[pin.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/] =
['\t'/][getPortAndPin(compUse, pin)/]
['\t'/][compUse.name/]_[pin.name/]_[pin.definition.name/]![pin.name/] ->
['\t'/][compUse.name/]_[pin.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]

		[/for]
[for (pin : Pin | getActivityFromAllocTable(compUse.definition, aModel.allocation).outParameters)]
[compUse.name/]_[pin.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/] = 
['\t'/][compUse.name/]_[pin.name/]_[pin.definition.name/]?[pin.name/] ->
['\t'/][getPortAndPin(compUse, pin)/]
['\t'/][compUse.name/]_[pin.name/]_[getActivityToStructure(compUse.definition, aModel.allocation)/]
		[/for]

[/if]	 
			
					[/if]							
						[/for]
					[comment  traduzindo conectores/]							
						[for (connector : ConnectorUse | compDef.composite.connectors)]							
							[for (bind : ConnectorBinding | connector.bindings)]
[connector.name/]_[connector.definition.name/] =
								[if (not existAlloc(connector.definition, aModel.allocation))]									
								[for (compUse : ComponentUse | compDef.composite.components)]
									[for (portComp : PortUse | compUse.ports)]						
										[if (bind.source.definition.oclIsKindOf(sysadl::SimplePortDef) and bind.source.name.equalsIgnoreCase(portComp.name))]									
['\t'/][compUse.name/]_[bind.source.name/]_[bind.source.definition.name/]?[bind.source.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/]->								
										[elseif(bind.source.definition.oclIsKindOf(sysadl::CompositePortDef) and bind.source.name.equalsIgnoreCase(portComp.name))]
											[for (compPort : PortUse | bind.source.definition.oclAsType(sysadl::CompositePortDef).ports)]
												[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('in'))]
['\t'/][compUse.name/]_[bind.source.name/]_[compPort.name/]_[bind.source.definition.name/]?[compPort.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/]	->																																
												[/if]										
											[/for]																						
										[elseif(bind.destination.definition.oclIsKindOf(sysadl::CompositePortDef) and bind.destination.name.equalsIgnoreCase(portComp.name))]
											[for (compPort : PortUse | bind.destination.definition.oclAsType(sysadl::CompositePortDef).ports)]
												[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('in'))]
['\t'/][compUse.name/]_[bind.destination.name/]_[compPort.name/]_[bind.destination.definition.name/]?[compPort.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/] ->																																
												[/if]
											[/for]									
										[/if]
									[/for]
								[/for]
								[for (compUse : ComponentUse | compDef.composite.components)]
									[for (portComp : PortUse | compUse.ports)]						
										[if (bind.destination.definition.oclIsKindOf(sysadl::SimplePortDef) and bind.destination.name.equalsIgnoreCase(portComp.name))]									
['\t'/][compUse.name/]_[bind.destination.name/]_[bind.destination.definition.name/]![bind.destination.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/]->								
										[elseif(bind.source.definition.oclIsKindOf(sysadl::CompositePortDef) and bind.source.name.equalsIgnoreCase(portComp.name))]
											[for (compPort : PortUse | bind.source.definition.oclAsType(sysadl::CompositePortDef).ports)]
												[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('out'))]
['\t'/][compUse.name/]_[bind.source.name/]_[compPort.name/]_[bind.source.definition.name/]![compPort.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/]	->																																
												[/if]										
											[/for]																						
										[elseif(bind.destination.definition.oclIsKindOf(sysadl::CompositePortDef) and bind.destination.name.equalsIgnoreCase(portComp.name))]
											[for (compPort : PortUse | bind.destination.definition.oclAsType(sysadl::CompositePortDef).ports)]
												[if (compPort.definition.oclAsType(sysadl::SimplePortDef).flowProperties.toString().contains('out'))]
['\t'/][compUse.name/]_[bind.destination.name/]_[compPort.name/]_[bind.destination.definition.name/]![compPort.definition.oclAsType(sysadl::SimplePortDef).flowType.name.toLowerCase()/] ->																																	
												[/if]
											[/for]									
										[/if]
									[/for]
								[/for]
[connector.name/]_[connector.definition.name/]

								[else]
['\t'/][connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]

[connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/] = 
['\t'/]([connector.name/]_PINS_[getActivityToStructure(connector.definition, aModel.allocation)/] 
['\t\t'/]['['/]| [connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]_internal |]
['\t'/][connector.name/]_ACTIONS_[getActivityToStructure(connector.definition, aModel.allocation)/]) \[connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]_internal 

[connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]_internal = {| 
[for (flow : ActivityRelation | getActivityFromAllocTable(connector.definition, aModel.allocation)._body.flows )separator (',')]
	[if (flow.target.oclIsKindOf(Pin) and flow.oclIsKindOf(ActivityFlow))]
[connector.name/]_[flow.target.oclAsType(Pin).name/]_[flow.target.oclAsType(Pin).definition.name/] 		
	[else]
[connector.name/]_[flow.source.oclAsType(Pin).name/]_[flow.source.oclAsType(Pin).definition.name/] 
	[/if]
[/for],
[for (pin : Pin| getActivityFromAllocTable(connector.definition, aModel.allocation).inParameters)]
	[getPortAndPinConnIn(connector, pin)/]
,   [getPortAndPinConnOut(connector, pin)/]
[/for]
|}

[for (flow : ActivityRelation | getActivityFromAllocTable(connector.definition, aModel.allocation)._body.flows )]
	[if (flow.target.oclIsKindOf(Pin) and flow.oclIsKindOf(ActivityFlow))]
channel [connector.name/]_[flow.target.oclAsType(Pin).name/]_[flow.target.oclAsType(Pin).definition.name/] : [getTypePin(flow.target.oclAsType(Pin))/]		
	[else]
channel [connector.name/]_[flow.source.oclAsType(Pin).name/]_[flow.source.oclAsType(Pin).definition.name/] : [getTypePin(flow.source.oclAsType(Pin))/]
	[/if]
[/for]

[if (getActivityFromAllocTable(connector.definition, aModel.allocation) <> null)]
[connector.name/]_ACTIONS_[getActivityToStructure(connector.definition, aModel.allocation)/] =
['['/]| [connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]_internal |] i : {1 .. [getActionListSize(getActivityFromAllocTable(connector.definition, aModel.allocation))/]} @ [connector.name/]_[getActivityFromAllocTable(connector.definition, aModel.allocation).name/]_ACTIONS(i)

[getActionFunction(getActivityFromAllocTable(connector.definition, aModel.allocation), connector.name)/]

[for (action : ActionUse | getActivityFromAllocTable(connector.definition, aModel.allocation)._body.actions)]
[connector.name/]_[action.name/]_[action.definition.name/] = 
['\t'/][getActionBody(getActivityFromAllocTable(connector.definition, aModel.allocation),action, connector.name)/]
['\t'/][connector.name/]_[action.name/]_[action.definition.name/]

		[/for]
[connector.name/]_PINS_[getActivityToStructure(connector.definition, aModel.allocation)/] = 
['\t'/]['['/]| [connector.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]_internal |] i : {1 .. [getPinListSize(getActivityFromAllocTable(connector.definition, aModel.allocation))/]} @ [connector.name/]_[getActivityFromAllocTable(connector.definition, aModel.allocation).name/]_PIN(i)

[getPinFunction(getActivityFromAllocTable(connector.definition, aModel.allocation), connector.name)/]

[for (pin : Pin | getActivityFromAllocTable(connector.definition, aModel.allocation).inParameters)]
[connector.name/]_[pin.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/] =
['\t'/][getPortAndPinConnIn(connector, pin)/]?[pin.definition.name.toLowerCase()/] ->
['\t'/][connector.name/]_[pin.name/]_[pin.definition.name/]![pin.definition.name.toLowerCase()/] ->
['\t'/][connector.name/]_[pin.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]

		[/for]
[for (pin : Pin | getActivityFromAllocTable(connector.definition, aModel.allocation).outParameters)]
[connector.name/]_[pin.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/] = 
['\t'/][connector.name/]_[pin.name/]_[pin.definition.name/]?[pin.definition.name.toLowerCase()/] ->
['\t'/][getPortAndPinConnOut(connector, pin)/]![pin.definition.name.toLowerCase()/] ->
['\t'/][connector.name/]_[pin.name/]_[getActivityToStructure(connector.definition, aModel.allocation)/]
		[/for]

[/if]	 
	
								[/if]
							[/for]																		
						[/for]									
					[/if]
				[/let]
				[let constraint : ConstraintDef = self]
[constraint.name/]([if (constraint.inParameters <> null)]x[/if][for (param : Pin | constraint.inParameters)before (',')separator (',')][param.name/][/for]) = [constraint.getContraints(constraint)/]

			[for (paramIn : Pin | constraint.inParameters)]
channel [constraint.name/]_[paramIn.name/]_[paramIn.definition.name/] : [getTypePin(paramIn)/]
			[/for]
[constraint.name/]_check = 
			[for (paramIn : Pin | constraint.inParameters)]
['\t'/][constraint.name/]_[paramIn.name/]_[paramIn.definition.name/]?[paramIn.name/] ->
			[/for]
['\t'/]true &
['\t\t'/]let
['\t\t'/] S = {[for (out : Pin | constraint.outParameters)separator (',')][out.name/][/for] | [for (out : Pin | constraint.outParameters)separator (',')][out.name/] <- [getTypePin(out)/][/for],
				[constraint.name/]([for (out : Pin | constraint.outParameters)separator (',')][out.name/][/for],[for (paramIn : Pin | constraint.inParameters)separator (',')][paramIn.name/][/for])}
['\t\t'/]within IS_TRUE(not (S == {}))

assert [constraint.name/]_check:['['/]livelock free]

[constraint.name/]_s = 
			{([for (paramIn : Pin | constraint.inParameters)separator (',')][paramIn.name/][/for],[for (out : Pin | constraint.outParameters)separator (',')][out.name/][/for]) | [for (paramIn : Pin | constraint.inParameters)separator (',')][paramIn.name/] <- [getTypePin(paramIn)/][/for],
['\t\t\t'/][for (out : Pin | constraint.outParameters)separator (',')][out.name/] <- [getTypePin(out)/][/for],
['\t\t\t'/][constraint.name/]([for (out : Pin | constraint.outParameters)separator (',')][out.name/][/for],[for (paramIn : Pin | constraint.inParameters)separator (',')][paramIn.name/][/for])}  
				[/let]
				[let exe: Executable = self]
[exe.name/]([for (param : TypeUse | exe.params)separator (',')][param.name/][/for])= [exe.getExecution(exe)/]

[exe.name/]_s = 
			{([for (paramIn : TypeUse | exe.params)separator (',')][paramIn.name/][/for],[for (out : TypeDef | exe.returnType)separator (',')][out.name.toLowerCase()/][/for]) | [for (paramIn : TypeUse | exe.params)separator (',')][paramIn.name/] <- [getTypeCSP(paramIn.definition)/][/for],
['\t\t\t'/][for (out : TypeDef | exe.returnType)separator (',')][out.name.toLowerCase()/] <- [getTypeCSP(out)/][/for],
['\t\t\t'/][exe.returnType.name.toLowerCase()/] == [exe.name/]([for (paramIn : TypeUse | exe.params)separator (',')][paramIn.name/][/for])}
				[/let]											
		[/for]						
	[/for]

	[for (behaviorExe : Allocation | aModel.allocation.allocs)? (behaviorExe.oclIsKindOf(ExecutableAllocation))]
assert IS_TRUE(subset([behaviorExe.oclAsType(ExecutableAllocation).source.name/]_s,[for (constraint : ConstraintUse | behaviorExe.oclAsType(ExecutableAllocation).target.constraints)][constraint.definition.name/]_s[/for])):['['/]divergence free]
	[/for]
	
[aModel.getDelegations()/]		

[/file]
[/template]
