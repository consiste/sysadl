subset(s1, s2) = (inter(s1,s2)==s1)
IS_TRUE(h) = if (h) then SKIP else DIV

datatype Command = On|Off 					
Commands = { (heater,cooler) | heater<- Command ,cooler<- Command  }
Commands_heater((heater,cooler)) = heater
Commands_cooler((heater,cooler)) = cooler
CelsiusTemperature = {0 .. 5}						
FahrenheitTemperature = {0 .. 5}						


channel localTemp1_CTemperatureIPT : CelsiusTemperature						
channel localTemp2_CTemperatureIPT : CelsiusTemperature						
channel localTemp3_CTemperatureIPT : CelsiusTemperature						
channel localTemp4_CTemperatureIPT : CelsiusTemperature						
channel presence1_PresenceIPT : Bool						
channel presence2_PresenceIPT : Bool						
channel userTemp1_CTemperatureIPT : CelsiusTemperature						
channel userTemp2_CTemperatureIPT : CelsiusTemperature						
channel Command1_CommandOPT : Command						
channel Command2_CommandOPT : Command						
channel Command3_CommandOPT : Command						
channel Command4_CommandOPT : Command						
channel current_FTemperatureOPT : FahrenheitTemperature						
channel desired_CTemperatureOPT : CelsiusTemperature						
channel detected_PresenceOPT : Bool						
channel controllerH_CommandIPT : Command						
channel controllerC_CommandIPT : Command						
channel detected_PresenceIPT : Bool						
channel userTemp_CTemperatureIPT : CelsiusTemperature						
channel target_CTemperatureOPT : CelsiusTemperature						
channel s1_CTemperatureIPT : CelsiusTemperature						
channel s2_CTemperatureIPT : CelsiusTemperature						
channel average_CTemperatureOPT : CelsiusTemperature						
channel target2_CTemperatureIPT : CelsiusTemperature						
channel average2_CTemperatureIPT : CelsiusTemperature						
channel heating_CommandOPT : Command						
channel cooling_CommandOPT : Command						

channel Ft_FTemperatureOPT : FahrenheitTemperature						
channel Ct_CTemperatureIPT : CelsiusTemperature						
channel pOut_PresenceOPT : Bool						
channel pIn_PresenceIPT : Bool						
channel commandOut_CommandOPT : Command						
channel commandIn_CommandIPT : Command						
channel CtOut_CTemperatureOPT : CelsiusTemperature						
channel ctIn_CTemperatureIPT : CelsiusTemperature						

channel pc1_pc1_PresenceIPT : Bool
channel pc1_uic1_CTemperatureIPT : CelsiusTemperature
channel pc1_tar1_CTemperatureOPT : CelsiusTemperature
channel pc2_pc2_PresenceIPT : Bool
channel pc2_uic2_CTemperatureIPT : CelsiusTemperature
channel pc2_tar2_CTemperatureOPT : CelsiusTemperature
channel sm1_s1_CTemperatureIPT : CelsiusTemperature
channel sm1_s2_CTemperatureIPT : CelsiusTemperature
channel sm1_av1_CTemperatureOPT : CelsiusTemperature
channel sm2_s3_CTemperatureIPT : CelsiusTemperature
channel sm2_s4_CTemperatureIPT : CelsiusTemperature
channel sm2_av2_CTemperatureOPT : CelsiusTemperature
channel cm1_ctar1_CTemperatureIPT : CelsiusTemperature
channel cm1_cav1_CTemperatureIPT : CelsiusTemperature
channel cm1_ch1_CommandOPT : Command
channel cm1_cc1_CommandOPT : Command
channel cm2_ctar2_CTemperatureIPT : CelsiusTemperature
channel cm2_cav2_CTemperatureIPT : CelsiusTemperature
channel cm2_ch2_CommandOPT : Command
channel cm2_cc2_CommandOPT : Command
channel rtc_localTemp1_CTemperatureIPT : CelsiusTemperature
channel rtc_localTemp2_CTemperatureIPT : CelsiusTemperature
channel rtc_localTemp3_CTemperatureIPT : CelsiusTemperature
channel rtc_localTemp4_CTemperatureIPT : CelsiusTemperature
channel rtc_presence1_PresenceIPT : Bool
channel rtc_presence2_PresenceIPT : Bool
channel rtc_userTemp1_CTemperatureIPT : CelsiusTemperature
channel rtc_userTemp2_CTemperatureIPT : CelsiusTemperature
channel rtc_Command1_CommandOPT : Command
channel rtc_Command2_CommandOPT : Command
channel rtc_Command3_CommandOPT : Command
channel rtc_Command4_CommandOPT : Command
channel s1_temp1_FTemperatureOPT : FahrenheitTemperature
channel s5_presenceSP1_PresenceOPT : Bool
channel ui2_ui1_CTemperatureOPT : CelsiusTemperature
channel a1_c1_CommandIPT : Command
channel a3_h1_CommandIPT : Command
channel s2_st12_FTemperatureOPT : FahrenheitTemperature
channel s3_temp13_FTemperatureOPT : FahrenheitTemperature
channel s4_temp14_FTemperatureOPT : FahrenheitTemperature
channel ui1_ui12_CTemperatureOPT : CelsiusTemperature
channel s6_presenceSP12_PresenceOPT : Bool
channel a2_c12_CommandIPT : Command
channel a4_h12_CommandIPT : Command


System = 
	System_config

System_config = (Components_System [| Sync_System |] Connectors_System)\Internal_System

Sync_System = {| current_FTemperatureOPT,
					detected_PresenceOPT,
					desired_CTemperatureOPT,
					controllerC_CommandIPT,
					controllerH_CommandIPT,
					current_FTemperatureOPT,
					current_FTemperatureOPT,
					current_FTemperatureOPT,
					desired_CTemperatureOPT,
					detected_PresenceOPT,
					controllerC_CommandIPT,
					controllerH_CommandIPT |}

Internal_System = {| localTemp1_CTemperatureIPT,
						localTemp2_CTemperatureIPT,
						localTemp3_CTemperatureIPT,
						localTemp4_CTemperatureIPT,
						presence1_PresenceIPT,
						presence2_PresenceIPT,
						userTemp1_CTemperatureIPT,
						userTemp2_CTemperatureIPT,
						Command1_CommandOPT,
						Command2_CommandOPT,
						Command3_CommandOPT,
						Command4_CommandOPT|}

Components_System = RoomTempratureControl[[localTemp1_CTemperatureIPT <- rtc_localTemp1_CTemperatureIPT, localTemp2_CTemperatureIPT <- rtc_localTemp2_CTemperatureIPT, localTemp3_CTemperatureIPT <- rtc_localTemp3_CTemperatureIPT, localTemp4_CTemperatureIPT <- rtc_localTemp4_CTemperatureIPT, presence1_PresenceIPT <- rtc_presence1_PresenceIPT, presence2_PresenceIPT <- rtc_presence2_PresenceIPT, userTemp1_CTemperatureIPT <- rtc_userTemp1_CTemperatureIPT, userTemp2_CTemperatureIPT <- rtc_userTemp2_CTemperatureIPT, Command1_CommandOPT <- rtc_Command1_CommandOPT, Command2_CommandOPT <- rtc_Command2_CommandOPT, Command3_CommandOPT <- rtc_Command3_CommandOPT, Command4_CommandOPT <- rtc_Command4_CommandOPT]]
						|||SensorTemp1[[current_FTemperatureOPT <- s1_temp1_FTemperatureOPT]]
						|||SensorPresence1[[detected_PresenceOPT <- s5_presenceSP1_PresenceOPT]]
						|||UI1[[desired_CTemperatureOPT <- ui2_ui1_CTemperatureOPT]]
						|||Cooler1[[controllerC_CommandIPT <- a1_c1_CommandIPT]]
						|||Heater1[[controllerH_CommandIPT <- a3_h1_CommandIPT]]
						|||SensorTemp1[[current_FTemperatureOPT <- s2_st12_FTemperatureOPT]]
						|||SensorTemp1[[current_FTemperatureOPT <- s3_temp13_FTemperatureOPT]]
						|||SensorTemp1[[current_FTemperatureOPT <- s4_temp14_FTemperatureOPT]]
						|||UI1[[desired_CTemperatureOPT <- ui1_ui12_CTemperatureOPT]]
						|||SensorPresence1[[detected_PresenceOPT <- s6_presenceSP12_PresenceOPT]]
						|||Cooler1[[controllerC_CommandIPT <- a2_c12_CommandIPT]]
						|||Heater1[[controllerH_CommandIPT <- a4_h12_CommandIPT]]

Connectors_System = FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localTemp1_CTemperatureIPT,Ft_FTemperatureOPT <- s1_temp1_FTemperatureOPT]]
						|||PresenceCN[[pIn_PresenceIPT <- rtc_presence1_PresenceIPT,pOut_PresenceOPT <- s5_presenceSP1_PresenceOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- rtc_userTemp1_CTemperatureIPT,CtOut_CTemperatureOPT <- ui2_ui1_CTemperatureOPT]]
						|||CommandCN[[commandIn_CommandIPT <- a1_c1_CommandIPT,commandOut_CommandOPT <- rtc_Command1_CommandOPT]]
						|||CommandCN[[commandIn_CommandIPT <- a3_h1_CommandIPT,commandOut_CommandOPT <- rtc_Command3_CommandOPT]]
						|||FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localTemp2_CTemperatureIPT,Ft_FTemperatureOPT <- s2_st12_FTemperatureOPT]]
						|||FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localTemp3_CTemperatureIPT,Ft_FTemperatureOPT <- s3_temp13_FTemperatureOPT]]
						|||FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localTemp4_CTemperatureIPT,Ft_FTemperatureOPT <- s4_temp14_FTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- rtc_userTemp2_CTemperatureIPT,CtOut_CTemperatureOPT <- ui1_ui12_CTemperatureOPT]]
						|||PresenceCN[[pIn_PresenceIPT <- rtc_presence2_PresenceIPT,pOut_PresenceOPT <- s6_presenceSP12_PresenceOPT]]
						|||CommandCN[[commandIn_CommandIPT <- rtc_Command2_CommandOPT,commandOut_CommandOPT <- a2_c12_CommandIPT]]
						|||CommandCN[[commandIn_CommandIPT <- rtc_Command4_CommandOPT,commandOut_CommandOPT <- a4_h12_CommandIPT]]
													

RoomTempratureControl_config = (Components_RoomTempratureControl [| Sync_RoomTempratureControl |]  Connectors_RoomTempratureControl)\Internal_RoomTempratureControl

Sync_RoomTempratureControl = union(Internal_RoomTempratureControl, Delegation_Internal_rtc)

Internal_RoomTempratureControl = {| detected_PresenceIPT,
						userTemp_CTemperatureIPT,
						target_CTemperatureOPT,
						detected_PresenceIPT,
						userTemp_CTemperatureIPT,
						target_CTemperatureOPT,
						s1_CTemperatureIPT,
						s2_CTemperatureIPT,
						average_CTemperatureOPT,
						s1_CTemperatureIPT,
						s2_CTemperatureIPT,
						average_CTemperatureOPT,
						target2_CTemperatureIPT,
						average2_CTemperatureIPT,
						heating_CommandOPT,
						cooling_CommandOPT,
						target2_CTemperatureIPT,
						average2_CTemperatureIPT,
						heating_CommandOPT,
						cooling_CommandOPT |}

Components_RoomTempratureControl = presenceChecker1[[detected_PresenceIPT <- pc1_pc1_PresenceIPT, userTemp_CTemperatureIPT <- pc1_uic1_CTemperatureIPT, target_CTemperatureOPT <- pc1_tar1_CTemperatureOPT]]
						|||presenceChecker1[[detected_PresenceIPT <- pc2_pc2_PresenceIPT, userTemp_CTemperatureIPT <- pc2_uic2_CTemperatureIPT, target_CTemperatureOPT <- pc2_tar2_CTemperatureOPT]]
						|||sensorMonitor1[[s1_CTemperatureIPT <- sm1_s1_CTemperatureIPT, s2_CTemperatureIPT <- sm1_s2_CTemperatureIPT, average_CTemperatureOPT <- sm1_av1_CTemperatureOPT]]
						|||sensorMonitor1[[s1_CTemperatureIPT <- sm2_s3_CTemperatureIPT, s2_CTemperatureIPT <- sm2_s4_CTemperatureIPT, average_CTemperatureOPT <- sm2_av2_CTemperatureOPT]]
						|||defineCommand1[[target2_CTemperatureIPT <- cm1_ctar1_CTemperatureIPT, average2_CTemperatureIPT <- cm1_cav1_CTemperatureIPT, heating_CommandOPT <- cm1_ch1_CommandOPT, cooling_CommandOPT <- cm1_cc1_CommandOPT]]
						|||defineCommand1[[target2_CTemperatureIPT <- cm2_ctar2_CTemperatureIPT, average2_CTemperatureIPT <- cm2_cav2_CTemperatureIPT, heating_CommandOPT <- cm2_ch2_CommandOPT, cooling_CommandOPT <- cm2_cc2_CommandOPT]]

Connectors_RoomTempratureControl = CTemperatureCN[[ctIn_CTemperatureIPT <- cm1_ctar1_CTemperatureIPT,CtOut_CTemperatureOPT <- pc1_tar1_CTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- cm1_cav1_CTemperatureIPT,CtOut_CTemperatureOPT <- sm1_av1_CTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- cm2_cav2_CTemperatureIPT,CtOut_CTemperatureOPT <- sm2_av2_CTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- cm2_ctar2_CTemperatureIPT,CtOut_CTemperatureOPT <- pc2_tar2_CTemperatureOPT]]
						|||Delegation_rtc

Delegation_Internal_rtc = {|presence1_PresenceIPT,
						userTemp1_CTemperatureIPT,
						presence2_PresenceIPT,
						userTemp2_CTemperatureIPT,
						localTemp1_CTemperatureIPT,
						localTemp2_CTemperatureIPT,
						localTemp3_CTemperatureIPT,
						localTemp4_CTemperatureIPT,
						Command2_CommandOPT,
						Command1_CommandOPT,
						Command3_CommandOPT,
						Command4_CommandOPT|}

Delegation_rtc = presence1_to_pc1
				|||userTemp1_to_uic1
				|||presence2_to_pc2
				|||userTemp2_to_uic2
				|||localTemp1_to_s1
				|||localTemp2_to_s2
				|||localTemp3_to_s3
				|||localTemp4_to_s4
				|||ch1_to_Command2
				|||cc1_to_Command1
				|||ch2_to_Command3
				|||cc2_to_Command4

SensorTemp1 = 
	|~| current:FahrenheitTemperature @ current_FTemperatureOPT!current ->
SensorTemp1
								
UI1 = 
	|~| desired:CelsiusTemperature @ desired_CTemperatureOPT!desired ->
UI1
								
SensorPresence1 = 
	|~| detected:Bool @ detected_PresenceOPT!detected ->
SensorPresence1
								
Heater1 = 
		controllerH_CommandIPT?controllerH ->
Heater1
								
Cooler1 = 
		controllerC_CommandIPT?controllerC ->
Cooler1
								
RoomTempratureControl =
	RoomTempratureControl_config	
presenceChecker1 =								
	CheckPresenceToSetTemperatureAC				
sensorMonitor1 =								
	CalculateAverageTemperatureAC				
defineCommand1 =								
	DecideCommandAC				

FahrenheitToCelsiusCN = 
		FahrenheitToCelsiusAC

PresenceCN = 
		pOut_PresenceOPT?out ->
		pIn_PresenceIPT!out ->
PresenceCN

CommandCN = 
		commandOut_CommandOPT?out ->
		commandIn_CommandIPT!out ->
CommandCN

CTemperatureCN = 
		CtOut_CTemperatureOPT?out ->
		ctIn_CTemperatureIPT!out ->
CTemperatureCN


presence1_to_pc1 =
	rtc_presence1_PresenceIPT?PresenceIPT ->
	pc1_pc1_PresenceIPT!PresenceIPT ->
presence1_to_pc1
userTemp1_to_uic1 =
	rtc_userTemp1_CTemperatureIPT?CTemperatureIPT ->
	pc1_uic1_CTemperatureIPT!CTemperatureIPT ->
userTemp1_to_uic1
presence2_to_pc2 =
	rtc_presence2_PresenceIPT?PresenceIPT ->
	pc2_pc2_PresenceIPT!PresenceIPT ->
presence2_to_pc2
userTemp2_to_uic2 =
	rtc_userTemp2_CTemperatureIPT?CTemperatureIPT ->
	pc2_uic2_CTemperatureIPT!CTemperatureIPT ->
userTemp2_to_uic2
localTemp1_to_s1 =
	rtc_localTemp1_CTemperatureIPT?CTemperatureIPT ->
	sm1_s1_CTemperatureIPT!CTemperatureIPT ->
localTemp1_to_s1
localTemp2_to_s2 =
	rtc_localTemp2_CTemperatureIPT?CTemperatureIPT ->
	sm1_s2_CTemperatureIPT!CTemperatureIPT ->
localTemp2_to_s2
localTemp3_to_s3 =
	rtc_localTemp3_CTemperatureIPT?CTemperatureIPT ->
	sm2_s3_CTemperatureIPT!CTemperatureIPT ->
localTemp3_to_s3
localTemp4_to_s4 =
	rtc_localTemp4_CTemperatureIPT?CTemperatureIPT ->
	sm2_s4_CTemperatureIPT!CTemperatureIPT ->
localTemp4_to_s4
ch1_to_Command2 =	
	cm1_ch1_CommandOPT?CommandOPT ->
	rtc_Command2_CommandOPT!CommandOPT ->
ch1_to_Command2						
cc1_to_Command1 =	
	cm1_cc1_CommandOPT?CommandOPT ->
	rtc_Command1_CommandOPT!CommandOPT ->
cc1_to_Command1						
ch2_to_Command3 =	
	cm2_ch2_CommandOPT?CommandOPT ->
	rtc_Command3_CommandOPT!CommandOPT ->
ch2_to_Command3						
cc2_to_Command4 =	
	cm2_cc2_CommandOPT?CommandOPT ->
	rtc_Command4_CommandOPT!CommandOPT ->
cc2_to_Command4						

channel s1_CelsiusTemperature : CelsiusTemperature
channel s2_CelsiusTemperature : CelsiusTemperature
channel average_CelsiusTemperature : CelsiusTemperature

Sync_CalculateAverageTemperatureAC = union(Internal_CalculateAverageTemperatureAC, Port_CalculateAverageTemperatureAC) 

Internal_CalculateAverageTemperatureAC = {|s1_CelsiusTemperature,
					s2_CelsiusTemperature,
					average_CelsiusTemperature |}

Port_CalculateAverageTemperatureAC = {| s1_CTemperatureIPT,
					s2_CTemperatureIPT,
					average_CTemperatureOPT |}

CalculateAverageTemperatureAC = (Pins_CalculateAverageTemperatureAC [| Sync_CalculateAverageTemperatureAC |]  Actions_CalculateAverageTemperatureAC)\Internal_CalculateAverageTemperatureAC

Pins_CalculateAverageTemperatureAC = [| Sync_CalculateAverageTemperatureAC|] i : {1 .. 3} @ Pins_CalculateAverageTemperatureAC_Func(i)

Actions_CalculateAverageTemperatureAC = [| Sync_CalculateAverageTemperatureAC |] i : {1 .. 1} @ Actions_CalculateAverageTemperatureAC_Func(i)

Pins_CalculateAverageTemperatureAC_Func(1) = s1_CalculateAverageTemperatureAC
Pins_CalculateAverageTemperatureAC_Func(2) = s2_CalculateAverageTemperatureAC
Pins_CalculateAverageTemperatureAC_Func(3) = average_CalculateAverageTemperatureAC


s1_CalculateAverageTemperatureAC =
	s1_CTemperatureIPT?s1 ->	
	s1_CelsiusTemperature!s1 ->
s1_CalculateAverageTemperatureAC				
s2_CalculateAverageTemperatureAC =
	s2_CTemperatureIPT?s2 ->	
	s2_CelsiusTemperature!s2 ->
s2_CalculateAverageTemperatureAC				

average_CalculateAverageTemperatureAC = 
	average_CelsiusTemperature?average ->
	average_CTemperatureOPT!average ->	
average_CalculateAverageTemperatureAC

Actions_CalculateAverageTemperatureAC_Func(1)= CalcAvTemp_CalculateAverageTemperatureAN


CalcAvTemp_CalculateAverageTemperatureAN = 
	s1_CelsiusTemperature?s1-> 
	s2_CelsiusTemperature?s2-> 
	|~|average: {x | x <- CelsiusTemperature,CalculateAverageTemperatureEQ(x, s1,s2) } @ 
		average_CelsiusTemperature!average ->
CalcAvTemp_CalculateAverageTemperatureAN
channel detected_Boolean : Bool
channel userTemp_CelsiusTemperature : CelsiusTemperature
channel target_CelsiusTemperature : CelsiusTemperature

Sync_CheckPresenceToSetTemperatureAC = union(Internal_CheckPresenceToSetTemperatureAC, Port_CheckPresenceToSetTemperatureAC) 

Internal_CheckPresenceToSetTemperatureAC = {|detected_Boolean,
					userTemp_CelsiusTemperature,
					target_CelsiusTemperature |}

Port_CheckPresenceToSetTemperatureAC = {| detected_PresenceIPT,
					userTemp_CTemperatureIPT,
					target_CTemperatureOPT |}

CheckPresenceToSetTemperatureAC = (Pins_CheckPresenceToSetTemperatureAC [| Sync_CheckPresenceToSetTemperatureAC |]  Actions_CheckPresenceToSetTemperatureAC)\Internal_CheckPresenceToSetTemperatureAC

Pins_CheckPresenceToSetTemperatureAC = [| Sync_CheckPresenceToSetTemperatureAC|] i : {1 .. 3} @ Pins_CheckPresenceToSetTemperatureAC_Func(i)

Actions_CheckPresenceToSetTemperatureAC = [| Sync_CheckPresenceToSetTemperatureAC |] i : {1 .. 1} @ Actions_CheckPresenceToSetTemperatureAC_Func(i)

Pins_CheckPresenceToSetTemperatureAC_Func(1) = detected_CheckPresenceToSetTemperatureAC
Pins_CheckPresenceToSetTemperatureAC_Func(2) = userTemp_CheckPresenceToSetTemperatureAC
Pins_CheckPresenceToSetTemperatureAC_Func(3) = target_CheckPresenceToSetTemperatureAC


detected_CheckPresenceToSetTemperatureAC =
	detected_PresenceIPT?detected ->	
	detected_Boolean!detected ->
detected_CheckPresenceToSetTemperatureAC				
userTemp_CheckPresenceToSetTemperatureAC =
	userTemp_CTemperatureIPT?userTemp ->	
	userTemp_CelsiusTemperature!userTemp ->
userTemp_CheckPresenceToSetTemperatureAC				

target_CheckPresenceToSetTemperatureAC = 
	target_CelsiusTemperature?target ->
	target_CTemperatureOPT!target ->	
target_CheckPresenceToSetTemperatureAC

Actions_CheckPresenceToSetTemperatureAC_Func(1)= CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN


CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN = 
	detected_Boolean?detected-> 
	userTemp_CelsiusTemperature?userTemp-> 
	|~|target: {x | x <- CelsiusTemperature,CheckPresenceToSetTemperatureEQ(x, detected,userTemp) } @ 
		target_CelsiusTemperature!target ->
CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN
channel average2_CelsiusTemperature : CelsiusTemperature
channel target2_CelsiusTemperature : CelsiusTemperature
channel heating_Command : Command
channel cooling_Command : Command
channel cmdsH_Commands : Commands		
channel cmdsC_Commands : Commands		

Sync_DecideCommandAC = union(Internal_DecideCommandAC, Port_DecideCommandAC) 

Internal_DecideCommandAC = {|average2_CelsiusTemperature,
					target2_CelsiusTemperature,
					heating_Command,
					cooling_Command,
					cmdsH_Commands,
					cmdsC_Commands |}

Port_DecideCommandAC = {| target2_CTemperatureIPT,
					average2_CTemperatureIPT,
					heating_CommandOPT,
					cooling_CommandOPT |}

DecideCommandAC = (Pins_DecideCommandAC [| Sync_DecideCommandAC |]  Actions_DecideCommandAC)\Internal_DecideCommandAC

Pins_DecideCommandAC = [| Sync_DecideCommandAC|] i : {1 .. 4} @ Pins_DecideCommandAC_Func(i)

Actions_DecideCommandAC = [| Sync_DecideCommandAC |] i : {1 .. 3} @ Actions_DecideCommandAC_Func(i)

Pins_DecideCommandAC_Func(1) = average2_DecideCommandAC
Pins_DecideCommandAC_Func(2) = target2_DecideCommandAC
Pins_DecideCommandAC_Func(3) = heating_DecideCommandAC
Pins_DecideCommandAC_Func(4) = cooling_DecideCommandAC


average2_DecideCommandAC =
	average2_CTemperatureIPT?average2 ->	
	average2_CelsiusTemperature!average2 ->
average2_DecideCommandAC				
target2_DecideCommandAC =
	target2_CTemperatureIPT?target2 ->	
	target2_CelsiusTemperature!target2 ->
target2_DecideCommandAC				

cooling_DecideCommandAC = 
	cooling_Command?cooling ->
	cooling_CommandOPT!cooling ->	
cooling_DecideCommandAC
heating_DecideCommandAC = 
	heating_Command?heating ->
	heating_CommandOPT!heating ->	
heating_DecideCommandAC

Actions_DecideCommandAC_Func(1)= ct_CompareTemperatureAN
Actions_DecideCommandAC_Func(2)= cmdH_CommandHeaterAN
Actions_DecideCommandAC_Func(3)= cmdC_CommandCoolerAN


ct_CompareTemperatureAN = 
	average2_CelsiusTemperature?average2-> 
	target2_CelsiusTemperature?target2-> 
	|~|out: {x | x <- Commands,CompareTemperatureEQ(x, average2,target2) } @ 
		cmdsH_Commands!out ->
		cmdsC_Commands!out ->
		
ct_CompareTemperatureAN
cmdH_CommandHeaterAN = 
	cmdsH_Commands?cmdsH-> 
	|~|heating: {x | x <- Command,CommandHeaterEQ(x, cmdsH) } @ 
		heating_Command!heating ->
cmdH_CommandHeaterAN
cmdC_CommandCoolerAN = 
	cmdsC_Commands?cmdsC-> 
	|~|cooling: {x | x <- Command,CommandCoolerEQ(x, cmdsC) } @ 
		cooling_Command!cooling ->
cmdC_CommandCoolerAN
channel loalTemp1_CelsiusTemperature : CelsiusTemperature
channel current1_FahrenheitTemperature : FahrenheitTemperature

Sync_FahrenheitToCelsiusAC = union(Internal_FahrenheitToCelsiusAC, Port_FahrenheitToCelsiusAC) 

Internal_FahrenheitToCelsiusAC = {|loalTemp1_CelsiusTemperature,
					current1_FahrenheitTemperature |}

Port_FahrenheitToCelsiusAC = {| Ft_FTemperatureOPT,Ct_CTemperatureIPT |}

FahrenheitToCelsiusAC = (Pins_FahrenheitToCelsiusAC [| Sync_FahrenheitToCelsiusAC |]  Actions_FahrenheitToCelsiusAC)\Internal_FahrenheitToCelsiusAC

Pins_FahrenheitToCelsiusAC = [| Sync_FahrenheitToCelsiusAC|] i : {1 .. 2} @ Pins_FahrenheitToCelsiusAC_Func(i)

Actions_FahrenheitToCelsiusAC = [| Sync_FahrenheitToCelsiusAC |] i : {1 .. 1} @ Actions_FahrenheitToCelsiusAC_Func(i)

Pins_FahrenheitToCelsiusAC_Func(1) = loalTemp1_FahrenheitToCelsiusAC
Pins_FahrenheitToCelsiusAC_Func(2) = current1_FahrenheitToCelsiusAC


current1_FahrenheitToCelsiusAC =
	Ft_FTemperatureOPT?current1 ->
	current1_FahrenheitTemperature!current1 ->
current1_FahrenheitToCelsiusAC				

loalTemp1_FahrenheitToCelsiusAC = 
	loalTemp1_CelsiusTemperature?loalTemp1 ->
	Ct_CTemperatureIPT!loalTemp1 ->
loalTemp1_FahrenheitToCelsiusAC

Actions_FahrenheitToCelsiusAC_Func(1)= FtC_FahrenheitToCelsiusAN


FtC_FahrenheitToCelsiusAN = 
	current1_FahrenheitTemperature?current1-> 
	|~|loalTemp1: {x | x <- CelsiusTemperature,FahrenheitToCelsiusEQ(x, current1) } @ 
		loalTemp1_CelsiusTemperature!loalTemp1 ->
FtC_FahrenheitToCelsiusAN

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
CalculateAverageTemperatureEQ(x,t1,t2) = x== (t1 + t2)/2

channel CalculateAverageTemperatureEQ_t1_CelsiusTemperature : CelsiusTemperature
channel CalculateAverageTemperatureEQ_t2_CelsiusTemperature : CelsiusTemperature
CalculateAverageTemperatureEQ_check = 
	CalculateAverageTemperatureEQ_t1_CelsiusTemperature?t1 ->
	CalculateAverageTemperatureEQ_t2_CelsiusTemperature?t2 ->
	true &
		let
		 S = {av | av <- CelsiusTemperature,
				CalculateAverageTemperatureEQ(av,t1,t2)}
		within IS_TRUE(not (S == {}))

assert CalculateAverageTemperatureEQ_check:[livelock free]

CalculateAverageTemperatureEQ_s = 
			{(t1,t2,av) | t1 <- CelsiusTemperature,t2 <- CelsiusTemperature,
			av <- CelsiusTemperature,
			CalculateAverageTemperatureEQ(av,t1,t2)}  
			
			
			
			
			
			
			
			
			
CompareTemperatureEQ(x,target,average) = if (average>target) then x == ( Off,On ) else x == ( On,Off )

channel CompareTemperatureEQ_target_CelsiusTemperature : CelsiusTemperature
channel CompareTemperatureEQ_average_CelsiusTemperature : CelsiusTemperature
CompareTemperatureEQ_check = 
	CompareTemperatureEQ_target_CelsiusTemperature?target ->
	CompareTemperatureEQ_average_CelsiusTemperature?average ->
	true &
		let
		 S = {cmds | cmds <- Commands,
				CompareTemperatureEQ(cmds,target,average)}
		within IS_TRUE(not (S == {}))

assert CompareTemperatureEQ_check:[livelock free]

CompareTemperatureEQ_s = 
			{(target,average,cmds) | target <- CelsiusTemperature,average <- CelsiusTemperature,
			cmds <- Commands,
			CompareTemperatureEQ(cmds,target,average)}  
			
FahrenheitToCelsiusEQ(x,f) = x== (5*(f - 32)/9)

channel FahrenheitToCelsiusEQ_f_FahrenheitTemperature : FahrenheitTemperature
FahrenheitToCelsiusEQ_check = 
	FahrenheitToCelsiusEQ_f_FahrenheitTemperature?f ->
	true &
		let
		 S = {c | c <- CelsiusTemperature,
				FahrenheitToCelsiusEQ(c,f)}
		within IS_TRUE(not (S == {}))

assert FahrenheitToCelsiusEQ_check:[livelock free]

FahrenheitToCelsiusEQ_s = 
			{(f,c) | f <- FahrenheitTemperature,
			c <- CelsiusTemperature,
			FahrenheitToCelsiusEQ(c,f)}  
			
CommandHeaterEQ(x,cmds) = x==Commands_heater(cmds)

channel CommandHeaterEQ_cmds_Commands : Commands
CommandHeaterEQ_check = 
	CommandHeaterEQ_cmds_Commands?cmds ->
	true &
		let
		 S = {c | c <- Command,
				CommandHeaterEQ(c,cmds)}
		within IS_TRUE(not (S == {}))

assert CommandHeaterEQ_check:[livelock free]

CommandHeaterEQ_s = 
			{(cmds,c) | cmds <- Commands,
			c <- Command,
			CommandHeaterEQ(c,cmds)}  
			
CommandCoolerEQ(x,cmds) = x==Commands_cooler(cmds)

channel CommandCoolerEQ_cmds_Commands : Commands
CommandCoolerEQ_check = 
	CommandCoolerEQ_cmds_Commands?cmds ->
	true &
		let
		 S = {c | c <- Command,
				CommandCoolerEQ(c,cmds)}
		within IS_TRUE(not (S == {}))

assert CommandCoolerEQ_check:[livelock free]

CommandCoolerEQ_s = 
			{(cmds,c) | cmds <- Commands,
			c <- Command,
			CommandCoolerEQ(c,cmds)}  
			
			
			
CheckPresenceToSetTemperatureEQ(x,detected,userTemp) = if (detected==true) then x == userTemp else x == 2

channel CheckPresenceToSetTemperatureEQ_detected_Boolean : Bool
channel CheckPresenceToSetTemperatureEQ_userTemp_CelsiusTemperature : CelsiusTemperature
CheckPresenceToSetTemperatureEQ_check = 
	CheckPresenceToSetTemperatureEQ_detected_Boolean?detected ->
	CheckPresenceToSetTemperatureEQ_userTemp_CelsiusTemperature?userTemp ->
	true &
		let
		 S = {target | target <- CelsiusTemperature,
				CheckPresenceToSetTemperatureEQ(target,detected,userTemp)}
		within IS_TRUE(not (S == {}))

assert CheckPresenceToSetTemperatureEQ_check:[livelock free]

CheckPresenceToSetTemperatureEQ_s = 
			{(detected,userTemp,target) | detected <- Bool,userTemp <- CelsiusTemperature,
			target <- CelsiusTemperature,
			CheckPresenceToSetTemperatureEQ(target,detected,userTemp)}  
			
			
CommandCoolerEx(cmds)= Commands_cooler(cmds)

CommandCoolerEx_s = 
			{(cmds,Command) | cmds <- Commands,
			Command <- Command,
			Command == CommandCoolerEx(cmds)}
			
CommandHeaterEx(cmds)= Commands_heater(cmds)

CommandHeaterEx_s = 
			{(cmds,Command) | cmds <- Commands,
			Command <- Command,
			Command == CommandHeaterEx(cmds)}
			
FahrenheitToCelsiusEx(f)= 5*(f-32)/9

FahrenheitToCelsiusEx_s = 
			{(f,CelsiusTemperature) | f <- FahrenheitTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == FahrenheitToCelsiusEx(f)}
			
CalculateAverageTemperatureEx(temp1,temp2)= (temp1+temp2)/2

CalculateAverageTemperatureEx_s = 
			{(temp1,temp2,CelsiusTemperature) | temp1 <- CelsiusTemperature,temp2 <- CelsiusTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == CalculateAverageTemperatureEx(temp1,temp2)}
			
CheckPresenceToSetTemperature(presence,userTemp)= if(presence==true) then userTemp else 2

CheckPresenceToSetTemperature_s = 
			{(presence,userTemp,CelsiusTemperature) | presence <- Bool,userTemp <- CelsiusTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == CheckPresenceToSetTemperature(presence,userTemp)}
			
CompareTemperatureEx(target,average)= if(average>target) then (Off,On)    else(On,Off)    

CompareTemperatureEx_s = 
			{(target,average,Commands) | target <- CelsiusTemperature,average <- CelsiusTemperature,
			Commands <- Commands,
			Commands == CompareTemperatureEx(target,average)}
			
			
			
			
			
			
			
			
			
			

assert IS_TRUE(subset(FahrenheitToCelsiusEx_s,FahrenheitToCelsiusEQ_s)):[divergence free]
assert IS_TRUE(subset(CompareTemperatureEx_s,CompareTemperatureEQ_s)):[divergence free]
assert IS_TRUE(subset(CommandHeaterEx_s,CommandHeaterEQ_s)):[divergence free]
assert IS_TRUE(subset(CommandCoolerEx_s,CommandCoolerEQ_s)):[divergence free]
assert IS_TRUE(subset(CheckPresenceToSetTemperature_s,CheckPresenceToSetTemperatureEQ_s)):[divergence free]
assert IS_TRUE(subset(CalculateAverageTemperatureEx_s,CalculateAverageTemperatureEQ_s)):[divergence free]

assert System:[deadlock free]
assert System:[livelock free]

