subset(s1, s2) = (inter(s1,s2)==s1)
IS_TRUE(h) = if (h) then SKIP else DIV

RUN(A) = [] x:A @ x -> RUN(A)
CHAOS(A) = STOP |~|  [] x:A @ x -> CHAOS(A)

MAX = 4

SysADLChar = {'a','b','c'}

FSeq(T,0) = {<>}
FSeq(T,1) = union( FSeq(T,0), {<z> | z <- T} )
FSeq(T,s) = {z^z'| z <- FSeq(T,1), z' <- FSeq(T,s-1)}

String = FSeq(SysADLChar,MAX)

datatype Command = On|Off 					
Commands = { (heater,cooler) | heater<- Command ,cooler<- Command  }
Commands_heater((heater,cooler)) = heater
Commands_cooler((heater,cooler)) = cooler
MIN_F_TEMP = 35
MAX_F_TEMP = 40
DEFAULT_C_TEMP = 1
DEFAULT_F_TEMP = 35
FahrenheitTemperature = {MIN_F_TEMP..MAX_F_TEMP}
CelsiusTemperature = {(5*(MIN_F_TEMP - 32)/9)..(5*(MAX_F_TEMP - 32)/9)}					


channel detectedRTC_PresenceIPT : Bool						
channel localtemp1_CTemperatureIPT : CelsiusTemperature						
channel localTemp2_CTemperatureIPT : CelsiusTemperature						
channel userTempRTC_CTemperatureIPT : CelsiusTemperature						
channel heatingRTC_CommandOPT : Command						
channel coolingRTC_CommandOPT : Command						
channel current_FTemperatureOPT : FahrenheitTemperature						
channel detected_PresenceOPT : Bool						
channel desired_CTemperatureOPT : CelsiusTemperature						
channel controllerH_CommandIPT : Command						
channel controllerC_CommandIPT : Command						
channel detected_PresenceIPT : Bool						
channel userTemp_CTemperatureIPT : CelsiusTemperature						
channel target_CTemperatureOPT : CelsiusTemperature						
channel target2_CTemperatureIPT : CelsiusTemperature						
channel average2_CTemperatureIPT : CelsiusTemperature						
channel heating_CommandOPT : Command						
channel cooling_CommandOPT : Command						
channel s1_CTemperatureIPT : CelsiusTemperature						
channel s2_CTemperatureIPT : CelsiusTemperature						
channel average_CTemperatureOPT : CelsiusTemperature						

channel Ft_FTemperatureOPT : FahrenheitTemperature						
channel Ct_CTemperatureIPT : CelsiusTemperature						
channel pOut_PresenceOPT : Bool						
channel pIn_PresenceIPT : Bool						
channel commandOut_CommandOPT : Command						
channel commandIn_CommandIPT : Command						
channel CtOut_CTemperatureOPT : CelsiusTemperature						
channel ctIn_CTemperatureIPT : CelsiusTemperature						

channel s1_current1_FTemperatureOPT : FahrenheitTemperature
channel s2_current2_FTemperatureOPT : FahrenheitTemperature
channel s3_detectedS_PresenceOPT : Bool
channel ui_desired_CTemperatureOPT : CelsiusTemperature
channel a2_controllerC_CommandIPT : Command
channel a1_controllerH_CommandIPT : Command
channel rtc_detected_PresenceIPT : Bool
channel rtc_localtemp1_CTemperatureIPT : CelsiusTemperature
channel rtc_localTemp2_CTemperatureIPT : CelsiusTemperature
channel rtc_userTemp_CTemperatureIPT : CelsiusTemperature
channel rtc_heating_CommandOPT : Command
channel rtc_cooling_CommandOPT : Command
channel sm_s1_CTemperatureIPT : CelsiusTemperature
channel sm_s2_CTemperatureIPT : CelsiusTemperature
channel sm_average_CTemperatureOPT : CelsiusTemperature
channel cm_target2_CTemperatureIPT : CelsiusTemperature
channel cm_average2_CTemperatureIPT : CelsiusTemperature
channel cm_heating_CommandOPT : Command
channel cm_cooling_CommandOPT : Command
channel pc_detected_PresenceIPT : Bool
channel pc_userTemp_CTemperatureIPT : CelsiusTemperature
channel pc_target_CTemperatureOPT : CelsiusTemperature


RTCSystemCFD = 
	RTCSystemCFD_config

RTCSystemCFD_config = (Components_RTCSystemCFD [| Sync_RTCSystemCFD |] Connectors_RTCSystemCFD)\Internal_RTCSystemCFD

Sync_RTCSystemCFD = {| s1_current1_FTemperatureOPT,
					s2_current2_FTemperatureOPT,
					s3_detectedS_PresenceOPT,
					ui_desired_CTemperatureOPT,
					a2_controllerC_CommandIPT,
					a1_controllerH_CommandIPT,
					rtc_heating_CommandOPT,
					rtc_cooling_CommandOPT |}

Internal_RTCSystemCFD = {| rtc_detected_PresenceIPT,
					rtc_localtemp1_CTemperatureIPT,
					rtc_localTemp2_CTemperatureIPT,
					rtc_userTemp_CTemperatureIPT|}

Components_RTCSystemCFD = TemperatureSensorCP[[current_FTemperatureOPT <- s1_current1_FTemperatureOPT]]
						|||TemperatureSensorCP[[current_FTemperatureOPT <- s2_current2_FTemperatureOPT]]
						|||PresenceSensorCP[[detected_PresenceOPT <- s3_detectedS_PresenceOPT]]
						|||UserInterfaceCP[[desired_CTemperatureOPT <- ui_desired_CTemperatureOPT]]
						|||CoolerCP[[controllerC_CommandIPT <- a2_controllerC_CommandIPT]]
						|||HeaterCP[[controllerH_CommandIPT <- a1_controllerH_CommandIPT]]
						|||RoomTemperatureControllerCP[[detectedRTC_PresenceIPT <- rtc_detected_PresenceIPT, localtemp1_CTemperatureIPT <- rtc_localtemp1_CTemperatureIPT, localTemp2_CTemperatureIPT <- rtc_localTemp2_CTemperatureIPT, userTempRTC_CTemperatureIPT <- rtc_userTemp_CTemperatureIPT, heatingRTC_CommandOPT <- rtc_heating_CommandOPT, coolingRTC_CommandOPT <- rtc_cooling_CommandOPT]]

Connectors_RTCSystemCFD = FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localtemp1_CTemperatureIPT,Ft_FTemperatureOPT <- s1_current1_FTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- rtc_userTemp_CTemperatureIPT,CtOut_CTemperatureOPT <- ui_desired_CTemperatureOPT]]
						|||CommandCN[[commandIn_CommandIPT <- a2_controllerC_CommandIPT,commandOut_CommandOPT <- rtc_cooling_CommandOPT]]
						|||PresenceCN[[pIn_PresenceIPT <- rtc_detected_PresenceIPT,pOut_PresenceOPT <- s3_detectedS_PresenceOPT]]
						|||FahrenheitToCelsiusCN[[Ct_CTemperatureIPT <- rtc_localTemp2_CTemperatureIPT,Ft_FTemperatureOPT <- s2_current2_FTemperatureOPT]]
						|||CommandCN[[commandIn_CommandIPT <- a1_controllerH_CommandIPT,commandOut_CommandOPT <- rtc_heating_CommandOPT]]
													

					
RoomTemperatureControllerCP_config = (Components_RoomTemperatureControllerCP [| Sync_RoomTemperatureControllerCP |]  Connectors_RoomTemperatureControllerCP)\Internal_RoomTemperatureControllerCP

Sync_RoomTemperatureControllerCP = union(Internal_RoomTemperatureControllerCP, Delegation_Internal_RoomTemperatureControllerCP)

Internal_RoomTemperatureControllerCP = {| sm_s1_CTemperatureIPT,
						sm_s2_CTemperatureIPT,
						sm_average_CTemperatureOPT,
						cm_target2_CTemperatureIPT,
						cm_average2_CTemperatureIPT,
						cm_heating_CommandOPT,
						cm_cooling_CommandOPT,
						pc_detected_PresenceIPT,
						pc_userTemp_CTemperatureIPT,
						pc_target_CTemperatureOPT |}

Components_RoomTemperatureControllerCP = SensorsMonitorCP[[s1_CTemperatureIPT <- sm_s1_CTemperatureIPT, s2_CTemperatureIPT <- sm_s2_CTemperatureIPT, average_CTemperatureOPT <- sm_average_CTemperatureOPT]]
						|||CommanderCP[[target2_CTemperatureIPT <- cm_target2_CTemperatureIPT, average2_CTemperatureIPT <- cm_average2_CTemperatureIPT, heating_CommandOPT <- cm_heating_CommandOPT, cooling_CommandOPT <- cm_cooling_CommandOPT]]
						|||PresenceCheckerCP[[detected_PresenceIPT <- pc_detected_PresenceIPT, userTemp_CTemperatureIPT <- pc_userTemp_CTemperatureIPT, target_CTemperatureOPT <- pc_target_CTemperatureOPT]]

Connectors_RoomTemperatureControllerCP = CTemperatureCN[[ctIn_CTemperatureIPT <- cm_target2_CTemperatureIPT,CtOut_CTemperatureOPT <- pc_target_CTemperatureOPT]]
						|||CTemperatureCN[[ctIn_CTemperatureIPT <- cm_average2_CTemperatureIPT,CtOut_CTemperatureOPT <- sm_average_CTemperatureOPT]]
						|||Delegation_RoomTemperatureControllerCP			
															

Delegation_Internal_RoomTemperatureControllerCP = {|rtc_detected_PresenceIPT,
											rtc_localtemp1_CTemperatureIPT,
											rtc_localTemp2_CTemperatureIPT,
											rtc_userTemp_CTemperatureIPT,
											rtc_heating_CommandOPT,
											rtc_cooling_CommandOPT |}

Delegation_RoomTemperatureControllerCP = userTempRTC_to_userTemp[[userTempRTC_CTemperatureIPT <- rtc_userTemp_CTemperatureIPT]]
				|||detectedRTC_to_detected[[detectedRTC_PresenceIPT <- rtc_detected_PresenceIPT]]
				|||localtemp1_to_s1[[localtemp1_CTemperatureIPT <- rtc_localtemp1_CTemperatureIPT]]
				|||localTemp2_to_s2[[localTemp2_CTemperatureIPT <- rtc_localTemp2_CTemperatureIPT]]
				|||heating_to_heatingRTC[[heatingRTC_CommandOPT <- rtc_heating_CommandOPT]]
				|||cooling_to_coolingRTC[[coolingRTC_CommandOPT <- rtc_cooling_CommandOPT]]												

RoomTemperatureControllerCP =
	RoomTemperatureControllerCP_config																	
TemperatureSensorCP = 
	|~| current:FahrenheitTemperature @ current_FTemperatureOPT!current ->
TemperatureSensorCP
								
PresenceSensorCP = 
	|~| detected:Bool @ detected_PresenceOPT!detected ->
PresenceSensorCP
								
UserInterfaceCP = 
	|~| desired:CelsiusTemperature @ desired_CTemperatureOPT!desired ->
UserInterfaceCP
								
HeaterCP = 
		controllerH_CommandIPT?controllerH ->
HeaterCP
								
CoolerCP = 
		controllerC_CommandIPT?controllerC ->
CoolerCP
								
PresenceCheckerCP =								
	CheckPresenceToSetTemperatureAC				
CommanderCP =								
	DecideCommandAC				
SensorsMonitorCP =								
	CalculateAverageTemperatureAC				

FahrenheitToCelsiusCN = 
		FahrenheitToCelsiusAC

PresenceCN = 
		pOut_PresenceOPT?out ->
		pIn_PresenceIPT!out ->
PresenceCN

CommandCN = 
		commandOut_CommandOPT?out ->
		commandIn_CommandIPT!out ->
CommandCN

CTemperatureCN = 
		CtOut_CTemperatureOPT?out ->
		ctIn_CTemperatureIPT!out ->
CTemperatureCN


userTempRTC_to_userTemp =
	userTempRTC_CTemperatureIPT?CTemperatureIPT ->
	pc_userTemp_CTemperatureIPT!CTemperatureIPT ->
userTempRTC_to_userTemp
detectedRTC_to_detected =
	detectedRTC_PresenceIPT?PresenceIPT ->
	pc_detected_PresenceIPT!PresenceIPT ->
detectedRTC_to_detected
localtemp1_to_s1 =
	localtemp1_CTemperatureIPT?CTemperatureIPT ->
	sm_s1_CTemperatureIPT!CTemperatureIPT ->
localtemp1_to_s1
localTemp2_to_s2 =
	localTemp2_CTemperatureIPT?CTemperatureIPT ->
	sm_s2_CTemperatureIPT!CTemperatureIPT ->
localTemp2_to_s2
heating_to_heatingRTC =	
	cm_heating_CommandOPT?CommandOPT ->
	heatingRTC_CommandOPT!CommandOPT ->
heating_to_heatingRTC						
cooling_to_coolingRTC =	
	cm_cooling_CommandOPT?CommandOPT ->
	coolingRTC_CommandOPT!CommandOPT ->
cooling_to_coolingRTC						

					
				
channel s1_CelsiusTemperature : CelsiusTemperature
channel s2_CelsiusTemperature : CelsiusTemperature
channel average_CelsiusTemperature : CelsiusTemperature

Sync_CalculateAverageTemperatureAC = union(Internal_CalculateAverageTemperatureAC, Port_CalculateAverageTemperatureAC) 

Internal_CalculateAverageTemperatureAC = {|s1_CelsiusTemperature,
					s2_CelsiusTemperature,
					average_CelsiusTemperature |}

Port_CalculateAverageTemperatureAC = {| sm_s1_CTemperatureIPT , sm_s2_CTemperatureIPT  |}

CalculateAverageTemperatureAC = (Pins_CalculateAverageTemperatureAC [| Sync_CalculateAverageTemperatureAC |]  Actions_CalculateAverageTemperatureAC)\Internal_CalculateAverageTemperatureAC

Pins_CalculateAverageTemperatureAC = [| Sync_CalculateAverageTemperatureAC|] i : {1 .. 3} @ Pins_CalculateAverageTemperatureAC_Func(i)

Actions_CalculateAverageTemperatureAC = [| Sync_CalculateAverageTemperatureAC |] i : {1 .. 1} @ Actions_CalculateAverageTemperatureAC_Func(i)

Pins_CalculateAverageTemperatureAC_Func(1) = s1_CalculateAverageTemperatureAC
Pins_CalculateAverageTemperatureAC_Func(2) = s2_CalculateAverageTemperatureAC
Pins_CalculateAverageTemperatureAC_Func(3) = average_CalculateAverageTemperatureAC


s1_CalculateAverageTemperatureAC =
	s1_CTemperatureIPT?s1 ->	
	s1_CelsiusTemperature!s1 ->
s1_CalculateAverageTemperatureAC				
s2_CalculateAverageTemperatureAC =
	s2_CTemperatureIPT?s2 ->	
	s2_CelsiusTemperature!s2 ->
s2_CalculateAverageTemperatureAC				

average_CalculateAverageTemperatureAC = 
	average_CelsiusTemperature?average ->
	average_CTemperatureOPT!average ->	
average_CalculateAverageTemperatureAC

Actions_CalculateAverageTemperatureAC_Func(1)= CalcAvTemp_CalculateAverageTemperatureAN


CalcAvTemp_CalculateAverageTemperatureAN = 
	s1_CelsiusTemperature?s1-> 
	s2_CelsiusTemperature?s2-> 
	|~|average: {x | x <- CelsiusTemperature,CalculateAverageTemperatureEQ(x, s1,s2) } @ 
		average_CelsiusTemperature!average ->
CalcAvTemp_CalculateAverageTemperatureAN
					
				
channel detected_Boolean : Bool
channel userTemp_CelsiusTemperature : CelsiusTemperature
channel target_CelsiusTemperature : CelsiusTemperature

Sync_CheckPresenceToSetTemperatureAC = union(Internal_CheckPresenceToSetTemperatureAC, Port_CheckPresenceToSetTemperatureAC) 

Internal_CheckPresenceToSetTemperatureAC = {|detected_Boolean,
					userTemp_CelsiusTemperature,
					target_CelsiusTemperature |}

Port_CheckPresenceToSetTemperatureAC = {| pc_detected_PresenceIPT , pc_userTemp_CTemperatureIPT  |}

CheckPresenceToSetTemperatureAC = (Pins_CheckPresenceToSetTemperatureAC [| Sync_CheckPresenceToSetTemperatureAC |]  Actions_CheckPresenceToSetTemperatureAC)\Internal_CheckPresenceToSetTemperatureAC

Pins_CheckPresenceToSetTemperatureAC = [| Sync_CheckPresenceToSetTemperatureAC|] i : {1 .. 3} @ Pins_CheckPresenceToSetTemperatureAC_Func(i)

Actions_CheckPresenceToSetTemperatureAC = [| Sync_CheckPresenceToSetTemperatureAC |] i : {1 .. 1} @ Actions_CheckPresenceToSetTemperatureAC_Func(i)

Pins_CheckPresenceToSetTemperatureAC_Func(1) = detected_CheckPresenceToSetTemperatureAC
Pins_CheckPresenceToSetTemperatureAC_Func(2) = userTemp_CheckPresenceToSetTemperatureAC
Pins_CheckPresenceToSetTemperatureAC_Func(3) = target_CheckPresenceToSetTemperatureAC


detected_CheckPresenceToSetTemperatureAC =
	detected_PresenceIPT?detected ->	
	detected_Boolean!detected ->
detected_CheckPresenceToSetTemperatureAC				
userTemp_CheckPresenceToSetTemperatureAC =
	userTemp_CTemperatureIPT?userTemp ->	
	userTemp_CelsiusTemperature!userTemp ->
userTemp_CheckPresenceToSetTemperatureAC				

target_CheckPresenceToSetTemperatureAC = 
	target_CelsiusTemperature?target ->
	target_CTemperatureOPT!target ->	
target_CheckPresenceToSetTemperatureAC

Actions_CheckPresenceToSetTemperatureAC_Func(1)= CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN


CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN = 
	detected_Boolean?detected-> 
	userTemp_CelsiusTemperature?userTemp-> 
	|~|target: {x | x <- CelsiusTemperature,CheckPresenceToSetTemperatureEQ(x, detected,userTemp) } @ 
		target_CelsiusTemperature!target ->
CheckPeresenceToSetTemperatureAN_CheckPeresenceToSetTemperatureAN
					
				
channel average2_CelsiusTemperature : CelsiusTemperature
channel target2_CelsiusTemperature : CelsiusTemperature
channel heating_Command : Command
channel cooling_Command : Command
channel cmdsH_Commands : Commands		
channel cmdsC_Commands : Commands		

Sync_DecideCommandAC = union(Internal_DecideCommandAC, Port_DecideCommandAC) 

Internal_DecideCommandAC = {|average2_CelsiusTemperature,
					target2_CelsiusTemperature,
					heating_Command,
					cooling_Command,
					cmdsH_Commands,
					cmdsC_Commands |}

Port_DecideCommandAC = {| cm_target2_CTemperatureIPT , cm_average2_CTemperatureIPT , cm_heating_CommandOPT  |}

DecideCommandAC = (Pins_DecideCommandAC [| Sync_DecideCommandAC |]  Actions_DecideCommandAC)\Internal_DecideCommandAC

Pins_DecideCommandAC = [| Sync_DecideCommandAC|] i : {1 .. 4} @ Pins_DecideCommandAC_Func(i)

Actions_DecideCommandAC = [| Sync_DecideCommandAC |] i : {1 .. 3} @ Actions_DecideCommandAC_Func(i)

Pins_DecideCommandAC_Func(1) = average2_DecideCommandAC
Pins_DecideCommandAC_Func(2) = target2_DecideCommandAC
Pins_DecideCommandAC_Func(3) = heating_DecideCommandAC
Pins_DecideCommandAC_Func(4) = cooling_DecideCommandAC


average2_DecideCommandAC =
	average2_CTemperatureIPT?average2 ->	
	average2_CelsiusTemperature!average2 ->
average2_DecideCommandAC				
target2_DecideCommandAC =
	target2_CTemperatureIPT?target2 ->	
	target2_CelsiusTemperature!target2 ->
target2_DecideCommandAC				

cooling_DecideCommandAC = 
	cooling_Command?cooling ->
	cooling_CommandOPT!cooling ->	
cooling_DecideCommandAC
heating_DecideCommandAC = 
	heating_Command?heating ->
	heating_CommandOPT!heating ->	
heating_DecideCommandAC

Actions_DecideCommandAC_Func(1)= ct_CompareTemperatureAN
Actions_DecideCommandAC_Func(2)= cmdH_CommandHeaterAN
Actions_DecideCommandAC_Func(3)= cmdC_CommandCoolerAN


ct_CompareTemperatureAN = 
	average2_CelsiusTemperature?average2-> 
	target2_CelsiusTemperature?target2-> 
	|~|out: {x | x <- Commands,CompareTemperatureEQ(x, average2,target2) } @ 
		cmdsH_Commands!out ->
		cmdsC_Commands!out ->
		
ct_CompareTemperatureAN
cmdH_CommandHeaterAN = 
	cmdsH_Commands?cmdsH-> 
	|~|heating: {x | x <- Command,CommandHeaterEQ(x, cmdsH) } @ 
		heating_Command!heating ->
cmdH_CommandHeaterAN
cmdC_CommandCoolerAN = 
	cmdsC_Commands?cmdsC-> 
	|~|cooling: {x | x <- Command,CommandCoolerEQ(x, cmdsC) } @ 
		cooling_Command!cooling ->
cmdC_CommandCoolerAN
					
				
channel loalTemp1_CelsiusTemperature : CelsiusTemperature
channel current1_FahrenheitTemperature : FahrenheitTemperature

Sync_FahrenheitToCelsiusAC = union(Internal_FahrenheitToCelsiusAC, Port_FahrenheitToCelsiusAC) 

Internal_FahrenheitToCelsiusAC = {|loalTemp1_CelsiusTemperature,
					current1_FahrenheitTemperature |}

Port_FahrenheitToCelsiusAC = {| s1_current1_FTemperatureOPT,rtc_localtemp1_CTemperatureIPT,s2_current2_FTemperatureOPT,rtc_localTemp2_CTemperatureIPT |}

FahrenheitToCelsiusAC = (Pins_FahrenheitToCelsiusAC [| Sync_FahrenheitToCelsiusAC |]  Actions_FahrenheitToCelsiusAC)\Internal_FahrenheitToCelsiusAC

Pins_FahrenheitToCelsiusAC = [| Sync_FahrenheitToCelsiusAC|] i : {1 .. 2} @ Pins_FahrenheitToCelsiusAC_Func(i)

Actions_FahrenheitToCelsiusAC = [| Sync_FahrenheitToCelsiusAC |] i : {1 .. 1} @ Actions_FahrenheitToCelsiusAC_Func(i)

Pins_FahrenheitToCelsiusAC_Func(1) = loalTemp1_FahrenheitToCelsiusAC
Pins_FahrenheitToCelsiusAC_Func(2) = current1_FahrenheitToCelsiusAC


current1_FahrenheitToCelsiusAC =
	Ft_FTemperatureOPT?current1 ->
	current1_FahrenheitTemperature!current1 ->
current1_FahrenheitToCelsiusAC				

loalTemp1_FahrenheitToCelsiusAC = 
	loalTemp1_CelsiusTemperature?loalTemp1 ->
	Ct_CTemperatureIPT!loalTemp1 ->
loalTemp1_FahrenheitToCelsiusAC

Actions_FahrenheitToCelsiusAC_Func(1)= FtC_FahrenheitToCelsiusAN


FtC_FahrenheitToCelsiusAN = 
	current1_FahrenheitTemperature?current1-> 
	|~|loalTemp1: {x | x <- CelsiusTemperature,FahrenheitToCelsiusEQ(x, current1) } @ 
		loalTemp1_CelsiusTemperature!loalTemp1 ->
FtC_FahrenheitToCelsiusAN

CalculateAverageTemperatureEQ(x,t1,t2) = x == (t1 + t2)/2 

channel CalculateAverageTemperatureEQ_t1_CelsiusTemperature : CelsiusTemperature
channel CalculateAverageTemperatureEQ_t2_CelsiusTemperature : CelsiusTemperature
CalculateAverageTemperatureEQ_check = 
	CalculateAverageTemperatureEQ_t1_CelsiusTemperature?t1 ->
	CalculateAverageTemperatureEQ_t2_CelsiusTemperature?t2 ->
	true &
		let
		 S = {av | av <- CelsiusTemperature,
				CalculateAverageTemperatureEQ(av,t1,t2)}
		within IS_TRUE(not (S == {}))

assert CalculateAverageTemperatureEQ_check:[livelock free]

CalculateAverageTemperatureEQ_s = 
			{(t1,t2,av) | t1 <- CelsiusTemperature,t2 <- CelsiusTemperature,
			av <- CelsiusTemperature,
			CalculateAverageTemperatureEQ(av,t1,t2)}  
CompareTemperatureEQ(x,target,average) = if average > target  then x ==  (Off , On ) else x ==  (On , Off )

channel CompareTemperatureEQ_target_CelsiusTemperature : CelsiusTemperature
channel CompareTemperatureEQ_average_CelsiusTemperature : CelsiusTemperature
CompareTemperatureEQ_check = 
	CompareTemperatureEQ_target_CelsiusTemperature?target ->
	CompareTemperatureEQ_average_CelsiusTemperature?average ->
	true &
		let
		 S = {cmds | cmds <- Commands,
				CompareTemperatureEQ(cmds,target,average)}
		within IS_TRUE(not (S == {}))

assert CompareTemperatureEQ_check:[livelock free]

CompareTemperatureEQ_s = 
			{(target,average,cmds) | target <- CelsiusTemperature,average <- CelsiusTemperature,
			cmds <- Commands,
			CompareTemperatureEQ(cmds,target,average)}  
FahrenheitToCelsiusEQ(x,f) = x == (5*(f - 32)/9) 

channel FahrenheitToCelsiusEQ_f_FahrenheitTemperature : FahrenheitTemperature
FahrenheitToCelsiusEQ_check = 
	FahrenheitToCelsiusEQ_f_FahrenheitTemperature?f ->
	true &
		let
		 S = {c | c <- CelsiusTemperature,
				FahrenheitToCelsiusEQ(c,f)}
		within IS_TRUE(not (S == {}))

assert FahrenheitToCelsiusEQ_check:[livelock free]

FahrenheitToCelsiusEQ_s = 
			{(f,c) | f <- FahrenheitTemperature,
			c <- CelsiusTemperature,
			FahrenheitToCelsiusEQ(c,f)}  
CommandHeaterEQ(x,cmds) = x == Commands_heater(cmds) 

channel CommandHeaterEQ_cmds_Commands : Commands
CommandHeaterEQ_check = 
	CommandHeaterEQ_cmds_Commands?cmds ->
	true &
		let
		 S = {c | c <- Command,
				CommandHeaterEQ(c,cmds)}
		within IS_TRUE(not (S == {}))

assert CommandHeaterEQ_check:[livelock free]

CommandHeaterEQ_s = 
			{(cmds,c) | cmds <- Commands,
			c <- Command,
			CommandHeaterEQ(c,cmds)}  
CommandCoolerEQ(x,cmds) = x == Commands_cooler(cmds) 

channel CommandCoolerEQ_cmds_Commands : Commands
CommandCoolerEQ_check = 
	CommandCoolerEQ_cmds_Commands?cmds ->
	true &
		let
		 S = {c | c <- Command,
				CommandCoolerEQ(c,cmds)}
		within IS_TRUE(not (S == {}))

assert CommandCoolerEQ_check:[livelock free]

CommandCoolerEQ_s = 
			{(cmds,c) | cmds <- Commands,
			c <- Command,
			CommandCoolerEQ(c,cmds)}  
CheckPresenceToSetTemperatureEQ(x,detected,userTemp) = if detected == true  then x == userTemp  else x == 1 

channel CheckPresenceToSetTemperatureEQ_detected_Boolean : Bool
channel CheckPresenceToSetTemperatureEQ_userTemp_CelsiusTemperature : CelsiusTemperature
CheckPresenceToSetTemperatureEQ_check = 
	CheckPresenceToSetTemperatureEQ_detected_Boolean?detected ->
	CheckPresenceToSetTemperatureEQ_userTemp_CelsiusTemperature?userTemp ->
	true &
		let
		 S = {target | target <- CelsiusTemperature,
				CheckPresenceToSetTemperatureEQ(target,detected,userTemp)}
		within IS_TRUE(not (S == {}))

assert CheckPresenceToSetTemperatureEQ_check:[livelock free]

CheckPresenceToSetTemperatureEQ_s = 
			{(detected,userTemp,target) | detected <- Bool,userTemp <- CelsiusTemperature,
			target <- CelsiusTemperature,
			CheckPresenceToSetTemperatureEQ(target,detected,userTemp)}  
CommandCoolerEx(cmds)= Commands_cooler(cmds)

CommandCoolerEx_s = 
			{(cmds,Command) | cmds <- Commands,
			Command <- Command,
			Command == CommandCoolerEx(cmds)}

CommandHeaterEx(cmds)= Commands_heater(cmds)

CommandHeaterEx_s = 
			{(cmds,Command) | cmds <- Commands,
			Command <- Command,
			Command == CommandHeaterEx(cmds)}

FahrenheitToCelsiusEx(f)= 5*(f-32)/9

FahrenheitToCelsiusEx_s = 
			{(f,CelsiusTemperature) | f <- FahrenheitTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == FahrenheitToCelsiusEx(f)}

CalculateAverageTemperatureEx(temp1,temp2)= (temp1+temp2)/2

CalculateAverageTemperatureEx_s = 
			{(temp1,temp2,CelsiusTemperature) | temp1 <- CelsiusTemperature,temp2 <- CelsiusTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == CalculateAverageTemperatureEx(temp1,temp2)}

CheckPresenceToSetTemperature(presence,userTemp)= if(presence==true) then userTemp else 1

CheckPresenceToSetTemperature_s = 
			{(presence,userTemp,CelsiusTemperature) | presence <- Bool,userTemp <- CelsiusTemperature,
			CelsiusTemperature <- CelsiusTemperature,
			CelsiusTemperature == CheckPresenceToSetTemperature(presence,userTemp)}

CompareTemperatureEx(target,average)= if(average>target) then (Off,On)    else(On,Off)    

CompareTemperatureEx_s = 
			{(target,average,Commands) | target <- CelsiusTemperature,average <- CelsiusTemperature,
			Commands <- Commands,
			Commands == CompareTemperatureEx(target,average)}

channel ERROR
RTCSystemCFD_ALF = {|s1_current1_FTemperatureOPT,
					s2_current2_FTemperatureOPT,
					s3_detectedS_PresenceOPT,
					ui_desired_CTemperatureOPT,
					a2_controllerC_CommandIPT,
					a1_controllerH_CommandIPT,
					rtc_detected_PresenceIPT,
					rtc_localtemp1_CTemperatureIPT,
					rtc_localTemp2_CTemperatureIPT,
					rtc_userTemp_CTemperatureIPT,
					rtc_heating_CommandOPT,
					rtc_cooling_CommandOPT|}

SPEC01EQ( cooler, heater)= cooler == On  and  heater == On 
SPEC01SFT = a2_controllerC_CommandIPT?controllerc ->
			a1_controllerH_CommandIPT?controllerh -> 
			if not SPEC01EQ(controllerc,controllerh) then
				ERROR -> SPEC01SFT
			else
				SPEC01SFT

SPEC01SFT_FULL = SPEC01SFT [{| a2_controllerC_CommandIPT,
			a1_controllerH_CommandIPT |} || RTCSystemCFD_ALF ] RTCSystemCFD

assert RTCSystemCFD [T= SPEC01SFT_FULL

SPEC02EQ( detectedS, current1, current2, controllerH, controllerC)= (not (detectedS==false and (current1+current2)/2>1) or (controllerC==On and controllerH==Off)) and (not (detectedS==false and (current1+current2)/2<1) or (controllerC==Off and controllerH==On)) and (not (detectedS==false and (current1+current2)/2==1) or (controllerC==Off and controllerH==Off))
SPEC02LVN =	SPEC02LVN_IN( false, false, 0, false, 0, false)

SPEC02LVN_IN( detectedS, detectedS_bool, current1, current1_bool, current2, current2_bool) = 
not(detectedS_bool) & s3_detectedS_PresenceOPT?boolean -> SPEC02LVN_IN(  boolean, true ,  current1, current1_bool ,  current2, current2_bool ) 
[]
not(current1_bool) & s1_current1_FTemperatureOPT?real -> SPEC02LVN_IN(  detectedS, detectedS_bool ,  real, true ,  current2, current2_bool ) 
[]
not(current2_bool) & s2_current2_FTemperatureOPT?real -> SPEC02LVN_IN(  detectedS, detectedS_bool ,  current1, current1_bool ,  real, true ) 
[]
detectedS_bool & current1_bool & current2_bool & SPEC02LVN_OUT( detectedS, current1, current2, Off,false, Off,false) 
			
SPEC02LVN_OUT( detectedS, current1, current2, controllerH,controllerH_bool, controllerC,controllerC_bool) =
not(controllerH_bool) & a1_controllerH_CommandIPT?command -> SPEC02LVN_OUT( detectedS, current1, current2,  command, true ,  controllerC, controllerC_bool ) 
[]
not(controllerC_bool) & a2_controllerC_CommandIPT?command -> SPEC02LVN_OUT( detectedS, current1, current2,  controllerH, controllerH_bool ,  command, true ) 
[]
controllerH_bool & controllerC_bool & SPEC02LVN_v(detectedS,current1,current2,controllerH,controllerC)

SPEC02LVN_v(detectedS,current1,current2,controllerH,controllerC) =
		if not  SPEC02EQ(detectedS,current1,current2,controllerH,controllerC) then
			STOP
		else
			SPEC02LVN
 
SPEC02LVN_FULL = SPEC02LVN [{| s3_detectedS_PresenceOPT,
			s1_current1_FTemperatureOPT,
			s2_current2_FTemperatureOPT,
			a1_controllerH_CommandIPT,
			a2_controllerC_CommandIPT |} || RTCSystemCFD_ALF ] RTCSystemCFD

assert SPEC02LVN_FULL:[deadlock free[FD]] 

assert IS_TRUE(subset(FahrenheitToCelsiusEx_s,FahrenheitToCelsiusEQ_s)):[divergence free]
assert IS_TRUE(subset(CompareTemperatureEx_s,CompareTemperatureEQ_s)):[divergence free]
assert IS_TRUE(subset(CommandHeaterEx_s,CommandHeaterEQ_s)):[divergence free]
assert IS_TRUE(subset(CommandCoolerEx_s,CommandCoolerEQ_s)):[divergence free]
assert IS_TRUE(subset(CheckPresenceToSetTemperature_s,CheckPresenceToSetTemperatureEQ_s)):[divergence free]
assert IS_TRUE(subset(CalculateAverageTemperatureEx_s,CalculateAverageTemperatureEQ_s)):[divergence free]

assert RTCSystemCFD:[deadlock free]
assert RTCSystemCFD:[livelock free]

