[comment encoding = Cp1252 /]
[module auxQuery('http://org.sysadl')/]

[query public getDelegations(model : Model) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getDelegations(org.sysadl.Model)', Sequence{model}) /]

[query public getContraints(constraint : ConstraintDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getContraints(org.sysadl.ConstraintDef)', Sequence{constraint}) /]

[query public getExecution(executable : Executable) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getExecution(org.sysadl.Executable)', Sequence{executable}) /]

[query public getActivityToStructure(structural : StructuralDef, allocTable : AllocationTable) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActivityToStructure(org.sysadl.StructuralDef, org.sysadl.AllocationTable)', Sequence{structural , allocTable}) /]

[query public isEmpty_Delegations(del : Configuration) : Boolean = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'isEmpty_Delegations(org.sysadl.Configuration)', Sequence{del}) /]

[query public existAlloc(structural : StructuralDef, allocTable : AllocationTable) : Boolean = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'existAlloc(org.sysadl.StructuralDef, org.sysadl.AllocationTable)', Sequence{structural , allocTable}) /]

[query public getActivityFromAllocTable(structural : StructuralDef, allocTable : AllocationTable) : ActivityDef = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActivityFromAllocTable(org.sysadl.StructuralDef, org.sysadl.AllocationTable)', Sequence{structural , allocTable}) /]

[query public getActionBody(activity : ActivityDef , action : ActionUse) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActionBody(org.sysadl.ActivityDef, org.sysadl.ActionUse)', Sequence{activity, action}) /]

[query public getActionListSize(activity : ActivityDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActionListSize(org.sysadl.ActivityDef)', Sequence{activity}) /]

[query public getActionFunction(activity : ActivityDef, compUse :  String) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActionFunction(org.sysadl.ActivityDef, java.lang.String)', Sequence{activity, compUse}) /]

[query public getPinListSize(activity : ActivityDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPinListSize(org.sysadl.ActivityDef)', Sequence{activity}) /]

[query public getPinFunction(activity : ActivityDef, compUse :  String) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPinFunction(org.sysadl.ActivityDef, java.lang.String)', Sequence{activity, compUse}) /]

[query public getPortAndPin(compUse :  ComponentUse, pin : Pin) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPortAndPin(org.sysadl.ComponentUse, org.sysadl.Pin)', Sequence{compUse, pin}) /]

[query public getPortAndPinConn(connector :  ConnectorUse, pin : Pin) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPortAndPinConn(org.sysadl.ConnectorUse, org.sysadl.Pin)', Sequence{connector, pin}) /]

[query public getPortAndPinConnIn(connector :  ConnectorUse, pin : Pin) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPortAndPinConnIn(org.sysadl.ConnectorUse, org.sysadl.Pin)', Sequence{connector, pin}) /]

[query public getPortAndPinConnOut(connector :  ConnectorUse, pin : Pin) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPortAndPinConnOut(org.sysadl.ConnectorUse, org.sysadl.Pin)', Sequence{connector, pin}) /]

[query public getActivityChannels(activity : ActivityDef, compUse : ComponentUse) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getActivityChannels(org.sysadl.ActivityDef, org.sysadl.ComponentUse)', Sequence{activity, compUse}) /]

[query public getTypePort(port :  PortUse) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getTypePort(org.sysadl.PortUse)', Sequence{port}) /]

[query public getTypePin(pin : Pin) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getTypePin(org.sysadl.Pin)', Sequence{pin}) /]

[query public getTypeCSP(typeDef : TypeDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getTypeCSP(org.sysadl.TypeDef)', Sequence{typeDef}) /]

[query public getInternalChannelsCompDef(compDef : ComponentDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getInternalChannelsCompDef(org.sysadl.ComponentDef)', Sequence{compDef}) /]

[query public getTypeUnity(typeDef : TypeDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getTypeUnity(org.sysadl.TypeDef)', Sequence{typeDef}) /]

[query public getRenamePortsComponent(compUse : ComponentUse) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getRenamePortsComponent(org.sysadl.ComponentUse)', Sequence{compUse}) /]

[query public getRenamePortsConnector(connUse : ConnectorUse, compDef : ComponentDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getRenamePortsConnector(org.sysadl.ConnectorUse, org.sysadl.ComponentDef)', Sequence{connUse, compDef}) /]

[query public getDefPortComp(pck : Set(Package)) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getDefPortComp(Set(org.sysadl.Package)', Sequence{pck}) /]

[query public ExistEqualsNames(model : Model) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'ExistEqualsNames(org.sysadl.Model)', Sequence{model}) /]

[query public CheckPortsAndPinsNames(model : Model) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'CheckPortsAndPinsNames(org.sysadl.Model)', Sequence{model}) /]
[query public getCompUse(model : Model, compDef : ComponentDef) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getCompUse(org.sysadl.Model, org.sysadl.ComponentDef)', Sequence{model,compDef}) /]

[query public getPortsCompUse(compUse : ComponentUse) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'getPortsCompUse(org.sysadl.ComponentUse)', Sequence{compUse}) /]

[query public ExistStringType(pck : Package) : String = 
		invoke('org.csp.translater.query.AuxiliarsQuery', 'ExistStringType(org.sysadl.Package)', Sequence{pck}) /]