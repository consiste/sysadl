# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fdr', [dirname(__file__)])
        except ImportError:
            import _fdr
            return _fdr
        if fp is not None:
            try:
                _mod = imp.load_module('_fdr', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fdr = swig_import_helper()
    del swig_import_helper
else:
    import _fdr
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _fdr.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _fdr.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fdr.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fdr.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fdr.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fdr.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fdr.SwigPyIterator_copy(self)

    def next(self):
        return _fdr.SwigPyIterator_next(self)

    def __next__(self):
        return _fdr.SwigPyIterator___next__(self)

    def previous(self):
        return _fdr.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fdr.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fdr.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fdr.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fdr.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fdr.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fdr.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fdr.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _fdr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.StringList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.StringList___nonzero__(self)

    def __bool__(self):
        return _fdr.StringList___bool__(self)

    def __len__(self):
        return _fdr.StringList___len__(self)

    def pop(self):
        return _fdr.StringList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.StringList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.StringList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.StringList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.StringList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.StringList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.StringList___setitem__(self, *args)

    def append(self, x):
        return _fdr.StringList_append(self, x)

    def empty(self):
        return _fdr.StringList_empty(self)

    def size(self):
        return _fdr.StringList_size(self)

    def clear(self):
        return _fdr.StringList_clear(self)

    def swap(self, v):
        return _fdr.StringList_swap(self, v)

    def get_allocator(self):
        return _fdr.StringList_get_allocator(self)

    def begin(self):
        return _fdr.StringList_begin(self)

    def end(self):
        return _fdr.StringList_end(self)

    def rbegin(self):
        return _fdr.StringList_rbegin(self)

    def rend(self):
        return _fdr.StringList_rend(self)

    def pop_back(self):
        return _fdr.StringList_pop_back(self)

    def erase(self, *args):
        return _fdr.StringList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_StringList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.StringList_push_back(self, x)

    def front(self):
        return _fdr.StringList_front(self)

    def back(self):
        return _fdr.StringList_back(self)

    def assign(self, n, x):
        return _fdr.StringList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.StringList_resize(self, *args)

    def insert(self, *args):
        return _fdr.StringList_insert(self, *args)

    def reserve(self, n):
        return _fdr.StringList_reserve(self, n)

    def capacity(self):
        return _fdr.StringList_capacity(self)
    __swig_destroy__ = _fdr.delete_StringList
    __del__ = lambda self: None
StringList_swigregister = _fdr.StringList_swigregister
StringList_swigregister(StringList)

class StringStringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.StringStringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.StringStringMap___nonzero__(self)

    def __bool__(self):
        return _fdr.StringStringMap___bool__(self)

    def __len__(self):
        return _fdr.StringStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _fdr.StringStringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _fdr.StringStringMap___delitem__(self, key)

    def has_key(self, key):
        return _fdr.StringStringMap_has_key(self, key)

    def keys(self):
        return _fdr.StringStringMap_keys(self)

    def values(self):
        return _fdr.StringStringMap_values(self)

    def items(self):
        return _fdr.StringStringMap_items(self)

    def __contains__(self, key):
        return _fdr.StringStringMap___contains__(self, key)

    def key_iterator(self):
        return _fdr.StringStringMap_key_iterator(self)

    def value_iterator(self):
        return _fdr.StringStringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _fdr.StringStringMap___setitem__(self, *args)

    def asdict(self):
        return _fdr.StringStringMap_asdict(self)

    def __init__(self, *args):
        this = _fdr.new_StringStringMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        return _fdr.StringStringMap_empty(self)

    def size(self):
        return _fdr.StringStringMap_size(self)

    def clear(self):
        return _fdr.StringStringMap_clear(self)

    def swap(self, v):
        return _fdr.StringStringMap_swap(self, v)

    def get_allocator(self):
        return _fdr.StringStringMap_get_allocator(self)

    def begin(self):
        return _fdr.StringStringMap_begin(self)

    def end(self):
        return _fdr.StringStringMap_end(self)

    def rbegin(self):
        return _fdr.StringStringMap_rbegin(self)

    def rend(self):
        return _fdr.StringStringMap_rend(self)

    def count(self, x):
        return _fdr.StringStringMap_count(self, x)

    def erase(self, *args):
        return _fdr.StringStringMap_erase(self, *args)

    def find(self, x):
        return _fdr.StringStringMap_find(self, x)

    def lower_bound(self, x):
        return _fdr.StringStringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _fdr.StringStringMap_upper_bound(self, x)
    __swig_destroy__ = _fdr.delete_StringStringMap
    __del__ = lambda self: None
StringStringMap_swigregister = _fdr.StringStringMap_swigregister
StringStringMap_swigregister(StringStringMap)

class CompiledEventList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompiledEventList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompiledEventList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.CompiledEventList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.CompiledEventList___nonzero__(self)

    def __bool__(self):
        return _fdr.CompiledEventList___bool__(self)

    def __len__(self):
        return _fdr.CompiledEventList___len__(self)

    def pop(self):
        return _fdr.CompiledEventList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.CompiledEventList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.CompiledEventList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.CompiledEventList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.CompiledEventList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.CompiledEventList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.CompiledEventList___setitem__(self, *args)

    def append(self, x):
        return _fdr.CompiledEventList_append(self, x)

    def empty(self):
        return _fdr.CompiledEventList_empty(self)

    def size(self):
        return _fdr.CompiledEventList_size(self)

    def clear(self):
        return _fdr.CompiledEventList_clear(self)

    def swap(self, v):
        return _fdr.CompiledEventList_swap(self, v)

    def get_allocator(self):
        return _fdr.CompiledEventList_get_allocator(self)

    def begin(self):
        return _fdr.CompiledEventList_begin(self)

    def end(self):
        return _fdr.CompiledEventList_end(self)

    def rbegin(self):
        return _fdr.CompiledEventList_rbegin(self)

    def rend(self):
        return _fdr.CompiledEventList_rend(self)

    def pop_back(self):
        return _fdr.CompiledEventList_pop_back(self)

    def erase(self, *args):
        return _fdr.CompiledEventList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_CompiledEventList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.CompiledEventList_push_back(self, x)

    def front(self):
        return _fdr.CompiledEventList_front(self)

    def back(self):
        return _fdr.CompiledEventList_back(self)

    def assign(self, n, x):
        return _fdr.CompiledEventList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.CompiledEventList_resize(self, *args)

    def insert(self, *args):
        return _fdr.CompiledEventList_insert(self, *args)

    def reserve(self, n):
        return _fdr.CompiledEventList_reserve(self, n)

    def capacity(self):
        return _fdr.CompiledEventList_capacity(self)
    __swig_destroy__ = _fdr.delete_CompiledEventList
    __del__ = lambda self: None
CompiledEventList_swigregister = _fdr.CompiledEventList_swigregister
CompiledEventList_swigregister(CompiledEventList)

class AcceptanceList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AcceptanceList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AcceptanceList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.AcceptanceList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.AcceptanceList___nonzero__(self)

    def __bool__(self):
        return _fdr.AcceptanceList___bool__(self)

    def __len__(self):
        return _fdr.AcceptanceList___len__(self)

    def pop(self):
        return _fdr.AcceptanceList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.AcceptanceList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.AcceptanceList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.AcceptanceList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.AcceptanceList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.AcceptanceList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.AcceptanceList___setitem__(self, *args)

    def append(self, x):
        return _fdr.AcceptanceList_append(self, x)

    def empty(self):
        return _fdr.AcceptanceList_empty(self)

    def size(self):
        return _fdr.AcceptanceList_size(self)

    def clear(self):
        return _fdr.AcceptanceList_clear(self)

    def swap(self, v):
        return _fdr.AcceptanceList_swap(self, v)

    def get_allocator(self):
        return _fdr.AcceptanceList_get_allocator(self)

    def begin(self):
        return _fdr.AcceptanceList_begin(self)

    def end(self):
        return _fdr.AcceptanceList_end(self)

    def rbegin(self):
        return _fdr.AcceptanceList_rbegin(self)

    def rend(self):
        return _fdr.AcceptanceList_rend(self)

    def pop_back(self):
        return _fdr.AcceptanceList_pop_back(self)

    def erase(self, *args):
        return _fdr.AcceptanceList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_AcceptanceList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.AcceptanceList_push_back(self, x)

    def front(self):
        return _fdr.AcceptanceList_front(self)

    def back(self):
        return _fdr.AcceptanceList_back(self)

    def assign(self, n, x):
        return _fdr.AcceptanceList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.AcceptanceList_resize(self, *args)

    def insert(self, *args):
        return _fdr.AcceptanceList_insert(self, *args)

    def reserve(self, n):
        return _fdr.AcceptanceList_reserve(self, n)

    def capacity(self):
        return _fdr.AcceptanceList_capacity(self)
    __swig_destroy__ = _fdr.delete_AcceptanceList
    __del__ = lambda self: None
AcceptanceList_swigregister = _fdr.AcceptanceList_swigregister
AcceptanceList_swigregister(AcceptanceList)

class TraceBehaviourList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceBehaviourList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TraceBehaviourList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.TraceBehaviourList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.TraceBehaviourList___nonzero__(self)

    def __bool__(self):
        return _fdr.TraceBehaviourList___bool__(self)

    def __len__(self):
        return _fdr.TraceBehaviourList___len__(self)

    def pop(self):
        return _fdr.TraceBehaviourList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.TraceBehaviourList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.TraceBehaviourList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.TraceBehaviourList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.TraceBehaviourList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.TraceBehaviourList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.TraceBehaviourList___setitem__(self, *args)

    def append(self, x):
        return _fdr.TraceBehaviourList_append(self, x)

    def empty(self):
        return _fdr.TraceBehaviourList_empty(self)

    def size(self):
        return _fdr.TraceBehaviourList_size(self)

    def clear(self):
        return _fdr.TraceBehaviourList_clear(self)

    def swap(self, v):
        return _fdr.TraceBehaviourList_swap(self, v)

    def get_allocator(self):
        return _fdr.TraceBehaviourList_get_allocator(self)

    def begin(self):
        return _fdr.TraceBehaviourList_begin(self)

    def end(self):
        return _fdr.TraceBehaviourList_end(self)

    def rbegin(self):
        return _fdr.TraceBehaviourList_rbegin(self)

    def rend(self):
        return _fdr.TraceBehaviourList_rend(self)

    def pop_back(self):
        return _fdr.TraceBehaviourList_pop_back(self)

    def erase(self, *args):
        return _fdr.TraceBehaviourList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_TraceBehaviourList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.TraceBehaviourList_push_back(self, x)

    def front(self):
        return _fdr.TraceBehaviourList_front(self)

    def back(self):
        return _fdr.TraceBehaviourList_back(self)

    def assign(self, n, x):
        return _fdr.TraceBehaviourList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.TraceBehaviourList_resize(self, *args)

    def insert(self, *args):
        return _fdr.TraceBehaviourList_insert(self, *args)

    def reserve(self, n):
        return _fdr.TraceBehaviourList_reserve(self, n)

    def capacity(self):
        return _fdr.TraceBehaviourList_capacity(self)
    __swig_destroy__ = _fdr.delete_TraceBehaviourList
    __del__ = lambda self: None
TraceBehaviourList_swigregister = _fdr.TraceBehaviourList_swigregister
TraceBehaviourList_swigregister(TraceBehaviourList)

class EventList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.EventList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.EventList___nonzero__(self)

    def __bool__(self):
        return _fdr.EventList___bool__(self)

    def __len__(self):
        return _fdr.EventList___len__(self)

    def pop(self):
        return _fdr.EventList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.EventList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.EventList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.EventList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.EventList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.EventList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.EventList___setitem__(self, *args)

    def append(self, x):
        return _fdr.EventList_append(self, x)

    def empty(self):
        return _fdr.EventList_empty(self)

    def size(self):
        return _fdr.EventList_size(self)

    def clear(self):
        return _fdr.EventList_clear(self)

    def swap(self, v):
        return _fdr.EventList_swap(self, v)

    def get_allocator(self):
        return _fdr.EventList_get_allocator(self)

    def begin(self):
        return _fdr.EventList_begin(self)

    def end(self):
        return _fdr.EventList_end(self)

    def rbegin(self):
        return _fdr.EventList_rbegin(self)

    def rend(self):
        return _fdr.EventList_rend(self)

    def pop_back(self):
        return _fdr.EventList_pop_back(self)

    def erase(self, *args):
        return _fdr.EventList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_EventList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.EventList_push_back(self, x)

    def front(self):
        return _fdr.EventList_front(self)

    def back(self):
        return _fdr.EventList_back(self)

    def assign(self, n, x):
        return _fdr.EventList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.EventList_resize(self, *args)

    def insert(self, *args):
        return _fdr.EventList_insert(self, *args)

    def reserve(self, n):
        return _fdr.EventList_reserve(self, n)

    def capacity(self):
        return _fdr.EventList_capacity(self)
    __swig_destroy__ = _fdr.delete_EventList
    __del__ = lambda self: None
EventList_swigregister = _fdr.EventList_swigregister
EventList_swigregister(EventList)

class MachineEvaluatorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MachineEvaluatorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MachineEvaluatorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_MachineEvaluatorResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def result(self):
        return _fdr.MachineEvaluatorResult_result(self)

    def warnings(self):
        return _fdr.MachineEvaluatorResult_warnings(self)
    __swig_destroy__ = _fdr.delete_MachineEvaluatorResult
    __del__ = lambda self: None
MachineEvaluatorResult_swigregister = _fdr.MachineEvaluatorResult_swigregister
MachineEvaluatorResult_swigregister(MachineEvaluatorResult)

class OptionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OptionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.OptionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.OptionList___nonzero__(self)

    def __bool__(self):
        return _fdr.OptionList___bool__(self)

    def __len__(self):
        return _fdr.OptionList___len__(self)

    def pop(self):
        return _fdr.OptionList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.OptionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.OptionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.OptionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.OptionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.OptionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.OptionList___setitem__(self, *args)

    def append(self, x):
        return _fdr.OptionList_append(self, x)

    def empty(self):
        return _fdr.OptionList_empty(self)

    def size(self):
        return _fdr.OptionList_size(self)

    def clear(self):
        return _fdr.OptionList_clear(self)

    def swap(self, v):
        return _fdr.OptionList_swap(self, v)

    def get_allocator(self):
        return _fdr.OptionList_get_allocator(self)

    def begin(self):
        return _fdr.OptionList_begin(self)

    def end(self):
        return _fdr.OptionList_end(self)

    def rbegin(self):
        return _fdr.OptionList_rbegin(self)

    def rend(self):
        return _fdr.OptionList_rend(self)

    def pop_back(self):
        return _fdr.OptionList_pop_back(self)

    def erase(self, *args):
        return _fdr.OptionList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_OptionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.OptionList_push_back(self, x)

    def front(self):
        return _fdr.OptionList_front(self)

    def back(self):
        return _fdr.OptionList_back(self)

    def assign(self, n, x):
        return _fdr.OptionList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.OptionList_resize(self, *args)

    def insert(self, *args):
        return _fdr.OptionList_insert(self, *args)

    def reserve(self, n):
        return _fdr.OptionList_reserve(self, n)

    def capacity(self):
        return _fdr.OptionList_capacity(self)
    __swig_destroy__ = _fdr.delete_OptionList
    __del__ = lambda self: None
OptionList_swigregister = _fdr.OptionList_swigregister
OptionList_swigregister(OptionList)

class PrintStatementList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintStatementList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintStatementList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.PrintStatementList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.PrintStatementList___nonzero__(self)

    def __bool__(self):
        return _fdr.PrintStatementList___bool__(self)

    def __len__(self):
        return _fdr.PrintStatementList___len__(self)

    def pop(self):
        return _fdr.PrintStatementList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.PrintStatementList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.PrintStatementList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.PrintStatementList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.PrintStatementList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.PrintStatementList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.PrintStatementList___setitem__(self, *args)

    def append(self, x):
        return _fdr.PrintStatementList_append(self, x)

    def empty(self):
        return _fdr.PrintStatementList_empty(self)

    def size(self):
        return _fdr.PrintStatementList_size(self)

    def clear(self):
        return _fdr.PrintStatementList_clear(self)

    def swap(self, v):
        return _fdr.PrintStatementList_swap(self, v)

    def get_allocator(self):
        return _fdr.PrintStatementList_get_allocator(self)

    def begin(self):
        return _fdr.PrintStatementList_begin(self)

    def end(self):
        return _fdr.PrintStatementList_end(self)

    def rbegin(self):
        return _fdr.PrintStatementList_rbegin(self)

    def rend(self):
        return _fdr.PrintStatementList_rend(self)

    def pop_back(self):
        return _fdr.PrintStatementList_pop_back(self)

    def erase(self, *args):
        return _fdr.PrintStatementList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_PrintStatementList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.PrintStatementList_push_back(self, x)

    def front(self):
        return _fdr.PrintStatementList_front(self)

    def back(self):
        return _fdr.PrintStatementList_back(self)

    def assign(self, n, x):
        return _fdr.PrintStatementList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.PrintStatementList_resize(self, *args)

    def insert(self, *args):
        return _fdr.PrintStatementList_insert(self, *args)

    def reserve(self, n):
        return _fdr.PrintStatementList_reserve(self, n)

    def capacity(self):
        return _fdr.PrintStatementList_capacity(self)
    __swig_destroy__ = _fdr.delete_PrintStatementList
    __del__ = lambda self: None
PrintStatementList_swigregister = _fdr.PrintStatementList_swigregister
PrintStatementList_swigregister(PrintStatementList)

class StringEvaluatorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringEvaluatorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringEvaluatorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_StringEvaluatorResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def result(self):
        return _fdr.StringEvaluatorResult_result(self)

    def warnings(self):
        return _fdr.StringEvaluatorResult_warnings(self)
    __swig_destroy__ = _fdr.delete_StringEvaluatorResult
    __del__ = lambda self: None
StringEvaluatorResult_swigregister = _fdr.StringEvaluatorResult_swigregister
StringEvaluatorResult_swigregister(StringEvaluatorResult)

class TransitionList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransitionList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransitionList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _fdr.TransitionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fdr.TransitionList___nonzero__(self)

    def __bool__(self):
        return _fdr.TransitionList___bool__(self)

    def __len__(self):
        return _fdr.TransitionList___len__(self)

    def pop(self):
        return _fdr.TransitionList_pop(self)

    def __getslice__(self, i, j):
        return _fdr.TransitionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fdr.TransitionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fdr.TransitionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fdr.TransitionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fdr.TransitionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fdr.TransitionList___setitem__(self, *args)

    def append(self, x):
        return _fdr.TransitionList_append(self, x)

    def empty(self):
        return _fdr.TransitionList_empty(self)

    def size(self):
        return _fdr.TransitionList_size(self)

    def clear(self):
        return _fdr.TransitionList_clear(self)

    def swap(self, v):
        return _fdr.TransitionList_swap(self, v)

    def get_allocator(self):
        return _fdr.TransitionList_get_allocator(self)

    def begin(self):
        return _fdr.TransitionList_begin(self)

    def end(self):
        return _fdr.TransitionList_end(self)

    def rbegin(self):
        return _fdr.TransitionList_rbegin(self)

    def rend(self):
        return _fdr.TransitionList_rend(self)

    def pop_back(self):
        return _fdr.TransitionList_pop_back(self)

    def erase(self, *args):
        return _fdr.TransitionList_erase(self, *args)

    def __init__(self, *args):
        this = _fdr.new_TransitionList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _fdr.TransitionList_push_back(self, x)

    def front(self):
        return _fdr.TransitionList_front(self)

    def back(self):
        return _fdr.TransitionList_back(self)

    def assign(self, n, x):
        return _fdr.TransitionList_assign(self, n, x)

    def resize(self, *args):
        return _fdr.TransitionList_resize(self, *args)

    def insert(self, *args):
        return _fdr.TransitionList_insert(self, *args)

    def reserve(self, n):
        return _fdr.TransitionList_reserve(self, n)

    def capacity(self):
        return _fdr.TransitionList_capacity(self)
    __swig_destroy__ = _fdr.delete_TransitionList
    __del__ = lambda self: None
TransitionList_swigregister = _fdr.TransitionList_swigregister
TransitionList_swigregister(TransitionList)

class AssertionEvaluatorResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssertionEvaluatorResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssertionEvaluatorResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_AssertionEvaluatorResult(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def result(self):
        return _fdr.AssertionEvaluatorResult_result(self)

    def warnings(self):
        return _fdr.AssertionEvaluatorResult_warnings(self)
    __swig_destroy__ = _fdr.delete_AssertionEvaluatorResult
    __del__ = lambda self: None
AssertionEvaluatorResult_swigregister = _fdr.AssertionEvaluatorResult_swigregister
AssertionEvaluatorResult_swigregister(AssertionEvaluatorResult)

class Error(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Error, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Error, name)

    def __init__(self, description):
        this = _fdr.new_Error(description)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __repr__(self):
        return _fdr.Error___repr__(self)

    def __str__(self):
        return _fdr.Error___str__(self)
    __swig_destroy__ = _fdr.delete_Error
    __del__ = lambda self: None
Error_swigregister = _fdr.Error_swigregister
Error_swigregister(Error)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_Node
    __del__ = lambda self: None

    def hash_code(self):
        return _fdr.Node_hash_code(self)

    def __hash__(self):
        return _fdr.Node___hash__(self)

    def __eq__(self, other):
        return _fdr.Node___eq__(self, other)

    def __ne__(self, other):
        return _fdr.Node___ne__(self, other)
Node_swigregister = _fdr.Node_swigregister
Node_swigregister(Node)

INVALID_EVENT = _fdr.INVALID_EVENT
TAU = _fdr.TAU
SemanticModel_Default = _fdr.SemanticModel_Default
SemanticModel_Traces = _fdr.SemanticModel_Traces
SemanticModel_Failures = _fdr.SemanticModel_Failures
SemanticModel_FailuresDivergences = _fdr.SemanticModel_FailuresDivergences
SemanticModel_Refusals = _fdr.SemanticModel_Refusals
SemanticModel_RefusalsDivergences = _fdr.SemanticModel_RefusalsDivergences
SemanticModel_Revivals = _fdr.SemanticModel_Revivals
SemanticModel_RevivalsDivergences = _fdr.SemanticModel_RevivalsDivergences
class CancelledError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CancelledError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CancelledError, name)

    def __init__(self):
        this = _fdr.new_CancelledError()
        try:
            self.this.append(this)
        except:
            self.this = this

    def __repr__(self):
        return _fdr.CancelledError___repr__(self)

    def __str__(self):
        return _fdr.CancelledError___str__(self)
    __swig_destroy__ = _fdr.delete_CancelledError
    __del__ = lambda self: None
CancelledError_swigregister = _fdr.CancelledError_swigregister
CancelledError_swigregister(CancelledError)

class Canceller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canceller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Canceller, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fdr.new_Canceller()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_Canceller
    __del__ = lambda self: None

    def cancelled(self):
        return _fdr.Canceller_cancelled(self)

    def cancel(self):
        return _fdr.Canceller_cancel(self)
Canceller_swigregister = _fdr.Canceller_swigregister
Canceller_swigregister(Canceller)


def library_init():
    return _fdr.library_init()
library_init = _fdr.library_init

def activate_embedded_license(payload, signature):
    return _fdr.activate_embedded_license(payload, signature)
activate_embedded_license = _fdr.activate_embedded_license

def has_valid_license():
    return _fdr.has_valid_license()
has_valid_license = _fdr.has_valid_license

def library_exit():
    return _fdr.library_exit()
library_exit = _fdr.library_exit

def version():
    return _fdr.version()
version = _fdr.version
class DisallowedOptionValueError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisallowedOptionValueError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisallowedOptionValueError, name)
    __repr__ = _swig_repr

    def __init__(self, key, value):
        this = _fdr.new_DisallowedOptionValueError(key, value)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DisallowedOptionValueError
    __del__ = lambda self: None
DisallowedOptionValueError_swigregister = _fdr.DisallowedOptionValueError_swigregister
DisallowedOptionValueError_swigregister(DisallowedOptionValueError)

class UnknownOptionError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnknownOptionError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnknownOptionError, name)

    def __init__(self, key):
        this = _fdr.new_UnknownOptionError(key)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __repr__(self):
        return _fdr.UnknownOptionError___repr__(self)

    def __str__(self):
        return _fdr.UnknownOptionError___str__(self)
    __swig_destroy__ = _fdr.delete_UnknownOptionError
    __del__ = lambda self: None
UnknownOptionError_swigregister = _fdr.UnknownOptionError_swigregister
UnknownOptionError_swigregister(UnknownOptionError)

class Option(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Option, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Option, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _fdr.delete_Option
    __del__ = lambda self: None

    def allowed_values(self):
        return _fdr.Option_allowed_values(self)

    def default_value(self):
        return _fdr.Option_default_value(self)

    def get(self):
        return _fdr.Option_get(self)

    def description(self):
        return _fdr.Option_description(self)

    def name(self):
        return _fdr.Option_name(self)

    def set(self, new_value):
        return _fdr.Option_set(self, new_value)
    __swig_getmethods__["options"] = lambda x: _fdr.Option_options
    if _newclass:
        options = staticmethod(_fdr.Option_options)
    __swig_getmethods__["get_option"] = lambda x: _fdr.Option_get_option
    if _newclass:
        get_option = staticmethod(_fdr.Option_get_option)

    def __repr__(self):
        return _fdr.Option___repr__(self)

    def __str__(self):
        return _fdr.Option___str__(self)
Option_swigregister = _fdr.Option_swigregister
Option_swigregister(Option)

def Option_options():
    return _fdr.Option_options()
Option_options = _fdr.Option_options

def Option_get_option(option_name):
    return _fdr.Option_get_option(option_name)
Option_get_option = _fdr.Option_get_option

class Transition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_Transition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def event(self):
        return _fdr.Transition_event(self)

    def destination(self):
        return _fdr.Transition_destination(self)
    __swig_destroy__ = _fdr.delete_Transition
    __del__ = lambda self: None
Transition_swigregister = _fdr.Transition_swigregister
Transition_swigregister(Transition)

class Machine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Machine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Machine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_Machine
    __del__ = lambda self: None

    def root_node(self):
        return _fdr.Machine_root_node(self)

    def initials(self, node):
        return _fdr.Machine_initials(self, node)

    def afters(self, node, event):
        return _fdr.Machine_afters(self, node, event)

    def minimal_acceptances(self, node):
        return _fdr.Machine_minimal_acceptances(self, node)

    def transitions(self, node):
        return _fdr.Machine_transitions(self, node)

    def is_divergent(self, node, canceller):
        return _fdr.Machine_is_divergent(self, node, canceller)

    def alphabet(self, include_tau):
        return _fdr.Machine_alphabet(self, include_tau)

    def is_explicitly_divergent(self, node):
        return _fdr.Machine_is_explicitly_divergent(self, node)

    def has_divergence_labellings(self):
        return _fdr.Machine_has_divergence_labellings(self)

    def has_minimal_acceptance_labellings(self):
        return _fdr.Machine_has_minimal_acceptance_labellings(self)
Machine_swigregister = _fdr.Machine_swigregister
Machine_swigregister(Machine)

class ProgressReporter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProgressReporter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProgressReporter, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ProgressReporter:
            _self = None
        else:
            _self = self
        this = _fdr.new_ProgressReporter(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_ProgressReporter
    __del__ = lambda self: None
    INVALID_TASK = _fdr.ProgressReporter_INVALID_TASK

    def activate(self):
        return _fdr.ProgressReporter_activate(self)

    def deactivate(self):
        return _fdr.ProgressReporter_deactivate(self)

    def task_started(self, task_id, parent_task_id, task_name):
        return _fdr.ProgressReporter_task_started(self, task_id, parent_task_id, task_name)

    def task_finished(self, task_id):
        return _fdr.ProgressReporter_task_finished(self, task_id)

    def task_message_output(self, task_id, message):
        return _fdr.ProgressReporter_task_message_output(self, task_id, message)

    def task_status_updated(self, task_id, new_status):
        return _fdr.ProgressReporter_task_status_updated(self, task_id, new_status)
    def __disown__(self):
        self.this.disown()
        _fdr.disown_ProgressReporter(self)
        return weakref_proxy(self)
ProgressReporter_swigregister = _fdr.ProgressReporter_swigregister
ProgressReporter_swigregister(ProgressReporter)

class FileProgressReporter(ProgressReporter):
    __swig_setmethods__ = {}
    for _s in [ProgressReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileProgressReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProgressReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileProgressReporter, name)
    __repr__ = _swig_repr

    def __init__(self, file_name):
        this = _fdr.new_FileProgressReporter(file_name)
        try:
            self.this.append(this)
        except:
            self.this = this

    def activate(self):
        return _fdr.FileProgressReporter_activate(self)

    def deactivate(self):
        return _fdr.FileProgressReporter_deactivate(self)

    def task_started(self, task_id, parent_task_id, task_name):
        return _fdr.FileProgressReporter_task_started(self, task_id, parent_task_id, task_name)

    def task_finished(self, task_id):
        return _fdr.FileProgressReporter_task_finished(self, task_id)

    def task_message_output(self, task_id, message):
        return _fdr.FileProgressReporter_task_message_output(self, task_id, message)

    def task_status_updated(self, task_id, new_status):
        return _fdr.FileProgressReporter_task_status_updated(self, task_id, new_status)
    __swig_destroy__ = _fdr.delete_FileProgressReporter
    __del__ = lambda self: None
FileProgressReporter_swigregister = _fdr.FileProgressReporter_swigregister
FileProgressReporter_swigregister(FileProgressReporter)

class StreamProgressReporter(ProgressReporter):
    __swig_setmethods__ = {}
    for _s in [ProgressReporter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamProgressReporter, name, value)
    __swig_getmethods__ = {}
    for _s in [ProgressReporter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamProgressReporter, name)
    __repr__ = _swig_repr
    StreamIdentifier_StdOut = _fdr.StreamProgressReporter_StreamIdentifier_StdOut
    StreamIdentifier_StdErr = _fdr.StreamProgressReporter_StreamIdentifier_StdErr

    def __init__(self, output_stream_identifier):
        this = _fdr.new_StreamProgressReporter(output_stream_identifier)
        try:
            self.this.append(this)
        except:
            self.this = this

    def activate(self):
        return _fdr.StreamProgressReporter_activate(self)

    def deactivate(self):
        return _fdr.StreamProgressReporter_deactivate(self)

    def task_started(self, task_id, parent_task_id, task_name):
        return _fdr.StreamProgressReporter_task_started(self, task_id, parent_task_id, task_name)

    def task_finished(self, task_id):
        return _fdr.StreamProgressReporter_task_finished(self, task_id)

    def task_message_output(self, task_id, message):
        return _fdr.StreamProgressReporter_task_message_output(self, task_id, message)

    def task_status_updated(self, task_id, new_status):
        return _fdr.StreamProgressReporter_task_status_updated(self, task_id, new_status)
    __swig_destroy__ = _fdr.delete_StreamProgressReporter
    __del__ = lambda self: None
StreamProgressReporter_swigregister = _fdr.StreamProgressReporter_swigregister
StreamProgressReporter_swigregister(StreamProgressReporter)

class Behaviour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Behaviour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Behaviour, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_Behaviour
    __del__ = lambda self: None

    def machine(self):
        return _fdr.Behaviour_machine(self)

    def node_path(self):
        return _fdr.Behaviour_node_path(self)

    def trace(self):
        return _fdr.Behaviour_trace(self)
Behaviour_swigregister = _fdr.Behaviour_swigregister
Behaviour_swigregister(Behaviour)

class Counterexample(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Counterexample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Counterexample, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_Counterexample
    __del__ = lambda self: None
Counterexample_swigregister = _fdr.Counterexample_swigregister
Counterexample_swigregister(Counterexample)

class Progress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Progress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Progress, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_Progress
    __del__ = lambda self: None
Progress_swigregister = _fdr.Progress_swigregister
Progress_swigregister(Progress)

class BFSRefinementProgress(Progress):
    __swig_setmethods__ = {}
    for _s in [Progress]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BFSRefinementProgress, name, value)
    __swig_getmethods__ = {}
    for _s in [Progress]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BFSRefinementProgress, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_BFSRefinementProgress
    __del__ = lambda self: None

    def plys(self):
        return _fdr.BFSRefinementProgress_plys(self)

    def state_pairs_count(self):
        return _fdr.BFSRefinementProgress_state_pairs_count(self)

    def transition_count(self):
        return _fdr.BFSRefinementProgress_transition_count(self)
BFSRefinementProgress_swigregister = _fdr.BFSRefinementProgress_swigregister
BFSRefinementProgress_swigregister(BFSRefinementProgress)

class Assertion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Assertion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Assertion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __swig_destroy__ = _fdr.delete_Assertion
    __del__ = lambda self: None

    def execute(self, canceller):
        return _fdr.Assertion_execute(self, canceller)

    def counterexamples(self):
        return _fdr.Assertion_counterexamples(self)

    def passed(self):
        return _fdr.Assertion_passed(self)

    def progress(self):
        return _fdr.Assertion_progress(self)

    def to_string(self):
        return _fdr.Assertion_to_string(self)

    def root_task_id(self):
        return _fdr.Assertion_root_task_id(self)

    def __repr__(self):
        return _fdr.Assertion___repr__(self)

    def __str__(self):
        return _fdr.Assertion___str__(self)
Assertion_swigregister = _fdr.Assertion_swigregister
Assertion_swigregister(Assertion)

class PropertyAssertion(Assertion):
    __swig_setmethods__ = {}
    for _s in [Assertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [Assertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyAssertion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def machine(self):
        return _fdr.PropertyAssertion_machine(self)

    def semantic_model(self):
        return _fdr.PropertyAssertion_semantic_model(self)
    __swig_destroy__ = _fdr.delete_PropertyAssertion
    __del__ = lambda self: None
PropertyAssertion_swigregister = _fdr.PropertyAssertion_swigregister
PropertyAssertion_swigregister(PropertyAssertion)

class DeadlockFreeAssertion(PropertyAssertion):
    __swig_setmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeadlockFreeAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeadlockFreeAssertion, name)
    __repr__ = _swig_repr

    def __init__(self, session, machine, model):
        this = _fdr.new_DeadlockFreeAssertion(session, machine, model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DeadlockFreeAssertion
    __del__ = lambda self: None
DeadlockFreeAssertion_swigregister = _fdr.DeadlockFreeAssertion_swigregister
DeadlockFreeAssertion_swigregister(DeadlockFreeAssertion)

class DivergenceFreeAssertion(PropertyAssertion):
    __swig_setmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceFreeAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceFreeAssertion, name)
    __repr__ = _swig_repr

    def __init__(self, session, machine, model):
        this = _fdr.new_DivergenceFreeAssertion(session, machine, model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DivergenceFreeAssertion
    __del__ = lambda self: None
DivergenceFreeAssertion_swigregister = _fdr.DivergenceFreeAssertion_swigregister
DivergenceFreeAssertion_swigregister(DivergenceFreeAssertion)

class DeterministicAssertion(PropertyAssertion):
    __swig_setmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeterministicAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeterministicAssertion, name)
    __repr__ = _swig_repr

    def __init__(self, session, machine, model):
        this = _fdr.new_DeterministicAssertion(session, machine, model)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DeterministicAssertion
    __del__ = lambda self: None
DeterministicAssertion_swigregister = _fdr.DeterministicAssertion_swigregister
DeterministicAssertion_swigregister(DeterministicAssertion)

class HasTraceAssertion(PropertyAssertion):
    __swig_setmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HasTraceAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyAssertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HasTraceAssertion, name)
    __repr__ = _swig_repr

    def __init__(self, session, machine, model, trace):
        this = _fdr.new_HasTraceAssertion(session, machine, model, trace)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_HasTraceAssertion
    __del__ = lambda self: None
HasTraceAssertion_swigregister = _fdr.HasTraceAssertion_swigregister
HasTraceAssertion_swigregister(HasTraceAssertion)

class NegatedAssertion(Assertion):
    __swig_setmethods__ = {}
    for _s in [Assertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NegatedAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [Assertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NegatedAssertion, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fdr.delete_NegatedAssertion
    __del__ = lambda self: None

    def inner_assertion(self):
        return _fdr.NegatedAssertion_inner_assertion(self)
NegatedAssertion_swigregister = _fdr.NegatedAssertion_swigregister
NegatedAssertion_swigregister(NegatedAssertion)

class RefinementAssertion(Assertion):
    __swig_setmethods__ = {}
    for _s in [Assertion]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementAssertion, name, value)
    __swig_getmethods__ = {}
    for _s in [Assertion]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementAssertion, name)
    __repr__ = _swig_repr

    def __init__(self, session, specification, model, implementation):
        this = _fdr.new_RefinementAssertion(session, specification, model, implementation)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_RefinementAssertion
    __del__ = lambda self: None

    def implementation(self):
        return _fdr.RefinementAssertion_implementation(self)

    def model(self):
        return _fdr.RefinementAssertion_model(self)

    def specification(self):
        return _fdr.RefinementAssertion_specification(self)
RefinementAssertion_swigregister = _fdr.RefinementAssertion_swigregister
RefinementAssertion_swigregister(RefinementAssertion)

class Event(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Event, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _fdr.delete_Event
    __del__ = lambda self: None

    def hash_code(self):
        return _fdr.Event_hash_code(self)

    def to_string(self):
        return _fdr.Event_to_string(self)

    def __hash__(self):
        return _fdr.Event___hash__(self)

    def __repr__(self):
        return _fdr.Event___repr__(self)

    def __str__(self):
        return _fdr.Event___str__(self)

    def __eq__(self, other):
        return _fdr.Event___eq__(self, other)

    def __ne__(self, other):
        return _fdr.Event___ne__(self, other)
Event_swigregister = _fdr.Event_swigregister
Event_swigregister(Event)

class ProcessName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProcessName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProcessName, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _fdr.delete_ProcessName
    __del__ = lambda self: None

    def hash_code(self):
        return _fdr.ProcessName_hash_code(self)

    def to_string(self):
        return _fdr.ProcessName_to_string(self)

    def __hash__(self):
        return _fdr.ProcessName___hash__(self)

    def __repr__(self):
        return _fdr.ProcessName___repr__(self)

    def __str__(self):
        return _fdr.ProcessName___str__(self)

    def __eq__(self, other):
        return _fdr.ProcessName___eq__(self, other)

    def __ne__(self, other):
        return _fdr.ProcessName___ne__(self, other)
ProcessName_swigregister = _fdr.ProcessName_swigregister
ProcessName_swigregister(ProcessName)


def __eq__(*args):
    return _fdr.__eq__(*args)
__eq__ = _fdr.__eq__

def __ne__(*args):
    return _fdr.__ne__(*args)
__ne__ = _fdr.__ne__
class FileLoadError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileLoadError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileLoadError, name)

    def __init__(self, file_name, error):
        this = _fdr.new_FileLoadError(file_name, error)
        try:
            self.this.append(this)
        except:
            self.this = this

    def file_name(self):
        return _fdr.FileLoadError_file_name(self)

    def __repr__(self):
        return _fdr.FileLoadError___repr__(self)

    def __str__(self):
        return _fdr.FileLoadError___str__(self)
    __swig_destroy__ = _fdr.delete_FileLoadError
    __del__ = lambda self: None
FileLoadError_swigregister = _fdr.FileLoadError_swigregister
FileLoadError_swigregister(FileLoadError)

class InputFileError(Error):
    __swig_setmethods__ = {}
    for _s in [Error]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputFileError, name, value)
    __swig_getmethods__ = {}
    for _s in [Error]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InputFileError, name)

    def __init__(self, error):
        this = _fdr.new_InputFileError(error)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __repr__(self):
        return _fdr.InputFileError___repr__(self)

    def __str__(self):
        return _fdr.InputFileError___str__(self)
    __swig_destroy__ = _fdr.delete_InputFileError
    __del__ = lambda self: None
InputFileError_swigregister = _fdr.InputFileError_swigregister
InputFileError_swigregister(InputFileError)

class PrintStatement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrintStatement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrintStatement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_PrintStatement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def expression(self):
        return _fdr.PrintStatement_expression(self)

    def source_location(self):
        return _fdr.PrintStatement_source_location(self)
    __swig_destroy__ = _fdr.delete_PrintStatement
    __del__ = lambda self: None
PrintStatement_swigregister = _fdr.PrintStatement_swigregister
PrintStatement_swigregister(PrintStatement)

class Session(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Session, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Session, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _fdr.new_Session()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_Session
    __del__ = lambda self: None

    def load_file(self, file_path):
        return _fdr.Session_load_file(self, file_path)

    def load_strings_as_file(self, root_file_path, file_contents):
        return _fdr.Session_load_strings_as_file(self, root_file_path, file_contents)

    def assertions(self):
        return _fdr.Session_assertions(self)

    def print_statements(self):
        return _fdr.Session_print_statements(self)

    def evaluate_expression(self, expression, canceller):
        return _fdr.Session_evaluate_expression(self, expression, canceller)

    def evaluate_process(self, expression, semantic_model, canceller):
        return _fdr.Session_evaluate_process(self, expression, semantic_model, canceller)

    def parse_assertion(self, assertion):
        return _fdr.Session_parse_assertion(self, assertion)

    def compile_event(self, event):
        return _fdr.Session_compile_event(self, event)

    def uncompile_event(self, event):
        return _fdr.Session_uncompile_event(self, event)

    def uncompile_events(self, events):
        return _fdr.Session_uncompile_events(self, events)

    def machine_name(self, machine):
        return _fdr.Session_machine_name(self, machine)

    def machine_node_name(self, machine, node):
        return _fdr.Session_machine_node_name(self, machine, node)
Session_swigregister = _fdr.Session_swigregister
Session_swigregister(Session)

class DebugContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _fdr.new_DebugContext(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DebugContext
    __del__ = lambda self: None

    def initialise(self, canceller):
        return _fdr.DebugContext_initialise(self, canceller)

    def root_task_id(self):
        return _fdr.DebugContext_root_task_id(self)

    def root_behaviours(self):
        return _fdr.DebugContext_root_behaviours(self)

    def behaviour_children(self, behaviour):
        return _fdr.DebugContext_behaviour_children(self, behaviour)

    def full_alphabet(self):
        return _fdr.DebugContext_full_alphabet(self)

    def reveal_tau(self, behaviour, index):
        return _fdr.DebugContext_reveal_tau(self, behaviour, index)

    def reveal_taus_in_trace(self, behaviour):
        return _fdr.DebugContext_reveal_taus_in_trace(self, behaviour)
DebugContext_swigregister = _fdr.DebugContext_swigregister
DebugContext_swigregister(DebugContext)

class ExplicitDivergenceBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExplicitDivergenceBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExplicitDivergenceBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, events):
        this = _fdr.new_ExplicitDivergenceBehaviour(machine, node_path, events)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_ExplicitDivergenceBehaviour
    __del__ = lambda self: None
ExplicitDivergenceBehaviour_swigregister = _fdr.ExplicitDivergenceBehaviour_swigregister
ExplicitDivergenceBehaviour_swigregister(ExplicitDivergenceBehaviour)

class IrrelevantBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IrrelevantBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IrrelevantBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, trace):
        this = _fdr.new_IrrelevantBehaviour(machine, node_path, trace)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_IrrelevantBehaviour
    __del__ = lambda self: None
IrrelevantBehaviour_swigregister = _fdr.IrrelevantBehaviour_swigregister
IrrelevantBehaviour_swigregister(IrrelevantBehaviour)

class LoopBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoopBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoopBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, trace, loop_index):
        this = _fdr.new_LoopBehaviour(machine, node_path, trace, loop_index)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loop_index(self):
        return _fdr.LoopBehaviour_loop_index(self)
    __swig_destroy__ = _fdr.delete_LoopBehaviour
    __del__ = lambda self: None
LoopBehaviour_swigregister = _fdr.LoopBehaviour_swigregister
LoopBehaviour_swigregister(LoopBehaviour)

class MinAcceptanceBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinAcceptanceBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinAcceptanceBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, trace, min_acceptance):
        this = _fdr.new_MinAcceptanceBehaviour(machine, node_path, trace, min_acceptance)
        try:
            self.this.append(this)
        except:
            self.this = this

    def min_acceptance(self):
        return _fdr.MinAcceptanceBehaviour_min_acceptance(self)
    __swig_destroy__ = _fdr.delete_MinAcceptanceBehaviour
    __del__ = lambda self: None
MinAcceptanceBehaviour_swigregister = _fdr.MinAcceptanceBehaviour_swigregister
MinAcceptanceBehaviour_swigregister(MinAcceptanceBehaviour)

class SegmentedBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SegmentedBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SegmentedBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, trace, behaviour, prior_sections):
        this = _fdr.new_SegmentedBehaviour(machine, node_path, trace, behaviour, prior_sections)
        try:
            self.this.append(this)
        except:
            self.this = this

    def last(self):
        return _fdr.SegmentedBehaviour_last(self)

    def prior_sections(self):
        return _fdr.SegmentedBehaviour_prior_sections(self)
    __swig_destroy__ = _fdr.delete_SegmentedBehaviour
    __del__ = lambda self: None
SegmentedBehaviour_swigregister = _fdr.SegmentedBehaviour_swigregister
SegmentedBehaviour_swigregister(SegmentedBehaviour)

class TraceBehaviour(Behaviour):
    __swig_setmethods__ = {}
    for _s in [Behaviour]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceBehaviour, name, value)
    __swig_getmethods__ = {}
    for _s in [Behaviour]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraceBehaviour, name)
    __repr__ = _swig_repr

    def __init__(self, machine, node_path, trace, error_event):
        this = _fdr.new_TraceBehaviour(machine, node_path, trace, error_event)
        try:
            self.this.append(this)
        except:
            self.this = this

    def error_event(self):
        return _fdr.TraceBehaviour_error_event(self)
    __swig_destroy__ = _fdr.delete_TraceBehaviour
    __del__ = lambda self: None
TraceBehaviour_swigregister = _fdr.TraceBehaviour_swigregister
TraceBehaviour_swigregister(TraceBehaviour)

class RefinementCounterexample(Counterexample):
    __swig_setmethods__ = {}
    for _s in [Counterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [Counterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementCounterexample, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def implementation_behaviour(self):
        return _fdr.RefinementCounterexample_implementation_behaviour(self)

    def specification_behaviour(self):
        return _fdr.RefinementCounterexample_specification_behaviour(self)
    __swig_destroy__ = _fdr.delete_RefinementCounterexample
    __del__ = lambda self: None
RefinementCounterexample_swigregister = _fdr.RefinementCounterexample_swigregister
RefinementCounterexample_swigregister(RefinementCounterexample)

class PropertyCounterexample(Counterexample):
    __swig_setmethods__ = {}
    for _s in [Counterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [Counterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyCounterexample, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def behaviour(self):
        return _fdr.PropertyCounterexample_behaviour(self)
    __swig_destroy__ = _fdr.delete_PropertyCounterexample
    __del__ = lambda self: None
PropertyCounterexample_swigregister = _fdr.PropertyCounterexample_swigregister
PropertyCounterexample_swigregister(PropertyCounterexample)

class DeadlockCounterexample(PropertyCounterexample):
    __swig_setmethods__ = {}
    for _s in [PropertyCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeadlockCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeadlockCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, behaviour):
        this = _fdr.new_DeadlockCounterexample(behaviour)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DeadlockCounterexample
    __del__ = lambda self: None
DeadlockCounterexample_swigregister = _fdr.DeadlockCounterexample_swigregister
DeadlockCounterexample_swigregister(DeadlockCounterexample)

class DeterminismCounterexample(RefinementCounterexample):
    __swig_setmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeterminismCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeterminismCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, specification, implementation):
        this = _fdr.new_DeterminismCounterexample(specification, implementation)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DeterminismCounterexample
    __del__ = lambda self: None
DeterminismCounterexample_swigregister = _fdr.DeterminismCounterexample_swigregister
DeterminismCounterexample_swigregister(DeterminismCounterexample)

class DivergenceCounterexample(PropertyCounterexample):
    __swig_setmethods__ = {}
    for _s in [PropertyCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [PropertyCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, behaviour):
        this = _fdr.new_DivergenceCounterexample(behaviour)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_DivergenceCounterexample
    __del__ = lambda self: None
DivergenceCounterexample_swigregister = _fdr.DivergenceCounterexample_swigregister
DivergenceCounterexample_swigregister(DivergenceCounterexample)

class MinAcceptanceCounterexample(RefinementCounterexample):
    __swig_setmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinAcceptanceCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinAcceptanceCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, specification, implementation):
        this = _fdr.new_MinAcceptanceCounterexample(specification, implementation)
        try:
            self.this.append(this)
        except:
            self.this = this

    def min_acceptance(self):
        return _fdr.MinAcceptanceCounterexample_min_acceptance(self)
    __swig_destroy__ = _fdr.delete_MinAcceptanceCounterexample
    __del__ = lambda self: None
MinAcceptanceCounterexample_swigregister = _fdr.MinAcceptanceCounterexample_swigregister
MinAcceptanceCounterexample_swigregister(MinAcceptanceCounterexample)

class RefinementDivergenceCounterexample(RefinementCounterexample):
    __swig_setmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinementDivergenceCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinementDivergenceCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, specification, implementation):
        this = _fdr.new_RefinementDivergenceCounterexample(specification, implementation)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _fdr.delete_RefinementDivergenceCounterexample
    __del__ = lambda self: None
RefinementDivergenceCounterexample_swigregister = _fdr.RefinementDivergenceCounterexample_swigregister
RefinementDivergenceCounterexample_swigregister(RefinementDivergenceCounterexample)

class TraceCounterexample(RefinementCounterexample):
    __swig_setmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceCounterexample, name, value)
    __swig_getmethods__ = {}
    for _s in [RefinementCounterexample]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraceCounterexample, name)
    __repr__ = _swig_repr

    def __init__(self, specification, implementation):
        this = _fdr.new_TraceCounterexample(specification, implementation)
        try:
            self.this.append(this)
        except:
            self.this = this

    def error_event(self):
        return _fdr.TraceCounterexample_error_event(self)
    __swig_destroy__ = _fdr.delete_TraceCounterexample
    __del__ = lambda self: None
TraceCounterexample_swigregister = _fdr.TraceCounterexample_swigregister
TraceCounterexample_swigregister(TraceCounterexample)

# This file is compatible with both classic and new-style classes.


