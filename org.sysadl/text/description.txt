Model SysADL

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package sysadl <http://org.sysadl>

  Class NamedElement
    Attribute name : EString
    Reference properties : Property<<0..*>>

  Class Package -> NamedElement
    Reference imports : Package<<0..*>>
    Reference importedDefinitions : ElementDef<<0..*>>
    Reference definitions : ElementDef<<0..*>>
    Reference appliedStyle : Style<<0..*>>

  Class Style -> NamedElement
    Reference invariants : Invariant<<0..*>>
    Reference definitions : AbstractDef<<0..*>>
    Reference archs : ExampleArchitecture<<0..*>>

  Class ExampleArchitecture -> NamedElement

  Class Invariant -> NamedElement
    Attribute expr : EString

  Class AbstractDef -> NamedElement

  Class AbstractComponentDef -> AbstractDef
    Reference ports : AbstractPortUse<<0..*>>
    Attribute lowerBound : EInt
    Attribute upperBound : EInt
    Reference composition : AbstractComponentDef<<0..*>>

  Class AbstractConnectorDef -> AbstractDef
    Reference ports : AbstractPortUse<<0..*>>
    Reference flows : AbstractFlow<<0..*>>

  Class AbstractFlow -> AbstractDef
    Reference source : AbstractPortUse
    Reference target : AbstractPortUse

  Class AbstractPortUse -> NamedElement
    Attribute flowProperty : FlowProperty<<1..1>>
    Attribute lowerBound : EInt
    Attribute upperBound : EInt

  Class AbstractActivityDef -> AbstractDef

  Class Model -> NamedElement
    Reference packages : Package<<0..*>>
    Reference requirements : Requirement<<0..*>>
    Reference involvedElements : ElementDef<<0..*>>
    Reference /allocation : AllocationTable
    Reference styles : Style<<0..*>>

  Class ElementDef -> NamedElement

  Class DataDef -> ElementDef

  Class DataTypeDef -> TypeDef
    Reference attributes : TypeUse<<0..*>>
    Reference superType : DataTypeDef

  Class DimensionDef -> DataDef

  Class TypeDef -> DataDef
    Operation isCompatible() : EBoolean

  Class TypeUse -> NamedElement
    Reference definition : TypeDef<<1..1>>
    Reference arrayIndex : ArrayIndex

  Class UnitDef -> DataDef
    Reference dimension : DimensionDef

  Class ValueTypeDef -> TypeDef
    Reference unit : UnitDef
    Reference dimension : DimensionDef
    Reference superType : ValueTypeDef

  Class Enumeration -> TypeDef
    Reference literals : EnumLiteralValue<<0..*>>

  Class EnumLiteralValue
    Reference enum : Enumeration<<1..1>>
    Attribute name : EString<<1..1>>

  Class Property
    Attribute name : EString<<1..1>>
    Reference type : TypeDef
    Reference value : Expression

  Class StructuralDef -> ElementDef
    Reference structuralDefs : StructuralDef<<0..*>>
    Reference dataDefs : DataDef<<0..*>>
    Reference invariants : Invariant<<0..*>>

  Class StructuralUse -> NamedElement
    Attribute lowerBound : EInt
    Attribute upperBound : EInt

  Class ComponentDef -> StructuralDef
    Reference ports : PortUse<<0..*>>
    Reference composite : Configuration
    Attribute isBoundary : EBoolean<<1..1>>
    Reference abstractComponent : AbstractComponentDef
    Reference appliedStyle : Style<<0..*>>

  Class ArchitectureDef -> ComponentDef

  Class ComponentUse -> StructuralUse
    Reference definition : ComponentDef<<1..1>>
    Reference ports : PortUse<<0..*>>

  Class ConnectorDef -> StructuralDef
    Reference ports : PortUse<<0..2>>
    Reference flows : Flow<<0..*>>
    Reference composite : Configuration
    Reference abstractConnector : AbstractConnectorDef

  Class ConnectorUse -> StructuralUse
    Reference definition : ConnectorDef<<1..1>>
    Reference ports : PortUse<<0..*>>
    Reference bindings : ConnectorBinding<<0..*>>

  Class Configuration
    Reference components : ComponentUse<<0..*>>
    Reference connectors : ConnectorUse<<0..*>>
    Reference delegations : Delegation<<0..*>>

  Class RelationUse
    Reference source : PortUse<<1..1>>
    Reference destination : PortUse<<1..1>>

  Class Delegation -> RelationUse
    Operation checkCompatibility() : EBoolean

  Class PortDef -> StructuralDef

  Class CompositePortDef -> PortDef
    Reference ports : PortUse<<2..*>>

  Class SimplePortDef -> PortDef
    Attribute flowProperties : FlowProperty<<1..1>>
    Reference flowType : TypeDef<<1..1>>
    Reference arrayIndex : ArrayIndex

  Class PortUse -> StructuralUse
    Reference definition : PortDef<<1..1>>
    Reference abstractPort : AbstractPortUse

  Class ConnectorBinding -> RelationUse

  Class Flow -> RelationUse
    Reference type : TypeDef<<1..1>>

  Class BehaviorDef -> ElementDef
    Reference inParameters : Pin<<0..*>>
    Reference outParameters : Pin<<0..*>>
    Reference behaviorDefs : BehaviorDef<<0..*>>
    Reference dataDefs : DataDef<<0..*>>
    Reference constraints : ConstraintUse<<0..*>>
    Reference delegations : ActivityDelegation<<0..*>>

  Class ActivityDef -> BehaviorDef
    Reference body : ActivityBody
    Reference abstractActivity : AbstractActivityDef<<0..*>>

  Class ActionDef -> BehaviorDef, ActivityFlowable
    Reference returnType : TypeDef

  Class ActionUse -> NamedElement, ActivityFlowable
    Reference definition : ActionDef<<1..1>>
    Reference pinIn : Pin<<0..*>>

  Class Pin -> TypeUse, ActivityFlowable
    Attribute isFlow : EBoolean<<1..1>>

  Class ConstraintDef -> BehaviorDef
    Reference equation : Expression

  Class ConstraintUse
    Reference definition : ConstraintDef<<1..1>>
    Attribute kind : ConstraintKind<<1..1>>

  Class ActivityRelation
    Reference source : ActivityFlowable<<1..1>>
    Reference target : ActivityFlowable
    Reference targetSwitch : ActivitySwitch

  Class ActivityDelegation -> ActivityRelation

  Class ActivityFlow -> ActivityRelation

  Class ActivitySwitch -> ActivityFlowable
    Reference cases : ActivitySwitchCase<<0..*>>

  Class ActivitySwitchCase
    Reference condition : Expression<<1..1>>
    Reference target : ActivityFlowable<<1..1>>

  Class ActivityFlowable

  Class ActivityBody
    Reference actions : ActionUse<<0..*>>
    Reference flows : ActivityRelation<<0..*>>
    Reference dataObjects : DataObject<<0..*>>

  Class DataObject -> NamedElement, ActivityFlowable
    Reference type : TypeDef<<1..1>>
    Reference initValue : Expression
    Reference arrayIndex : ArrayIndex

  Class DataStore -> DataObject

  Class DataBuffer -> DataObject

  Class Protocol -> BehaviorDef
    Reference body : ProtocolBody<<1..1>>

  Class ProtocolBodyInternal

  Class ProtocolBody -> ProtocolBodyInternal
    Attribute recControl : ProtocolControl<<1..1>>
    Reference body : ProtocolBodyInternal<<1..1>>
    Reference recursive : ProtocolBody
    Attribute recType : ProtocolAlternativeType

  Class PredefinedAction -> ProtocolBodyInternal
    Reference flowTo : Pin<<1..1>>

  Class ActionSend -> PredefinedAction
    Reference expression : Expression<<1..1>>

  Class ActionReceive -> PredefinedAction
    Reference var : TypeUse<<1..1>>

  Class Executable -> ElementDef
    Reference body : Statement<<1..*>>
    Reference returnType : TypeDef<<1..1>>
    Reference params : TypeUse<<0..*>>

  Class Requirement -> NamedElement
    Attribute id : EString<<1..1>>
    Attribute text : EString
    Reference derive : Requirement<<0..*>>
    Reference composition : Requirement<<0..*>>
    Reference satisfiedBy : ElementDef<<0..*>>
    Operation isValid() : EBoolean

  Class AllocationTable
    Reference allocs : Allocation<<0..*>>

  Class Allocation

  Class ExecutableAllocation -> Allocation
    Reference source : Executable
    Reference target : ActionDef

  Class ActivityAllocation -> Allocation
    Reference source : ActivityDef
    Reference target : StructuralDef

  Class Statement
    Operation run() : void

  Class Expression -> Statement

  Class ConditionalTestExpression -> Expression
    Reference op1 : Expression
    Reference op2 : Expression
    Reference op3 : Expression

  Class BinaryExpression -> Expression
    Reference op1 : Expression
    Reference op2 : Expression

  Class ConditionalLogicalExpression -> BinaryExpression
    Attribute operator : EString

  Class LogicalExpression -> BinaryExpression
    Attribute operator : EString

  Class RelationalExpression -> BinaryExpression
    Attribute operator : RelationalOperator

  Class ShiftExpression -> BinaryExpression
    Attribute operator : ShiftOperator

  Class MultiplicativeExpression -> BinaryExpression
    Attribute operator : MultiplicativeOperator

  Class AdditiveExpression -> BinaryExpression
    Attribute operator : AdditiveOperator

  Class EqualityExpression -> BinaryExpression
    Attribute operator : EqualityOperator

  Class SequenceConstructionExpression -> Expression
    Reference type : TypeDef
    Reference elements : SequenceElements

  Class SequenceAccessExpression -> Expression
    Reference primary : Expression
    Reference index : ArrayIndex

  Class ArrayIndex
    Reference expression : Expression<<0..*>>

  Class SequenceElements

  Class SequenceExpressionList -> SequenceElements
    Reference element : LiteralExpression<<0..*>>

  Class SequenceRange -> SequenceElements
    Reference rangeLower : NaturalLiteralExpression
    Reference rangeUpper : NaturalLiteralExpression

  Class UnaryExpression -> Expression
    Reference op : Expression
    Attribute operator : EString

  Class BooleanUnaryExpression -> UnaryExpression

  Class BitStringUnaryExpression -> UnaryExpression

  Class NumericUnaryExpression -> UnaryExpression

  Class CastExpression -> UnaryExpression
    Reference typeName : TypeDef

  Class IsolationExpression -> UnaryExpression

  Class ClassificationExpression -> UnaryExpression
    Reference typeName : TypeDef

  Class PrimaryExpression -> Expression

  Class InstanceCreationExpression -> PrimaryExpression
    Reference type : TypeDef
    Reference index : ArrayIndex

  Class NameExpression -> PrimaryExpression
    Reference cite : NamedElement

  Class NonNameExpression -> PrimaryExpression

  Class BooleanLiteralExpression -> LiteralExpression
    Attribute isTrue : EBoolean<<1..1>>

  Class NaturalLiteralExpression -> LiteralExpression
    Attribute int_value : EInt<<1..1>>

  Class StringLiteralExpression -> LiteralExpression
    Attribute str_value : EString<<1..1>>

  Class EnumValueLiteralExpression -> LiteralExpression
    Reference enumValue : EnumLiteralValue
    Reference _enum : Enumeration

  Class NullLiteralExpression -> LiteralExpression

  Class LiteralExpression -> NonNameExpression

  Class ThisExpression -> NonNameExpression

  Class PropertyAccessExpression -> PrimaryExpression
    Reference featureRef : FeatureReference

  Class DataTypeAccessExpression -> PrimaryExpression
    Reference attr : TypeUse
    Reference datatype : TypeUse
    Reference index : ArrayIndex

  Class FeatureReference
    Reference feature : NamedElement
    Reference field : NamedElement
    Reference expr : Expression

  Class IncrementOrDecrementExpression -> Expression
    Reference operand : LeftHandSide
    Attribute operator : AffixOperator

  Class PrefixExpression -> IncrementOrDecrementExpression

  Class PostfixExpression -> IncrementOrDecrementExpression

  Class BlockStatement -> Statement
    Reference body : Statement<<1..*>>

  Class AssignmentExpression -> Expression
    Reference lhs : LeftHandSide
    Reference v : Expression
    Attribute operator : AssignmentOperator

  Class LeftHandSide
    Reference target : NameExpression
    Reference index : ArrayIndex
    Reference feature : PrimaryExpression

  Class VariableDecl -> Statement, TypeUse
    Reference value : Expression

  Class IfBlockStatement -> Statement
    Reference main_if : IfStatement<<1..1>>
    Reference paralel_ifs : IfStatement<<0..*>>
    Reference sequential_ifs : IfStatement<<0..*>>
    Reference final : ElseStatement
    Reference else : ElseStatement

  Class IfStatement
    Reference condition : Expression<<1..1>>
    Reference body : Statement<<1..1>>

  Class ElseStatement
    Reference body : Statement<<1..1>>

  Class ReturnStatement -> Statement
    Reference value : Expression<<1..1>>

  Class LoopStatement -> Statement
    Reference condition : Expression<<1..1>>
    Reference body : Statement<<1..1>>

  Class WhileStatement -> LoopStatement

  Class DoStatement -> LoopStatement

  Class ForStatement -> Statement
    Reference body : Statement<<1..1>>
    Reference control : ForControl<<1..1>>

  Class ForControl
    Reference vars : ForVar<<1..*>>

  Class ForVar
    Reference var : VariableDecl<<1..1>>
    Reference expr : Expression<<1..1>>

  Class SwitchStatement -> Statement
    Reference expr : Expression<<1..1>>
    Reference clauses : SwitchClause<<0..*>>

  Class SwitchClause
    Reference value : Expression
    Reference body : Statement<<1..1>>

  Class DefaultSwitchClause -> SwitchClause

  Enum ConstraintKind
    Literal preCondition = 0
    Literal postCondition = 1
    Literal invariant = 2

  Enum FlowProperty
    Literal inout = 0
    Literal in = 0
    Literal out = 0

  Enum ProtocolAlternativeType
    Literal alternative = 0
    Literal complimentary = 1

  Enum ProtocolControl
    Literal several = 0
    Literal once = 1
    Literal perhaps = 2
    Literal always = 3

  Enum AdditiveOperator
    Literal plus = 0
    Literal minus = 1

  Enum MultiplicativeOperator
    Literal star = 0
    Literal slash = 1
    Literal rem = 2

  Enum ShiftOperator
    Literal lshift = 0
    Literal rshift = 1
    Literal urshift = 2

  Enum RelationalOperator
    Literal less = 0
    Literal greater = 1
    Literal less_equal = 2
    Literal greater_equal = 3

  Enum ClassificationOperator
    Literal instanceof = 0
    Literal hastype = 1

  Enum EqualityOperator
    Literal equal = 0
    Literal different = 1

  Enum AffixOperator
    Literal incr = 0
    Literal decr = 1

  Enum AssignmentOperator
    Literal equal = 0
    Literal plusEqual = 1
    Literal minusEqual = 2
    Literal starEqual = 3
    Literal modEqual = 4
    Literal divEqual = 5
    Literal andEqual = 6
    Literal orEqual = 7
    Literal powerEqual = 8
    Literal shiftLeftEqual = 9
    Literal shiftRightEqual = 10
    Literal shiftRightDoubledEqual = 11
