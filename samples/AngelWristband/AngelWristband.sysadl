Model SysADLArchitecture ; 
package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } } 
package Ports{ import SysADL.types ; port def RequestOPT { flow out String } port def RequestIPT { flow in String } port def ResponseOPT { flow out String } port def ResponseIPT { flow in String } port def SmartphoneCPT { ports : req : RequestOPT ; resp : ResponseIPT ; } port def WristbandCPT { ports : req : RequestIPT ; resp : ResponseOPT ; } port def DataIPT { flow in String } port def DataOPT { flow out String } port def TemperatureIPT { flow in Real } port def TemperatureOPT { flow out Real } port def AccelerometerIPT { flow in Real } port def AccelerometerOPT { flow out Real } port def HeartRateIPT { flow in Real } port def HeartRateOPT { flow out Real } }
package Connectors { import Ports ; connector def RequestResponseCN { participants : ~ w : WristbandCPT ; ~ sp : SmartphoneCPT ; configuration { } } connector def sendRequestCN { participants : ~ req : RequestOPT ; ~ reqI : RequestIPT ; flows : String from req to reqI } connector def sendResponseCN { participants : ~ resp : ResponseOPT ; ~ reqi : ResponseIPT ; flows : String from resp to reqi } connector def DataCN implements IoTStyle.DatastoreCN { participants : ~ dOut : DataOPT ; ~ dIn : DataIPT ; flows : String from dOut to dIn } connector def AccelerationCN implements IoTStyle.SensorDataCN { participants : ~ aOut : AccelerometerOPT ; ~ aIn : AccelerometerIPT ; flows : Real from aOut to aIn } connector def TemperatureCN implements IoTStyle.SensorDataCN { participants : ~ tOut : TemperatureOPT ; ~ tIn : TemperatureIPT ; flows : Real from tOut to tIn } connector def HeartRateCN implements IoTStyle.SensorDataCN { participants : ~ hrOut : HeartRateOPT ; ~ hrIn : HeartRateIPT ; flows : Real from hrOut to hrIn } }
package Components satisfies IoTStyle { import Ports ; import Connectors ; import SysADL.types ; 
	boundary component def AccelerometerCP implements IoTStyle.SensorCP { ports : as : AccelerometerOPT concrete IoTStyle.SensorCP.SensorOPT ; } 
	boundary component def TemperatureSensorCP implements IoTStyle.SensorCP { ports : ts : TemperatureOPT concrete IoTStyle.SensorCP.SensorOPT ; }
	component def WristbandCP implements IoTStyle.DeviceCP { ports : aw : WristbandCPT concrete IoTStyle.DeviceCP.DeviceOPT ; configuration { components : ControllerCP : ControllerCP { using ports : rIn : RequestIPT ; rOut : ResponseOPT ; a : AccelerometerIPT ; hs : HeartRateIPT ; t : TemperatureIPT ; } a : AccelerometerCP { using ports : as : AccelerometerOPT ; } t : TemperatureSensorCP { using ports : ts : TemperatureOPT ; } hr : HeartRateSensorCP { using ports : hrs : HeartRateOPT ; } connectors : sendHeartRate : HeartRateCN bindings hrs = hs ; sendTemperature : TemperatureCN bindings ts = t ; sendAcceleration : AccelerationCN bindings as = a ; delegations : rIn to req rOut to resp } } boundary
	component def HeartRateSensorCP implements IoTStyle.SensorCP { ports : hrs : HeartRateOPT concrete IoTStyle.SensorCP.SensorOPT ; }
	component def SmartphoneCP implements IoTStyle.DeviceCP { ports : sp : SmartphoneCPT concrete IoTStyle.DeviceCP.ServiceIPT ; configuration { components : app : Application { using ports : rOut : RequestOPT ; rIn : ResponseIPT ; dOut : DataOPT ; dIn : DataIPT ; } 
		db : DatabaseCP { using ports : dataIn : DataIPT ; dataOut : DataOPT ; } 
		connectors : sendData : DataCN bindings dataOut = dIn ; saveData : DataCN bindings dOut = dataIn ; delegations : rOut to req rIn to resp
	} }
	component def Application { ports : rOut : RequestOPT ; rIn : ResponseIPT ; dOut : DataOPT ; dIn : DataIPT ; }
	component def WristbandARCH { configuration { components : w : WristbandCP { using ports : aw : WristbandCPT ; } s : SmartphoneCP { using ports : sp : SmartphoneCPT ; } 
		connectors : sendMeasurements : RequestResponseCN bindings aw = sp ;
	} } 
	activity def teste ( t : String ) { body {
		actions : nameact : nameact { using pins : b : String ; } databuffer teste : SysADL.types.String { } datastore abc : String
	} } action def nameact ( b : String ) : Real { constraint : post-condition asd } constraint asd ( w : Int ) : ( x : Void ) { } component def ControllerCP implements IoTStyle.ControllerCP { ports : rIn : RequestIPT ; rOut : ResponseOPT ; a : AccelerometerIPT concrete IoTStyle.ControllerCP.SensorIPT ; hs : HeartRateIPT concrete IoTStyle.ControllerCP.SensorIPT ; t : TemperatureIPT concrete IoTStyle.ControllerCP.SensorIPT ; } boundary
	component def DatabaseCP implements IoTStyle.DataStoreCP { ports : dIn : DataIPT concrete IoTStyle.DataStoreCP.DataIPT ; dOut : DataOPT concrete IoTStyle.DataStoreCP.DataOPT ; } }
Requirement teste(1.1){
	
}
Requirement teste1(1.2){
	derive teste ; 
} 
style IoTStyle { 
	abstract component def SensorCP [ 1 , -1 ] { ports : SensorOPT : out any } 
	abstract component def ActuatorCP [ 0 , -1 ] { ports : ActuatorIPT : in any } 
	abstract component def DeviceCP [ 1 , -1 ] { ports : SensorIPT : in any [ 0 , -1 ] DeviceOPT : out any [ 0 , 1 ] ActuatorOPT : out any [ 0 , -1 ]  ServiceIPT : in any [ 0 , -1 ] compose {ControllerCP, ActuatorCP, DataStoreCP, GatewayCP, SensorCP} } 
	abstract component def GatewayCP [ 0 , -1 ] { ports : DeviceIPT : in any [ 1 , -1 ]  ServiceIPT : in any [ 0 , -1 ] ServiceOPT : out any [ 1 , -1 ] compose {DataStoreCP} } 
	abstract component def DataStoreCP [ 1 , -1 ] { ports : DataIPT : in any DataOPT : out any } abstract connector def SensorDataCN { participants : ~ SensorOPT : out any ~ SensorIPT : in any flows : flow SensorOPT to SensorIPT } 
	abstract component def IoTARCH { compose {DataStoreCP, GatewayCP, DeviceCP, SensorCP, ActuatorCP} } 
	abstract component def ControllerCP [ 0 , -1 ] { ports : SensorIPT : in any [ 0 , -1 ] ActuatorOPT : out any [ 0 , -1 ] } 
	abstract connector def ActuatorCommandCN { participants : ~ ActuatorOPT : out any ~ ActuatorIPT : in any flows : flow ActuatorOPT to ActuatorIPT } 
	abstract connector def DeviceDataCN { participants : ~ DeviceOPT : out any ~ DeviceIPT : in any flows : flow DeviceOPT to DeviceIPT }  
	abstract connector def DatastoreCN { participants : ~ DataIPT : in any ~ DataOPT : out any flows : flow DataOPT to DataIPT } 
	abstract connector def ServiceCN { participants : ~ ServiceOPT : out any ~ ServiceIPT : in any flows : flow ServiceOPT to ServiceIPT } 
	invariant ExistsSensorCP = 'context Model : self.involvedElements->select(i | i.oclIsTypeOf(StructuralDef))->select(sd | sd.oclIsTypeOf(ComponentDef))->exists(c | c.abstractComponent = self.styles->select(s | s.name=IoTStyle)->select(s | s.definitions)->select(d | d.oclIsTypeOf(AbstractComponentDef))->select(ac | ac.name=SensorCP))'
	invariant ExistsDataStoreCP 
	invariant ExistsDeviceCP 
	invariant SensorConnection 
	invariant ActuatorConnection 
	invariant Communication 
	invariant NumberSensorIPTAndSensorDataCNOfDeviceCP 
	invariant NumberActuatorOPTAndActuatorCommandCNOfDeviceCP 
	invariant NumberDeviceIPTAndDeviceDataCNOfGatewayCP 
	invariant NumberSensorIPTOfControllerCP 
	invariant NumberSensorDataCNOfControllerCP 
	invariant NumberActuatorOPTOfControllerCP 
	invariant NumberActuatorCommandCNOfControllerCP 
	abstract activity def Monitoring : ( data : ) 
	abstract activity def Analysis ( data : ) : ( changeRequest : ) 
	abstract activity def Planning ( changeRequest : ) : ( command : ) 
	abstract activity def Execution ( command : ) }