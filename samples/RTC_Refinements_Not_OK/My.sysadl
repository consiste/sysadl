Model SysADLModel ; 
package types {
  value type Int {}
  value type Boolean {}
  value type String {}
  value type Void {}
  
  enum Command {On , Off }
  datatype Commands {attributes : heater : Command ; cooler : Command ; }
   
  unit Fahrenheit {dimension = Temperature }
  value type temperature extends Real { dimension = Temperature }
  value type FahrenheitTemperature extends temperature { unit = Fahrenheit dimension = Temperature } value type temperatureCelsius extends Int { dimension = Temperature }
  value type Real { } dimension Temperature unit Celsius { dimension = Temperature } value type CelsiusTemperature extends temperatureCelsius { unit = Celsius dimension = Temperature } }
  package Ports { import types ; port def FTemperatureOPT { flow out FahrenheitTemperature }
  port def PresenceIPT { flow in Boolean }
  port def PresenceOPT { flow out Boolean }
  port def CTemperatureIPT { flow in CelsiusTemperature }
  port def CommandIPT { flow in Command }
  port def CommandOPT { flow out Command }
  port def CTemperatureOPT { flow out CelsiusTemperature }
  }
  package Connectors { import types ; import Ports ; connector def FahrenheitToCelsiusCN { participants : ~ Ft : FTemperatureOPT ; ~ Ct : CTemperatureIPT ; flows : FahrenheitTemperature from Ft to Ct }
  connector def PresenceCN { participants : ~ pOut : PresenceOPT ; ~ pIn : PresenceIPT ; flows : Boolean from pOut to pIn }
  connector def CommandCN { participants : ~ commandOut : CommandOPT ; ~ commandIn : CommandIPT ; flows : Command from commandOut to commandIn }
  connector def CTemperatureCN { participants : ~ CtOut : CTemperatureOPT ; ~ ctIn : CTemperatureIPT ; flows : CelsiusTemperature from CtOut to ctIn }
  }
  package Components { import Connectors ; import types ; import Ports ;
	component def RTCSystemCFD {	 configuration {	 components : s1 : TemperatureSensorCP {	 using ports : current1 : FTemperatureOPT ; }
	  s2 : TemperatureSensorCP {	 using ports : current2 : FTemperatureOPT ; }
	  s3 : PresenceSensorCP {	 using ports : detectedS : PresenceOPT ; }
	  ui : UserInterfaceCP {	 using ports : desired : CTemperatureOPT ; }
	  a2 : CoolerCP {	 using ports : controllerC : CommandIPT ; }
	  a1 : HeaterCP {	 using ports : controllerH : CommandIPT ; }
	  rtc : RoomTemperatureControllerCP {	 using ports : detected : PresenceIPT ; localtemp1 : CTemperatureIPT ; localTemp2 : CTemperatureIPT ; userTemp : CTemperatureIPT ; heating : CommandOPT ; cooling : CommandOPT ; }
	  connectors : c1 : FahrenheitToCelsiusCN bindings current1 = localtemp1 ; uc : CTemperatureCN bindings desired = userTemp ; cc2 : CommandCN bindings cooling = controllerC ; pc : PresenceCN bindings detectedS = detected ; c2 : FahrenheitToCelsiusCN bindings current2 = localTemp2 ; cc1 : CommandCN bindings heating = controllerH ; }
	  }

	component def RoomTemperatureControllerCP {	 ports : detectedRTC : PresenceIPT ; localtemp1 : CTemperatureIPT ; localTemp2 : CTemperatureIPT ; userTempRTC : CTemperatureIPT ; heatingRTC : CommandOPT ; coolingRTC : CommandOPT ; configuration {	 components : sm : SensorsMonitorCP {	 using ports : s1 : CTemperatureIPT ; s2 : CTemperatureIPT ; average : CTemperatureOPT ; }
	  cm : CommanderCP {	 using ports : target2 : CTemperatureIPT ; average2 : CTemperatureIPT ; heating : CommandOPT ; cooling : CommandOPT ; }
	  pc : PresenceCheckerCP {	 using ports : detected : PresenceIPT ; userTemp : CTemperatureIPT ; target : CTemperatureOPT ; }
	  connectors : target : CTemperatureCN bindings target = target2 ; average : CTemperatureCN bindings average = average2 ; delegations : userTemp to userTempRTC detected to detectedRTC s1 to localtemp1 s2 to localTemp2 heating to heatingRTC cooling to coolingRTC }
	  } boundary
	component def TemperatureSensorCP {	 ports : current : FTemperatureOPT ; } boundary
	component def PresenceSensorCP {	 ports : detected : PresenceOPT ; } boundary
	component def UserInterfaceCP {	 ports : desired : CTemperatureOPT ; } boundary
	component def HeaterCP {	 ports : controllerH : CommandIPT ; } boundary
	component def CoolerCP {	 ports : controllerC : CommandIPT ; }

	component def PresenceCheckerCP {	 ports : detected : PresenceIPT ; userTemp : CTemperatureIPT ; target : CTemperatureOPT ; }

	component def CommanderCP {	 ports : target2 : CTemperatureIPT ; average2 : CTemperatureIPT ; heating : CommandOPT ; cooling : CommandOPT ; }

	component def SensorsMonitorCP { ports : s1 : CTemperatureIPT ; s2 : CTemperatureIPT ; average : CTemperatureOPT ; }
	constraint CalculateAverageTemperatureEQ ( t1 : CelsiusTemperature , t2 : CelsiusTemperature ) : ( av : CelsiusTemperature ) {
		equation = av == (t1 + t2)/2
	} 
	activity def CalculateAverageTemperatureAC ( s1 : CelsiusTemperature ) ( s2 : CelsiusTemperature ) : ( average : CelsiusTemperature ) { body { actions : CalcAvTemp : CalculateAverageTemperatureAN { using pins : s1 : CelsiusTemperature ; s2 : CelsiusTemperature ; } delegate s1 to s1 delegate s2 to s2 delegate average to CalcAvTemp } } action def CalculateAverageTemperatureAN ( t1 : CelsiusTemperature , t2 : CelsiusTemperature ) : CelsiusTemperature { constraint : post-condition CalculateAverageTemperatureEQ } 
	activity def CheckPresenceToSetTemperatureAC ( detected : Boolean ) ( userTemp : CelsiusTemperature ) : ( target : CelsiusTemperature ) { body { actions : CheckPeresenceToSetTemperatureAN : CheckPeresenceToSetTemperatureAN { using pins : detected : Boolean ; userTemp : CelsiusTemperature ; } delegate detected to detected delegate userTemp to userTemp delegate target to CheckPeresenceToSetTemperatureAN } } 
	activity def DecideCommandAC ( average2 : CelsiusTemperature ) ( target2 : CelsiusTemperature ) : ( cooling : Command , heating : Command ) { body { actions : ct : CompareTemperatureAN { using pins : average2 : CelsiusTemperature ; target2 : CelsiusTemperature ; } cmdH : CommandHeaterAN { using pins : cmdsH : Commands ; } cmdC : CommandCoolerAN { using pins : cmdsC : Commands ; } delegate average2 to average2 delegate target2 to target2 delegate heating to cmdH delegate cooling to cmdC flow from ct to cmdsH flow from ct to cmdsC } } 
	activity def FahrenheitToCelsiusAC ( current1 : FahrenheitTemperature ) : ( loalTemp1 : CelsiusTemperature ) { body { actions : FtC : FahrenheitToCelsiusAN { using pins : current1 : FahrenheitTemperature ; } delegate loalTemp1 to FtC delegate current1 to current1 } } 
	action def CompareTemperatureAN ( average2 : CelsiusTemperature , target2 : CelsiusTemperature ) : Commands { constraint : post-condition CompareTemperatureEQ } 
	action def CommandHeaterAN ( cmds : Commands ) : Command { constraint : post-condition CommandHeaterEQ } 
	action def CommandCoolerAN ( cmds : Commands ) : Command { constraint : post-condition CommandCoolerEQ } 
	constraint CompareTemperatureEQ ( target : CelsiusTemperature , average : CelsiusTemperature ) : ( cmds : Commands ) 
	{ equation = average > target ? cmds == types.Commands.heater->Off && types.Commands.cooler->On : cmds == types.Commands.heater->On && types.Commands.cooler->Off } 
	constraint FahrenheitToCelsiusEQ ( f : FahrenheitTemperature ) : ( c : CelsiusTemperature ) { equation = c == (5*(f - 32)/9) } 
	constraint CommandHeaterEQ ( cmds : Commands ) : ( c : Command ) { equation = c == cmds->heater } 
	constraint CommandCoolerEQ ( cmds : Commands ) : ( c : Command ) {equation = c == cmds->cooler } 
	action def FahrenheitToCelsiusAN ( current1 : FahrenheitTemperature ) : CelsiusTemperature { constraint : post-condition FahrenheitToCelsiusEQ } 	
	action def CheckPeresenceToSetTemperatureAN ( detected : Boolean , userTemp : CelsiusTemperature ) : CelsiusTemperature { constraint : post-condition CheckPresenceToSetTemperatureEQ } 
	constraint CheckPresenceToSetTemperatureEQ ( detected : Boolean , userTemp : CelsiusTemperature ) : ( target : CelsiusTemperature ) {equation = detected == true ? target == userTemp : target == 1 } 
	executable def CommandCoolerEx(in cmds:Commands): out Command{return cmds->cooler ; }
	executable def CommandHeaterEx(in cmds:Commands): out Command{return cmds->heater ; }
	executable def FahrenheitToCelsiusEx(in f:FahrenheitTemperature): out CelsiusTemperature{return 5*(f-34)/9 ; }
	executable def CalculateAverageTemperatureEx(in temp1:CelsiusTemperature,in temp2:CelsiusTemperature):out CelsiusTemperature{return (temp1 + temp2)/2 ; }
	executable def CheckPresenceToSetTemperature(in presence:Boolean, in userTemp:CelsiusTemperature):out CelsiusTemperature{if(presence == true) return userTemp; else return 1; }
	executable def CompareTemperatureEx(in target:CelsiusTemperature, in average:CelsiusTemperature):out Commands{let heater:Command = types.Command::Off; let cooler:Command = types.Command::Off; if(average > target) {heater = types.Command::Off; cooler = types.Command::On ; } else {heater = types.Command::On; cooler = types.Command::Off ;} } 
	constraint SPEC01EQ ( cooler : Command , heater : Command ) : ( result : Boolean ) { equation = ~ cooler == types.Commands.heater->On && heater == types.Commands.heater->On  } 
	action def SPEC_S_01 ( controllerC : Command , controllerH : Command ) : Boolean { constraint : post-condition SPEC01EQ delegate cooler to controllerC delegate heater to controllerC delegate SPEC_S_01 to result delegate controllerC to cooler delegate controllerH to heater } 
	 
	constraint SPEC02EQ ( detectedS : Boolean , current1 : CelsiusTemperature, current2 : CelsiusTemperature, controllerH : Command, controllerC : Command ) : ( result : Boolean ) { equation = (detectedS == false && (current1+current2)/2 > 1 implies (controllerC == types.Commands.cooler->On && controllerH == types.Command.heater->Off)) && (detectedS == false && (current1+current2)/2 < 1 implies (controllerC == types.Command.cooler->Off && controllerH == types.Command.heater->On)) && (detectedS == false && (current1+current2)/2 == 1 implies (controllerC == types.Command.cooler->Off && controllerH == types.Commands.heater->Off ))}   
	    
	action def SPEC_L_02 ( detectedS : Boolean , current1 : CelsiusTemperature, current2 : CelsiusTemperature, controllerH : Command, controllerC : Command ) : Boolean { constraint : post-condition SPEC02EQ delegate detectedS to detectedS delegate current2 to current2 delegate controllerC to controllerC delegate controllerH to controllerH delegate current1 to current1 delegate SPEC_L_02 to result } 
	 } 
	allocations { activity FahrenheitToCelsiusAC to FahrenheitToCelsiusCN activity DecideCommandAC to CommanderCP activity CheckPresenceToSetTemperatureAC to PresenceCheckerCP activity CalculateAverageTemperatureAC to SensorsMonitorCP executable FahrenheitToCelsiusEx to FahrenheitToCelsiusAN executable CompareTemperatureEx to CompareTemperatureAN executable CommandHeaterEx to CommandHeaterAN executable CommandCoolerEx to CommandCoolerAN executable CheckPresenceToSetTemperature to CheckPeresenceToSetTemperatureAN executable CalculateAverageTemperatureEx to CalculateAverageTemperatureAN }