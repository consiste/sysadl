Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
dimension Pressure dimension Temperature unit Celsius {
		dimension = Temperature } unit Fahrenheit {
			dimension = Temperature } unit Atm {
				dimension = Pressure } dimension RelativeHumidity unit percentage {
					dimension = RelativeHumidity } value type LocalTemperature {
						dimension = Temperature
					}
					value type CelsiusTemperature extends LocalTemperature {
						unit = Celsius dimension = Temperature
					}
					value type FahrenheitTemperature extends LocalTemperature {
						unit = Fahrenheit dimension = Temperature
					}
					value type AtmPressure {
						unit = Atm dimension = Pressure
					}
					value type Humidity {
						unit = percentage dimension = RelativeHumidity
					}
					datatype WeatherStation {
						attributes ct : Int l : Location t : LocalTemperature h : Humidity p
						: AtmPressure
					}
					
					datatype Location {
						attributes latitude : Real longitude : Real
					}
				}
				package ComponentsWMS {
					import ConnectorsWMS;
					import PortsWMS;
					import SysADL.types;
					component def Arch1 {
						configuration {
							components:
							wps : WeatherProcessingSubSystemCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								tp : PortsWMS.TemperatureOPT {
								}
								hp : PortsWMS.HumidityOPT {
								}
								ap : PortsWMS.AtmPressureOPT {
								}
							}
							ws3 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws2 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws1 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							d : DisplayCP {
								using ports t : PortsWMS.TemperatureIPT {
								}
								h : PortsWMS.HumidityIPT {
								}
								ap : PortsWMS.AtmPressureIPT {
								}
							}
							connectors:
							wscn3 : ConnectorsWMS.WatherStationCN bindings ws3.op = ws2.ip wscn2
							: ConnectorsWMS.WatherStationCN bindings ws2.op = ws1.ip wscn1 :
							ConnectorsWMS.WatherStationCN bindings ws1.op = wps.ip
						apCN :
							ConnectorsWMS.AtmPressureCN bindings wps.ap = d.ap hCN :
							ConnectorsWMS.HumidityCN bindings wps.hp = d.h tCN :
							ConnectorsWMS.TemperatureCN bindings wps.tp = d.t
						}
					}
					component def WeatherProcessingSubSystemCP {
						ports ip : PortsWMS.WeatherStationIPT [ 1, 2 ] {
						}
						tp : PortsWMS.TemperatureOPT {
						}
						hp : PortsWMS.HumidityOPT {
						}
						ap : PortsWMS.AtmPressureOPT {
						}
					}
					boundary component def DisplayCP {
						ports t : PortsWMS.TemperatureIPT {
						}
						h : PortsWMS.HumidityIPT {
						}
						ap : PortsWMS.AtmPressureIPT {
						}
					}
					component def WeatherStationCP {
						ports ip : PortsWMS.WeatherStationIPT {
						}
						op : PortsWMS.WeatherStationOPT {
						}
						configuration {
							components:
							ts : TemperatureSensorCP {
								using ports tp : PortsWMS.TemperatureOPT {
								}
							}
							hs : HumiditySensorCP {
								using ports hp : PortsWMS.HumidityOPT {
								}
							}
							aps : AtmPressureSensorCP {
								using ports ap : PortsWMS.AtmPressureOPT {
								}
							}
							WSDA : WSDataAggregatorCP {
								using ports ap : PortsWMS.AtmPressureIPT {
								}
								hp : PortsWMS.HumidityIPT {
								}
								tp : PortsWMS.TemperatureIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
								ip : PortsWMS.WeatherStationIPT {
								}
							}
							connectors:
							hcn : ConnectorsWMS.HumidityCN bindings hs.hp = WSDA.hp apcn :
							ConnectorsWMS.AtmPressureCN bindings aps.ap = WSDA.ap tcn :
							ConnectorsWMS.TemperatureCN bindings ts.tp = WSDA.tp delegations:
							WSDA.op to op WSDA.ip to ip
						}
					}
					component def WSDataAggregatorCP {
						ports ap : PortsWMS.AtmPressureIPT {
						}
						hp : PortsWMS.HumidityIPT {
						}
						tp : PortsWMS.TemperatureIPT {
						}
						op : PortsWMS.WeatherStationOPT [ 1, 1 ] {
						}
						ip : PortsWMS.WeatherStationIPT [ 1, 1 ] {
						}
					}
					boundary component def TemperatureSensorCP {
						ports tp : PortsWMS.TemperatureOPT {
						}
					}
					boundary component def HumiditySensorCP {
						ports hp : PortsWMS.HumidityOPT {
						}
					}
					boundary component def AtmPressureSensorCP {
						ports ap : PortsWMS.AtmPressureOPT {
						}
					}
					component def Arch3 {
						configuration {
							components:
							ws3 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws2 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws1 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							wps : WeatherProcessingSubSystemCP {
								using ports ip1 : PortsWMS.WeatherStationIPT {
								}
								ip2 : PortsWMS.WeatherStationIPT {
								}
								tp : PortsWMS.TemperatureOPT {
								}
								hp : PortsWMS.HumidityOPT {
								}
								ap : PortsWMS.AtmPressureOPT {
								}
							}
							ws6 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws5 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws4 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							d : DisplayCP {
								using ports t : PortsWMS.TemperatureIPT {
								}
								h : PortsWMS.HumidityIPT {
								}
								ap : PortsWMS.AtmPressureIPT {
								}
							}
							connectors:
							wscn1 : ConnectorsWMS.WatherStationCN bindings ws1.op = wps.ip1 wscn2
							: ConnectorsWMS.WatherStationCN bindings ws2.op = ws1.ip wscn3 :
							ConnectorsWMS.WatherStationCN bindings ws3.op = ws2.ip wscn6 :
							ConnectorsWMS.WatherStationCN bindings ws6.op = ws5.ip wscn5 :
							ConnectorsWMS.WatherStationCN bindings ws5.op = ws4.ip
						wscn4 : ConnectorsWMS.WatherStationCN bindings ws4.op = wps.ip2
						apCN :
							ConnectorsWMS.AtmPressureCN bindings wps.ap = d.ap hCN :
							ConnectorsWMS.HumidityCN bindings wps.hp = d.h tCN :
							ConnectorsWMS.TemperatureCN bindings wps.tp = d.t
						}
					}
				component def Arch2 {
						configuration {
							components:
							ws3 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws1 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws4 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							wps : WeatherProcessingSubSystemCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								tp : PortsWMS.TemperatureOPT {
								}
								hp : PortsWMS.HumidityOPT {
								}
								ap : PortsWMS.AtmPressureOPT {
								}
							}
							ws5 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws2 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							ws6 : WeatherStationCP {
								using ports ip : PortsWMS.WeatherStationIPT {
								}
								op : PortsWMS.WeatherStationOPT {
								}
							}
							d : DisplayCP {
								using ports t : PortsWMS.TemperatureIPT {
								}
								h : PortsWMS.HumidityIPT {
								}
								ap : PortsWMS.AtmPressureIPT {
								}
							}
							connectors:
							wscn6 : ConnectorsWMS.WatherStationCN bindings ws6.op = ws5.ip wscn3
							: ConnectorsWMS.WatherStationCN bindings ws3.op = ws2.ip wscn5 :
							ConnectorsWMS.WatherStationCN bindings ws5.op = ws4.ip wscn1 :
							ConnectorsWMS.WatherStationCN_2 bindings ws1.op = wps.ip wscn2 :
							ConnectorsWMS.WatherStationCN bindings ws2.op = ws1.ip wscn4 :
							ConnectorsWMS.WatherStationCN_2 bindings ws4.op = wps.ip
						apCN :
							ConnectorsWMS.AtmPressureCN bindings wps.ap = d.ap tCN :
							ConnectorsWMS.TemperatureCN bindings wps.tp = d.t hCN :
							ConnectorsWMS.HumidityCN bindings wps.hp = d.h
						}
					}
					activity def WeatherProcessingSubSystemAC ( ip :
					SysADL.types.WeatherStation ) : ( tp :
					SysADL.types.LocalTemperature, hp : SysADL.types.Humidity, ap :
					SysADL.types.AtmPressure ) {
						body {
						actions : wpst : WeatherPS_TemperatureAN {
								using pins ip : SysADL.types.WeatherStation
							}
							wpsh : WeatherPS_HumidityAN {
								using pins ip : SysADL.types.WeatherStation
							}
							wpsap : WeatherPS_AtmPressureAN {
								using pins ip : SysADL.types.WeatherStation
							}
							delegate tp to wpst delegate hp to wpsh delegate ap to wpsap delegate ip
							to wpst.ip delegate ip to wpsh.ip delegate ip to wpsap.ip
						}
					}
					activity def WSDataAggregatorAC ( t : SysADL.types.LocalTemperature,
					h : SysADL.types.Humidity, ap : SysADL.types.AtmPressure, wsData :
					SysADL.types.WeatherStation ) : ( newWSData :
					SysADL.types.WeatherStation ) {
						body {
						actions : wsda : WSDataAggregatorAN {
								using pins ap : SysADL.types.AtmPressure wsData :
								SysADL.types.WeatherStation h : SysADL.types.Humidity t :
								SysADL.types.LocalTemperature
							}
							delegate newWSData to wsda delegate t to wsda.t delegate h to wsda.h
							delegate ap to wsda.ap delegate wsData to wsda.wsData
						}
					}
					action def WSDataAggregatorAN ( t : SysADL.types.LocalTemperature, h
					: SysADL.types.Humidity, ap : SysADL.types.AtmPressure, wsData :
					SysADL.types.WeatherStation ) : SysADL.types.WeatherStation {
					post-condition WSDataAggregatorEQ ( )
					delegate WSDataAggregatorAN to WSDataAggregatorEQ.newWSData delegate t to
						WSDataAggregatorEQ.t delegate h to WSDataAggregatorEQ.h delegate ap to
						WSDataAggregatorEQ.ap delegate wsData to WSDataAggregatorEQ.wsData
					}
					action def WeatherPS_TemperatureAN ( ip : SysADL.types.WeatherStation )
					: SysADL.types.LocalTemperature {
					post-condition WeatherPS_TemperatureEQ ( )
					delegate WeatherPS_TemperatureAN to WeatherPS_TemperatureEQ.t delegate ip
						to WeatherPS_TemperatureEQ.ip
					}
					action def WeatherPS_HumidityAN ( ip : SysADL.types.WeatherStation ) :
					SysADL.types.Humidity {
					post-condition WeatherPS_HumidityEQ ( )
					delegate WeatherPS_HumidityAN to WeatherPS_HumidityEQ.h delegate ip to
						WeatherPS_HumidityEQ.ip
					}
					action def WeatherPS_AtmPressureAN ( ip : SysADL.types.WeatherStation )
					: SysADL.types.AtmPressure {
					post-condition WeatherPS_AtmPressureEQ ( )
					delegate WeatherPS_AtmPressureAN to WeatherPS_AtmPressureEQ.ap delegate ip
						to WeatherPS_AtmPressureEQ.ip
					}
					constraint WeatherPS_TemperatureEQ ( ip : SysADL.types.WeatherStation )
					: ( t : SysADL.types.LocalTemperature ) {
						equation = t == 'ip.t' / 'ip.ct'
					}
				constraint WeatherPS_HumidityEQ ( ip : SysADL.types.WeatherStation ) : ( h
					: SysADL.types.Humidity ) {
						equation = h == 'ip.h' / 'ip.ct'
					}
					constraint WeatherPS_AtmPressureEQ ( ip : SysADL.types.WeatherStation )
					: ( ap : SysADL.types.AtmPressure ) {
						equation = ap == 'ip.p' / 'ip.ct'
					}
				constraint WSDataAggregatorEQ ( t : SysADL.types.LocalTemperature, h :
					SysADL.types.Humidity, ap : SysADL.types.AtmPressure, wsData :
					SysADL.types.WeatherStation ) : ( newWSData :
					SysADL.types.WeatherStation ) {
						equation = 'newWSData.t' == (t + 'wsData.t') && 'newWSData.h' == (h + 'wsData.h') && 'newWSData.p' == (ap + 'wsData.p') && 'newWSData.ct' == ('wsData.ct' + 1)
					}
				activity def WeatherProcessingSubSystemARCH3AC ( ip1 :
					SysADL.types.WeatherStation, ip2 : SysADL.types.WeatherStation ) : ( tp :
					SysADL.types.LocalTemperature, hp : SysADL.types.Humidity, ap :
					SysADL.types.AtmPressure ) {
						body {
						actions : wpst : WeatherPS_TemperatureARCH3AN {
								using pins ip1 : SysADL.types.WeatherStation ip2 :
								SysADL.types.WeatherStation
							}
							wpsh : WeatherPS_HumidityARCH3AN {
								using pins ip1 : SysADL.types.WeatherStation ip2 :
								SysADL.types.WeatherStation
							}
							wpsap : WeatherPS_AtmPressureARCH3AN {
								using pins ip1 : SysADL.types.WeatherStation ip2 :
								SysADL.types.WeatherStation
							}
							delegate tp to wpst delegate hp to wpsh delegate ap to wpsap delegate
							ip1 to wpst.ip1 delegate ip1 to wpsh.ip1 delegate ip1 to wpsap.ip1
							delegate ip2 to wpsap.ip2 delegate ip2 to wpsh.ip2 delegate ip2 to
							wpst.ip2
						}
					}
					action def WeatherPS_TemperatureARCH3AN ( ip1 :
					SysADL.types.WeatherStation, ip2 : SysADL.types.WeatherStation ) :
					SysADL.types.LocalTemperature {
						post-condition WeatherPS_TemperatureARCH3EQ ( )
					delegate WeatherPS_TemperatureARCH3AN to WeatherPS_TemperatureARCH3EQ.t
						delegate ip1 to WeatherPS_TemperatureARCH3EQ.ip1 delegate ip2 to
						WeatherPS_TemperatureARCH3EQ.ip2
					}
					action def WeatherPS_HumidityARCH3AN ( ip1 : SysADL.types.WeatherStation,
					ip2 : SysADL.types.WeatherStation ) : SysADL.types.Humidity {
						post-condition WeatherPS_HumidityARCH3EQ ( )
					delegate ip1 to WeatherPS_HumidityARCH3EQ.ip1 delegate ip2 to
						WeatherPS_HumidityARCH3EQ.ip2 delegate WeatherPS_HumidityARCH3AN to
						WeatherPS_HumidityARCH3EQ.h
					}
					action def WeatherPS_AtmPressureARCH3AN ( ip1 :
					SysADL.types.WeatherStation, ip2 : SysADL.types.WeatherStation ) :
					SysADL.types.AtmPressure {
						post-condition WeatherPS_AtmPressureARCH3EQ ( )
					delegate ip1 to WeatherPS_AtmPressureARCH3EQ.ip1 delegate ip2 to
						WeatherPS_AtmPressureARCH3EQ.ip2 delegate WeatherPS_AtmPressureARCH3AN to
						WeatherPS_AtmPressureARCH3EQ.ap
					}
					constraint WeatherPS_TemperatureARCH3EQ ( ip1 :
					SysADL.types.WeatherStation, ip2 : SysADL.types.WeatherStation ) : ( t :
					SysADL.types.LocalTemperature ) {
						equation = t == (('ip1.t' / 'ip1.ct') + ('ip2.t' / 'ip2.ct')) / 2
					}
					constraint WeatherPS_HumidityARCH3EQ ( ip1 : SysADL.types.WeatherStation,
					ip2 : SysADL.types.WeatherStation ) : ( h : SysADL.types.Humidity ) {
						equation = h == (('ip1.h' / 'ip1.ct') + ('ip2.h' / 'ip2.ct')) / 2
					}
					constraint WeatherPS_AtmPressureARCH3EQ ( ip1 :
					SysADL.types.WeatherStation, ip2 : SysADL.types.WeatherStation ) : ( ap :
					SysADL.types.AtmPressure ) {
						equation = ap == (('ip1.p' / 'ip1.ct') + ('ip2.p' / 'ip2.ct')) / 2
					}
					executable def WSDataAggregatorEX ( in t :
					SysADL.types.LocalTemperature, in wsData :
					SysADL.types.WeatherStation, in h : SysADL.types.Humidity, in ap :
					SysADL.types.AtmPressure ) : out SysADL.types.WeatherStation {
						'let newWS : SysADL.types.WeatherStation newWS.t = (t + wsData.t) newWS.h = (h + wsData.h) newWS.p = (ap + wsData.p) newWS.ct = (wsData.ct + 1)' return 'newWS'
					}
					executable def WeatherPS_TemperatureEX ( in ip :
					SysADL.types.WeatherStation ) : out SysADL.types.LocalTemperature {
						return 'ip.t' / 'ip.ct'
					}
					executable def WeatherPS_HumidityEX ( in ip :
					SysADL.types.WeatherStation ) : out SysADL.types.Humidity {
						return 'ip.h' / 'ip.ct'
					}
					executable def WeatherPS_AtmPressureEX ( in ip :
					SysADL.types.WeatherStation ) : out SysADL.types.AtmPressure {
						return 'ip.p' / 'ip.ct'
					}
					executable def WeatherPS_TemperatureARCH3EX ( in ip1 :
					SysADL.types.WeatherStation, in ip2 : SysADL.types.WeatherStation) : out SysADL.types.LocalTemperature {
						return (('ip1.t' / 'ip1.ct') + ('ip2.t' / 'ip2.ct')) / 2
					}
					executable def WeatherPS_HumidityARCH3EX ( in ip1 :
					SysADL.types.WeatherStation, in ip2 : SysADL.types.WeatherStation ) : out SysADL.types.Humidity {
						return (('ip1.h' / 'ip1.ct') + ('ip2.h' / 'ip2.ct')) / 2
					}
					executable def WeatherPS_AtmPressureARCH3EX ( in ip1 :
					SysADL.types.WeatherStation, in ip2 : SysADL.types.WeatherStation ) : out SysADL.types.AtmPressure {
						return (('ip1.p' / 'ip1.ct') + ('ip2.p' / 'ip2.ct')) / 2
					}
				}
				package ConnectorsWMS {
					import SysADL.types;
					import PortsWMS;
					connector def TemperatureCN {
						participants ~ t_out : PortsWMS.TemperatureOPT {
						}
						~ t_in : PortsWMS.TemperatureIPT {
						}
						flows SysADL.types.LocalTemperature from t_out to t_in
					}
					connector def HumidityCN {
						participants ~ h_out : PortsWMS.HumidityOPT {
						}
						~ h_in : PortsWMS.HumidityIPT {
						}
						flows SysADL.types.Humidity from h_out to h_in
					}
					connector def AtmPressureCN {
						participants ~ ap_out : PortsWMS.AtmPressureOPT {
						}
						~ ap_in : PortsWMS.AtmPressureIPT {
						}
						flows SysADL.types.AtmPressure from ap_out to ap_in
					}
					connector def WatherStationCN {
						participants ~ op : PortsWMS.WeatherStationOPT {
						}
						~ ip : PortsWMS.WeatherStationIPT {
						}
						flows SysADL.types.WeatherStation from op to ip
					}
					connector def FahrenheitToCelsiusCN {
					}
					connector def WatherStationCN_2 {
					participants ~ op : PortsWMS.WeatherStationOPT [ 1, -1 ] {
						}
						~ ip : PortsWMS.WeatherStationIPT {
						}
						configuration {
						}
					flows SysADL.types.WeatherStation from op to ip
					}
				}
				package PortsWMS {
					import SysADL.types;
					port def TemperatureIPT {
						flow in SysADL.types.LocalTemperature
					}
					port def TemperatureOPT {
						flow out SysADL.types.LocalTemperature
					}
					port def HumidityIPT {
						flow in SysADL.types.Humidity
					}
					port def HumidityOPT {
						flow out SysADL.types.Humidity
					}
					port def AtmPressureIPT {
						flow in SysADL.types.AtmPressure
					}
					port def AtmPressureOPT {
						flow out SysADL.types.AtmPressure
					}
					port def WeatherStationIPT {
						flow in SysADL.types.WeatherStation
					}
					port def WeatherStationOPT {
						flow out SysADL.types.WeatherStation
					}
				}