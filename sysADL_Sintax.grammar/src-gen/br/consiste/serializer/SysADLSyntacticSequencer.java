/*
 * generated by Xtext 2.10.0
 */
package br.consiste.serializer;

import br.consiste.services.SysADLGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SysADLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SysADLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionUse___UsingKeyword_5_0_PinsKeyword_5_1__q;
	protected AbstractElementAlias match_ActivityBody___ActionsKeyword_3_0_ColonKeyword_3_1__q;
	protected AbstractElementAlias match_ActivityDef___ConstraintKeyword_8_0_ColonKeyword_8_1__q;
	protected AbstractElementAlias match_ComponentDef_PortsKeyword_5_0_q;
	protected AbstractElementAlias match_ComponentUse___UsingKeyword_5_0_PortsKeyword_5_1__q;
	protected AbstractElementAlias match_Configuration___ComponentsKeyword_3_0_ColonKeyword_3_1__q;
	protected AbstractElementAlias match_Configuration___ConnectorsKeyword_4_0_ColonKeyword_4_1__q;
	protected AbstractElementAlias match_Configuration___DelegationsKeyword_5_0_ColonKeyword_5_1__q;
	protected AbstractElementAlias match_ConnectorDef_FlowsKeyword_6_0_q;
	protected AbstractElementAlias match_ConnectorDef_ParticipantsKeyword_4_0_q;
	protected AbstractElementAlias match_ConnectorUse___LeftCurlyBracketKeyword_5_0_PortsKeyword_5_1_RightCurlyBracketKeyword_5_4__q;
	protected AbstractElementAlias match_DataTypeDef_AttributesKeyword_5_0_q;
	protected AbstractElementAlias match_DimensionDef___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	protected AbstractElementAlias match_Protocol___DelegationsKeyword_6_0_ColonKeyword_6_1__q;
	protected AbstractElementAlias match_TypeUse_Impl___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SysADLGrammarAccess) access;
		match_ActionUse___UsingKeyword_5_0_PinsKeyword_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getActionUseAccess().getUsingKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getActionUseAccess().getPinsKeyword_5_1()));
		match_ActivityBody___ActionsKeyword_3_0_ColonKeyword_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getActivityBodyAccess().getActionsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getActivityBodyAccess().getColonKeyword_3_1()));
		match_ActivityDef___ConstraintKeyword_8_0_ColonKeyword_8_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getActivityDefAccess().getConstraintKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getActivityDefAccess().getColonKeyword_8_1()));
		match_ComponentDef_PortsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getComponentDefAccess().getPortsKeyword_5_0());
		match_ComponentUse___UsingKeyword_5_0_PortsKeyword_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getComponentUseAccess().getUsingKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getComponentUseAccess().getPortsKeyword_5_1()));
		match_Configuration___ComponentsKeyword_3_0_ColonKeyword_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getComponentsKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getColonKeyword_3_1()));
		match_Configuration___ConnectorsKeyword_4_0_ColonKeyword_4_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnectorsKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getColonKeyword_4_1()));
		match_Configuration___DelegationsKeyword_5_0_ColonKeyword_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getDelegationsKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getColonKeyword_5_1()));
		match_ConnectorDef_FlowsKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getConnectorDefAccess().getFlowsKeyword_6_0());
		match_ConnectorDef_ParticipantsKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getConnectorDefAccess().getParticipantsKeyword_4_0());
		match_ConnectorUse___LeftCurlyBracketKeyword_5_0_PortsKeyword_5_1_RightCurlyBracketKeyword_5_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConnectorUseAccess().getLeftCurlyBracketKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getConnectorUseAccess().getPortsKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getConnectorUseAccess().getRightCurlyBracketKeyword_5_4()));
		match_DataTypeDef_AttributesKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getDataTypeDefAccess().getAttributesKeyword_5_0());
		match_DimensionDef___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getDimensionDefAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getDimensionDefAccess().getRightCurlyBracketKeyword_3_2()));
		match_Protocol___DelegationsKeyword_6_0_ColonKeyword_6_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getProtocolAccess().getDelegationsKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getProtocolAccess().getColonKeyword_6_1()));
		match_TypeUse_Impl___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTypeUse_ImplAccess().getLeftCurlyBracketKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getTypeUse_ImplAccess().getRightCurlyBracketKeyword_3_2()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionUse___UsingKeyword_5_0_PinsKeyword_5_1__q.equals(syntax))
				emit_ActionUse___UsingKeyword_5_0_PinsKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ActivityBody___ActionsKeyword_3_0_ColonKeyword_3_1__q.equals(syntax))
				emit_ActivityBody___ActionsKeyword_3_0_ColonKeyword_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ActivityDef___ConstraintKeyword_8_0_ColonKeyword_8_1__q.equals(syntax))
				emit_ActivityDef___ConstraintKeyword_8_0_ColonKeyword_8_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComponentDef_PortsKeyword_5_0_q.equals(syntax))
				emit_ComponentDef_PortsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ComponentUse___UsingKeyword_5_0_PortsKeyword_5_1__q.equals(syntax))
				emit_ComponentUse___UsingKeyword_5_0_PortsKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___ComponentsKeyword_3_0_ColonKeyword_3_1__q.equals(syntax))
				emit_Configuration___ComponentsKeyword_3_0_ColonKeyword_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___ConnectorsKeyword_4_0_ColonKeyword_4_1__q.equals(syntax))
				emit_Configuration___ConnectorsKeyword_4_0_ColonKeyword_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___DelegationsKeyword_5_0_ColonKeyword_5_1__q.equals(syntax))
				emit_Configuration___DelegationsKeyword_5_0_ColonKeyword_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorDef_FlowsKeyword_6_0_q.equals(syntax))
				emit_ConnectorDef_FlowsKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorDef_ParticipantsKeyword_4_0_q.equals(syntax))
				emit_ConnectorDef_ParticipantsKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConnectorUse___LeftCurlyBracketKeyword_5_0_PortsKeyword_5_1_RightCurlyBracketKeyword_5_4__q.equals(syntax))
				emit_ConnectorUse___LeftCurlyBracketKeyword_5_0_PortsKeyword_5_1_RightCurlyBracketKeyword_5_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DataTypeDef_AttributesKeyword_5_0_q.equals(syntax))
				emit_DataTypeDef_AttributesKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DimensionDef___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_DimensionDef___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Protocol___DelegationsKeyword_6_0_ColonKeyword_6_1__q.equals(syntax))
				emit_Protocol___DelegationsKeyword_6_0_ColonKeyword_6_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeUse_Impl___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q.equals(syntax))
				emit_TypeUse_Impl___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('using' 'pins')?
	 *
	 * This ambiguous syntax occurs at:
	 *     definition=[ActionDef|QualifiedName] '{' (ambiguity) '}' (rule end)
	 *     definition=[ActionDef|QualifiedName] '{' (ambiguity) properties+=Property
	 */
	protected void emit_ActionUse___UsingKeyword_5_0_PinsKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('actions' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'body' '{' (ambiguity) '}' (rule start)
	 *     (rule start) 'body' '{' (ambiguity) dataObjects+=DataObject
	 *     (rule start) 'body' '{' (ambiguity) flows+=ActivityRelation
	 */
	protected void emit_ActivityBody___ActionsKeyword_3_0_ColonKeyword_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('constraint' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     behaDefs+=BehaviorDef (ambiguity) '}' (rule end)
	 *     behaDefs+=BehaviorDef (ambiguity) acbody=ActivityBody
	 *     behaDefs+=BehaviorDef (ambiguity) delegations+=ActivityDelegation
	 *     dataDefs+=DataDef (ambiguity) '}' (rule end)
	 *     dataDefs+=DataDef (ambiguity) acbody=ActivityBody
	 *     dataDefs+=DataDef (ambiguity) delegations+=ActivityDelegation
	 *     inParameters+=Pin ')' '{' (ambiguity) '}' (rule end)
	 *     inParameters+=Pin ')' '{' (ambiguity) acbody=ActivityBody
	 *     inParameters+=Pin ')' '{' (ambiguity) delegations+=ActivityDelegation
	 *     outParameters+=Pin '{' (ambiguity) '}' (rule end)
	 *     outParameters+=Pin '{' (ambiguity) acbody=ActivityBody
	 *     outParameters+=Pin '{' (ambiguity) delegations+=ActivityDelegation
	 *     properties+=Property (ambiguity) '}' (rule end)
	 *     properties+=Property (ambiguity) acbody=ActivityBody
	 *     properties+=Property (ambiguity) delegations+=ActivityDelegation
	 */
	protected void emit_ActivityDef___ConstraintKeyword_8_0_ColonKeyword_8_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'ports'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) '}' (rule end)
	 *     name=ID '{' (ambiguity) archDefs+=StructuralDef
	 *     name=ID '{' (ambiguity) composite=Configuration
	 *     name=ID '{' (ambiguity) dataDefs+=DataDef
	 *     name=ID '{' (ambiguity) properties+=Property
	 */
	protected void emit_ComponentDef_PortsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('using' 'ports')?
	 *
	 * This ambiguous syntax occurs at:
	 *     definition=[ComponentDef|QualifiedName] '{' (ambiguity) '}' (rule end)
	 *     definition=[ComponentDef|QualifiedName] '{' (ambiguity) properties+=Property
	 *     upperBound=EInt ']' '{' (ambiguity) '}' (rule end)
	 *     upperBound=EInt ']' '{' (ambiguity) properties+=Property
	 */
	protected void emit_ComponentUse___UsingKeyword_5_0_PortsKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('components' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'configuration' '{' (ambiguity) 'connectors' ':' connectors+=ConnectorUse
	 *     (rule start) 'configuration' '{' (ambiguity) ('connectors' ':')? 'delegations' ':' delegations+=Delegation
	 *     (rule start) 'configuration' '{' (ambiguity) ('connectors' ':')? ('delegations' ':')? '}' (rule start)
	 */
	protected void emit_Configuration___ComponentsKeyword_3_0_ColonKeyword_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('connectors' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'configuration' '{' ('components' ':')? (ambiguity) 'delegations' ':' delegations+=Delegation
	 *     (rule start) 'configuration' '{' ('components' ':')? (ambiguity) ('delegations' ':')? '}' (rule start)
	 *     components+=ComponentUse (ambiguity) 'delegations' ':' delegations+=Delegation
	 *     components+=ComponentUse (ambiguity) ('delegations' ':')? '}' (rule end)
	 */
	protected void emit_Configuration___ConnectorsKeyword_4_0_ColonKeyword_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('delegations' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'configuration' '{' ('components' ':')? ('connectors' ':')? (ambiguity) '}' (rule start)
	 *     components+=ComponentUse ('connectors' ':')? (ambiguity) '}' (rule end)
	 *     connectors+=ConnectorUse (ambiguity) '}' (rule end)
	 */
	protected void emit_Configuration___DelegationsKeyword_5_0_ColonKeyword_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'flows'?
	 *
	 * This ambiguous syntax occurs at:
	 *     composite=Configuration (ambiguity) '}' (rule end)
	 *     composite=Configuration (ambiguity) archDefs+=StructuralDef
	 *     composite=Configuration (ambiguity) dataDefs+=DataDef
	 *     composite=Configuration (ambiguity) properties+=Property
	 *     name=ID '{' 'participants'? (ambiguity) '}' (rule end)
	 *     name=ID '{' 'participants'? (ambiguity) archDefs+=StructuralDef
	 *     name=ID '{' 'participants'? (ambiguity) dataDefs+=DataDef
	 *     name=ID '{' 'participants'? (ambiguity) properties+=Property
	 *     ports+=PortUse_Reverse (ambiguity) '}' (rule end)
	 *     ports+=PortUse_Reverse (ambiguity) archDefs+=StructuralDef
	 *     ports+=PortUse_Reverse (ambiguity) dataDefs+=DataDef
	 *     ports+=PortUse_Reverse (ambiguity) properties+=Property
	 */
	protected void emit_ConnectorDef_FlowsKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'participants'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) 'flows' flows+=Flow
	 *     name=ID '{' (ambiguity) 'flows'? '}' (rule end)
	 *     name=ID '{' (ambiguity) 'flows'? archDefs+=StructuralDef
	 *     name=ID '{' (ambiguity) 'flows'? dataDefs+=DataDef
	 *     name=ID '{' (ambiguity) 'flows'? properties+=Property
	 *     name=ID '{' (ambiguity) composite=Configuration
	 */
	protected void emit_ConnectorDef_ParticipantsKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' 'ports' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     bindings+=ConnectorBinding (ambiguity) (rule end)
	 *     definition=[ConnectorDef|QualifiedName] (ambiguity) (rule end)
	 *     upperBound=EInt ']' (ambiguity) (rule end)
	 */
	protected void emit_ConnectorUse___LeftCurlyBracketKeyword_5_0_PortsKeyword_5_1_RightCurlyBracketKeyword_5_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'attributes'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) '}' (rule end)
	 *     name=ID '{' (ambiguity) properties+=Property
	 *     superType=[DataTypeDef|QualifiedName] '{' (ambiguity) '}' (rule end)
	 *     superType=[DataTypeDef|QualifiedName] '{' (ambiguity) properties+=Property
	 */
	protected void emit_DataTypeDef_AttributesKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_DimensionDef___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('delegations' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataDefs+=DataDef (ambiguity) body=ProtocolBody
	 *     inParameters+=Pin ')' '{' (ambiguity) body=ProtocolBody
	 *     outParameters+=Pin '{' (ambiguity) body=ProtocolBody
	 */
	protected void emit_Protocol___DelegationsKeyword_6_0_ColonKeyword_6_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     definition=[TypeDef|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_TypeUse_Impl___LeftCurlyBracketKeyword_3_0_RightCurlyBracketKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
