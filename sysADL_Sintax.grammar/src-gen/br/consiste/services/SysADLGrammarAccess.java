/*
 * generated by Xtext 2.10.0
 */
package br.consiste.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SysADLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUsingKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInvolvedElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInvolvedElementsElementDefCrossReference_4_1_0 = (CrossReference)cInvolvedElementsAssignment_4_1.eContents().get(0);
		private final RuleCall cInvolvedElementsElementDefQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cInvolvedElementsElementDefCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0_0 = (RuleCall)cPropertiesAssignment_5_0.eContents().get(0);
		private final Assignment cPackagesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_5_1_0 = (RuleCall)cPackagesAssignment_5_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cRequirementsRequirementParserRuleCall_5_2_0 = (RuleCall)cRequirementsAssignment_5_2.eContents().get(0);
		private final Assignment cAllocationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAllocationAllocationTableParserRuleCall_6_0 = (RuleCall)cAllocationAssignment_6.eContents().get(0);
		
		/// *
		// * Common Elements
		// * / Model:
		//	{Model}
		//	'Model' name=ID ';' ('using' involvedElements+=[ElementDef|QualifiedName] ';')* (properties+=Property
		//	| packages+=Package
		//	| requirements+=Requirement)*
		//	allocation=AllocationTable?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'Model' name=ID ';' ('using' involvedElements+=[ElementDef|QualifiedName] ';')* (properties+=Property |
		//packages+=Package | requirements+=Requirement)* allocation=AllocationTable?
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'Model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//('using' involvedElements+=[ElementDef|QualifiedName] ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'using'
		public Keyword getUsingKeyword_4_0() { return cUsingKeyword_4_0; }
		
		//involvedElements+=[ElementDef|QualifiedName]
		public Assignment getInvolvedElementsAssignment_4_1() { return cInvolvedElementsAssignment_4_1; }
		
		//[ElementDef|QualifiedName]
		public CrossReference getInvolvedElementsElementDefCrossReference_4_1_0() { return cInvolvedElementsElementDefCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getInvolvedElementsElementDefQualifiedNameParserRuleCall_4_1_0_1() { return cInvolvedElementsElementDefQualifiedNameParserRuleCall_4_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
		
		//(properties+=Property | packages+=Package | requirements+=Requirement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_0() { return cPropertiesAssignment_5_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0_0() { return cPropertiesPropertyParserRuleCall_5_0_0; }
		
		//packages+=Package
		public Assignment getPackagesAssignment_5_1() { return cPackagesAssignment_5_1; }
		
		//Package
		public RuleCall getPackagesPackageParserRuleCall_5_1_0() { return cPackagesPackageParserRuleCall_5_1_0; }
		
		//requirements+=Requirement
		public Assignment getRequirementsAssignment_5_2() { return cRequirementsAssignment_5_2; }
		
		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_5_2_0() { return cRequirementsRequirementParserRuleCall_5_2_0; }
		
		//allocation=AllocationTable?
		public Assignment getAllocationAssignment_6() { return cAllocationAssignment_6; }
		
		//AllocationTable
		public RuleCall getAllocationAllocationTableParserRuleCall_6_0() { return cAllocationAllocationTableParserRuleCall_6_0; }
	}
	public class ElementDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ElementDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimensionDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueTypeDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cComponentDefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConnectorDefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCompositePortDefParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSimplePortDefParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cActionDefParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cActivityDefParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cProtocolParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cConstraintDefParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cExecutableParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//ElementDef:
		//	DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration | ComponentDef | ConnectorDef | CompositePortDef |
		//	SimplePortDef | ActionDef | ActivityDef | Protocol | ConstraintDef | Executable;
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration | ComponentDef | ConnectorDef | CompositePortDef |
		//SimplePortDef | ActionDef | ActivityDef | Protocol | ConstraintDef | Executable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_0() { return cDataTypeDefParserRuleCall_0; }
		
		//DimensionDef
		public RuleCall getDimensionDefParserRuleCall_1() { return cDimensionDefParserRuleCall_1; }
		
		//UnitDef
		public RuleCall getUnitDefParserRuleCall_2() { return cUnitDefParserRuleCall_2; }
		
		//ValueTypeDef
		public RuleCall getValueTypeDefParserRuleCall_3() { return cValueTypeDefParserRuleCall_3; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }
		
		//ComponentDef
		public RuleCall getComponentDefParserRuleCall_5() { return cComponentDefParserRuleCall_5; }
		
		//ConnectorDef
		public RuleCall getConnectorDefParserRuleCall_6() { return cConnectorDefParserRuleCall_6; }
		
		//CompositePortDef
		public RuleCall getCompositePortDefParserRuleCall_7() { return cCompositePortDefParserRuleCall_7; }
		
		//SimplePortDef
		public RuleCall getSimplePortDefParserRuleCall_8() { return cSimplePortDefParserRuleCall_8; }
		
		//ActionDef
		public RuleCall getActionDefParserRuleCall_9() { return cActionDefParserRuleCall_9; }
		
		//ActivityDef
		public RuleCall getActivityDefParserRuleCall_10() { return cActivityDefParserRuleCall_10; }
		
		//Protocol
		public RuleCall getProtocolParserRuleCall_11() { return cProtocolParserRuleCall_11; }
		
		//ConstraintDef
		public RuleCall getConstraintDefParserRuleCall_12() { return cConstraintDefParserRuleCall_12; }
		
		//Executable
		public RuleCall getExecutableParserRuleCall_13() { return cExecutableParserRuleCall_13; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeDef:
		//	DataTypeDef | ValueTypeDef | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeDef | ValueTypeDef | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_0() { return cDataTypeDefParserRuleCall_0; }
		
		//ValueTypeDef
		public RuleCall getValueTypeDefParserRuleCall_1() { return cValueTypeDefParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}
	public class TypeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.TypeUse");
		private final RuleCall cTypeUse_ImplParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeUse:
		//	TypeUse_Impl;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeUse_Impl
		public RuleCall getTypeUse_ImplParserRuleCall() { return cTypeUse_ImplParserRuleCall; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDimensionDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTypeUse_ImplParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUnitDefParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cValueTypeDefParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEnumerationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cArchitectureDefParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cComponentUseParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cConnectorDefParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cConnectorUseParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cCompositePortDefParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSimplePortDefParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cPortUseParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cActionDefParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cActionUseParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cActivityDefParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cDataStoreParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cDataBufferParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		private final RuleCall cProtocolParserRuleCall_20 = (RuleCall)cAlternatives.eContents().get(20);
		private final RuleCall cConstraintDefParserRuleCall_21 = (RuleCall)cAlternatives.eContents().get(21);
		private final RuleCall cExecutableParserRuleCall_22 = (RuleCall)cAlternatives.eContents().get(22);
		private final RuleCall cRequirementParserRuleCall_23 = (RuleCall)cAlternatives.eContents().get(23);
		
		//NamedElement:
		//	Package | Model | DataTypeDef | DimensionDef | TypeUse_Impl | UnitDef | ValueTypeDef | Enumeration | ArchitectureDef
		//	| ComponentUse | ConnectorDef | ConnectorUse | CompositePortDef | SimplePortDef | PortUse | ActionDef | ActionUse |
		//	ActivityDef | DataStore | DataBuffer | Protocol | ConstraintDef | Executable | Requirement;
		@Override public ParserRule getRule() { return rule; }
		
		//Package | Model | DataTypeDef | DimensionDef | TypeUse_Impl | UnitDef | ValueTypeDef | Enumeration | ArchitectureDef |
		//ComponentUse | ConnectorDef | ConnectorUse | CompositePortDef | SimplePortDef | PortUse | ActionDef | ActionUse |
		//ActivityDef | DataStore | DataBuffer | Protocol | ConstraintDef | Executable | Requirement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//Model
		public RuleCall getModelParserRuleCall_1() { return cModelParserRuleCall_1; }
		
		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_2() { return cDataTypeDefParserRuleCall_2; }
		
		//DimensionDef
		public RuleCall getDimensionDefParserRuleCall_3() { return cDimensionDefParserRuleCall_3; }
		
		//TypeUse_Impl
		public RuleCall getTypeUse_ImplParserRuleCall_4() { return cTypeUse_ImplParserRuleCall_4; }
		
		//UnitDef
		public RuleCall getUnitDefParserRuleCall_5() { return cUnitDefParserRuleCall_5; }
		
		//ValueTypeDef
		public RuleCall getValueTypeDefParserRuleCall_6() { return cValueTypeDefParserRuleCall_6; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_7() { return cEnumerationParserRuleCall_7; }
		
		//ArchitectureDef
		public RuleCall getArchitectureDefParserRuleCall_8() { return cArchitectureDefParserRuleCall_8; }
		
		//ComponentUse
		public RuleCall getComponentUseParserRuleCall_9() { return cComponentUseParserRuleCall_9; }
		
		//ConnectorDef
		public RuleCall getConnectorDefParserRuleCall_10() { return cConnectorDefParserRuleCall_10; }
		
		//ConnectorUse
		public RuleCall getConnectorUseParserRuleCall_11() { return cConnectorUseParserRuleCall_11; }
		
		//CompositePortDef
		public RuleCall getCompositePortDefParserRuleCall_12() { return cCompositePortDefParserRuleCall_12; }
		
		//SimplePortDef
		public RuleCall getSimplePortDefParserRuleCall_13() { return cSimplePortDefParserRuleCall_13; }
		
		//PortUse
		public RuleCall getPortUseParserRuleCall_14() { return cPortUseParserRuleCall_14; }
		
		//ActionDef
		public RuleCall getActionDefParserRuleCall_15() { return cActionDefParserRuleCall_15; }
		
		//ActionUse
		public RuleCall getActionUseParserRuleCall_16() { return cActionUseParserRuleCall_16; }
		
		//ActivityDef
		public RuleCall getActivityDefParserRuleCall_17() { return cActivityDefParserRuleCall_17; }
		
		//DataStore
		public RuleCall getDataStoreParserRuleCall_18() { return cDataStoreParserRuleCall_18; }
		
		//DataBuffer
		public RuleCall getDataBufferParserRuleCall_19() { return cDataBufferParserRuleCall_19; }
		
		//Protocol
		public RuleCall getProtocolParserRuleCall_20() { return cProtocolParserRuleCall_20; }
		
		//ConstraintDef
		public RuleCall getConstraintDefParserRuleCall_21() { return cConstraintDefParserRuleCall_21; }
		
		//Executable
		public RuleCall getExecutableParserRuleCall_22() { return cExecutableParserRuleCall_22; }
		
		//Requirement
		public RuleCall getRequirementParserRuleCall_23() { return cRequirementParserRuleCall_23; }
	}
	public class StructuralDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.StructuralDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConnectorDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositePortDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSimplePortDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//StructuralDef:
		//	ComponentDef | ConnectorDef | CompositePortDef | SimplePortDef;
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentDef | ConnectorDef | CompositePortDef | SimplePortDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentDef
		public RuleCall getComponentDefParserRuleCall_0() { return cComponentDefParserRuleCall_0; }
		
		//ConnectorDef
		public RuleCall getConnectorDefParserRuleCall_1() { return cConnectorDefParserRuleCall_1; }
		
		//CompositePortDef
		public RuleCall getCompositePortDefParserRuleCall_2() { return cCompositePortDefParserRuleCall_2; }
		
		//SimplePortDef
		public RuleCall getSimplePortDefParserRuleCall_3() { return cSimplePortDefParserRuleCall_3; }
	}
	public class DataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DataDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimensionDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnitDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueTypeDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEnumerationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DataDef:
		//	DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_0() { return cDataTypeDefParserRuleCall_0; }
		
		//DimensionDef
		public RuleCall getDimensionDefParserRuleCall_1() { return cDimensionDefParserRuleCall_1; }
		
		//UnitDef
		public RuleCall getUnitDefParserRuleCall_2() { return cUnitDefParserRuleCall_2; }
		
		//ValueTypeDef
		public RuleCall getValueTypeDefParserRuleCall_3() { return cValueTypeDefParserRuleCall_3; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_4() { return cEnumerationParserRuleCall_4; }
	}
	public class ComponentDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ComponentDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsBoundaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsBoundaryBoundaryKeyword_0_0 = (Keyword)cIsBoundaryAssignment_0.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPortsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPortsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPortsPortUseParserRuleCall_5_1_0 = (RuleCall)cPortsAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0_0 = (RuleCall)cPropertiesAssignment_6_0.eContents().get(0);
		private final Assignment cArchDefsAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cArchDefsStructuralDefParserRuleCall_6_1_0 = (RuleCall)cArchDefsAssignment_6_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_6_2_0 = (RuleCall)cDataDefsAssignment_6_2.eContents().get(0);
		private final Assignment cCompositeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompositeConfigurationParserRuleCall_7_0 = (RuleCall)cCompositeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ComponentDef:
		//	isBoundary?='boundary'? 'component' 'def' name=ID
		//	'{' ('ports' ports+=PortUse*)? (properties+=Property
		//	| archDefs+=StructuralDef
		//	| dataDefs+=DataDef)*
		//	composite=Configuration?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isBoundary?='boundary'? 'component' 'def' name=ID '{' ('ports' ports+=PortUse*)? (properties+=Property |
		//archDefs+=StructuralDef | dataDefs+=DataDef)* composite=Configuration? '}'
		public Group getGroup() { return cGroup; }
		
		//isBoundary?='boundary'?
		public Assignment getIsBoundaryAssignment_0() { return cIsBoundaryAssignment_0; }
		
		//'boundary'
		public Keyword getIsBoundaryBoundaryKeyword_0_0() { return cIsBoundaryBoundaryKeyword_0_0; }
		
		//'component'
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//'def'
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('ports' ports+=PortUse*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'ports'
		public Keyword getPortsKeyword_5_0() { return cPortsKeyword_5_0; }
		
		//ports+=PortUse*
		public Assignment getPortsAssignment_5_1() { return cPortsAssignment_5_1; }
		
		//PortUse
		public RuleCall getPortsPortUseParserRuleCall_5_1_0() { return cPortsPortUseParserRuleCall_5_1_0; }
		
		//(properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_0() { return cPropertiesAssignment_6_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0_0() { return cPropertiesPropertyParserRuleCall_6_0_0; }
		
		//archDefs+=StructuralDef
		public Assignment getArchDefsAssignment_6_1() { return cArchDefsAssignment_6_1; }
		
		//StructuralDef
		public RuleCall getArchDefsStructuralDefParserRuleCall_6_1_0() { return cArchDefsStructuralDefParserRuleCall_6_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_6_2() { return cDataDefsAssignment_6_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_6_2_0() { return cDataDefsDataDefParserRuleCall_6_2_0; }
		
		//composite=Configuration?
		public Assignment getCompositeAssignment_7() { return cCompositeAssignment_7; }
		
		//Configuration
		public RuleCall getCompositeConfigurationParserRuleCall_7_0() { return cCompositeConfigurationParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ArchitectureDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ArchitectureDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPortsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortsPortUseParserRuleCall_5_0 = (RuleCall)cPortsAssignment_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Assignment cCompositeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCompositeConfigurationParserRuleCall_7_0 = (RuleCall)cCompositeAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ArchitectureDef ComponentDef: // alternatively, a component might be an architecture 
		//	'architecture' 'def' name=ID '{' 'ports' ports+=PortUse* properties+=Property* composite=Configuration '}'
		@Override public ParserRule getRule() { return rule; }
		
		//// alternatively, a component might be an architecture 
		//'architecture' 'def' name=ID '{' 'ports' ports+=PortUse* properties+=Property* composite=Configuration '}'
		public Group getGroup() { return cGroup; }
		
		//// alternatively, a component might be an architecture 
		//'architecture'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'ports'
		public Keyword getPortsKeyword_4() { return cPortsKeyword_4; }
		
		//ports+=PortUse*
		public Assignment getPortsAssignment_5() { return cPortsAssignment_5; }
		
		//PortUse
		public RuleCall getPortsPortUseParserRuleCall_5_0() { return cPortsPortUseParserRuleCall_5_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//composite=Configuration
		public Assignment getCompositeAssignment_7() { return cCompositeAssignment_7; }
		
		//Configuration
		public RuleCall getCompositeConfigurationParserRuleCall_7_0() { return cCompositeConfigurationParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PortDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.PortDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCompositePortDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimplePortDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PortDef:
		//	CompositePortDef | SimplePortDef;
		@Override public ParserRule getRule() { return rule; }
		
		//CompositePortDef | SimplePortDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CompositePortDef
		public RuleCall getCompositePortDefParserRuleCall_0() { return cCompositePortDefParserRuleCall_0; }
		
		//SimplePortDef
		public RuleCall getSimplePortDefParserRuleCall_1() { return cSimplePortDefParserRuleCall_1; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Pin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPinAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsFlowAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsFlowFlowKeyword_3_0 = (Keyword)cIsFlowAssignment_3.eContents().get(0);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDefinitionTypeDefCrossReference_4_0 = (CrossReference)cDefinitionAssignment_4.eContents().get(0);
		private final RuleCall cDefinitionTypeDefQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cDefinitionTypeDefCrossReference_4_0.eContents().get(1);
		
		//Pin:
		//	{Pin} name=ID ':' isFlow?='flow'? definition=[TypeDef|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{Pin} name=ID ':' isFlow?='flow'? definition=[TypeDef|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{Pin}
		public Action getPinAction_0() { return cPinAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//isFlow?='flow'?
		public Assignment getIsFlowAssignment_3() { return cIsFlowAssignment_3; }
		
		//'flow'
		public Keyword getIsFlowFlowKeyword_3_0() { return cIsFlowFlowKeyword_3_0; }
		
		//definition=[TypeDef|QualifiedName]
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getDefinitionTypeDefCrossReference_4_0() { return cDefinitionTypeDefCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getDefinitionTypeDefQualifiedNameParserRuleCall_4_0_1() { return cDefinitionTypeDefQualifiedNameParserRuleCall_4_0_1; }
	}
	public class BehaviorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.BehaviorDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActivityDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtocolParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActionDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BehaviorDef:
		//	ActivityDef | Protocol | ConstraintDef | ActionDef;
		@Override public ParserRule getRule() { return rule; }
		
		//ActivityDef | Protocol | ConstraintDef | ActionDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActivityDef
		public RuleCall getActivityDefParserRuleCall_0() { return cActivityDefParserRuleCall_0; }
		
		//Protocol
		public RuleCall getProtocolParserRuleCall_1() { return cProtocolParserRuleCall_1; }
		
		//ConstraintDef
		public RuleCall getConstraintDefParserRuleCall_2() { return cConstraintDefParserRuleCall_2; }
		
		//ActionDef
		public RuleCall getActionDefParserRuleCall_3() { return cActionDefParserRuleCall_3; }
	}
	public class ActivityFlowableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityFlowable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActivitySwitchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataStoreParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataBufferParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ActivityFlowable:
		//	ActionUse | ActivitySwitch | DataStore | DataBuffer;
		@Override public ParserRule getRule() { return rule; }
		
		//ActionUse | ActivitySwitch | DataStore | DataBuffer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActionUse
		public RuleCall getActionUseParserRuleCall_0() { return cActionUseParserRuleCall_0; }
		
		//ActivitySwitch
		public RuleCall getActivitySwitchParserRuleCall_1() { return cActivitySwitchParserRuleCall_1; }
		
		//DataStore
		public RuleCall getDataStoreParserRuleCall_2() { return cDataStoreParserRuleCall_2; }
		
		//DataBuffer
		public RuleCall getDataBufferParserRuleCall_3() { return cDataBufferParserRuleCall_3; }
	}
	public class ActionUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActionUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionActionDefCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionActionDefQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionActionDefCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPinsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPinInAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPinInPinParserRuleCall_5_2_0 = (RuleCall)cPinInAssignment_5_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ActionUse:
		//	{ActionUse} name=ID ':' definition=[ActionDef|QualifiedName] '{' ('using' 'pins' pinIn+=Pin*)?
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionUse} name=ID ':' definition=[ActionDef|QualifiedName] '{' ('using' 'pins' pinIn+=Pin*)? properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//{ActionUse}
		public Action getActionUseAction_0() { return cActionUseAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=[ActionDef|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//[ActionDef|QualifiedName]
		public CrossReference getDefinitionActionDefCrossReference_3_0() { return cDefinitionActionDefCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getDefinitionActionDefQualifiedNameParserRuleCall_3_0_1() { return cDefinitionActionDefQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('using' 'pins' pinIn+=Pin*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//'pins'
		public Keyword getPinsKeyword_5_1() { return cPinsKeyword_5_1; }
		
		//pinIn+=Pin*
		public Assignment getPinInAssignment_5_2() { return cPinInAssignment_5_2; }
		
		//Pin
		public RuleCall getPinInPinParserRuleCall_5_2_0() { return cPinInPinParserRuleCall_5_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ActivityRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityRelation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActivityDelegationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActivityFlowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ActivityRelation:
		//	ActivityDelegation | ActivityFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//ActivityDelegation | ActivityFlow
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ActivityDelegation
		public RuleCall getActivityDelegationParserRuleCall_0() { return cActivityDelegationParserRuleCall_0; }
		
		//ActivityFlow
		public RuleCall getActivityFlowParserRuleCall_1() { return cActivityFlowParserRuleCall_1; }
	}
	public class DataObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DataObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataStoreParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataBufferParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataObject:
		//	DataStore | DataBuffer;
		@Override public ParserRule getRule() { return rule; }
		
		//DataStore | DataBuffer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataStore
		public RuleCall getDataStoreParserRuleCall_0() { return cDataStoreParserRuleCall_0; }
		
		//DataBuffer
		public RuleCall getDataBufferParserRuleCall_1() { return cDataBufferParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPropertyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTypeTypeDefCrossReference_3_1_0 = (CrossReference)cTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cTypeTypeDefQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cTypeTypeDefCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Property:
		//	{Property}
		//	'property' name=ID (':' type=[TypeDef|QualifiedName])? ('=' value=Expression)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Property} 'property' name=ID (':' type=[TypeDef|QualifiedName])? ('=' value=Expression)? ';'
		public Group getGroup() { return cGroup; }
		
		//{Property}
		public Action getPropertyAction_0() { return cPropertyAction_0; }
		
		//'property'
		public Keyword getPropertyKeyword_1() { return cPropertyKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' type=[TypeDef|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=[TypeDef|QualifiedName]
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getTypeTypeDefCrossReference_3_1_0() { return cTypeTypeDefCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeDefQualifiedNameParserRuleCall_3_1_0_1() { return cTypeTypeDefQualifiedNameParserRuleCall_3_1_0_1; }
		
		//('=' value=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//value=Expression
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_1_0() { return cValueExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImportKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImportsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cImportsPackageCrossReference_4_1_0 = (CrossReference)cImportsAssignment_4_1.eContents().get(0);
		private final RuleCall cImportsPackageQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cImportsPackageCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElementImportsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cElementImportsElementDefCrossReference_5_1_0 = (CrossReference)cElementImportsAssignment_5_1.eContents().get(0);
		private final RuleCall cElementImportsElementDefQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cElementImportsElementDefCrossReference_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0_0 = (RuleCall)cPropertiesAssignment_6_0.eContents().get(0);
		private final Assignment cArchitecturesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cArchitecturesElementDefParserRuleCall_6_1_0 = (RuleCall)cArchitecturesAssignment_6_1.eContents().get(0);
		private final Assignment cArchitecturesAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cArchitecturesArchitectureDefParserRuleCall_6_2_0 = (RuleCall)cArchitecturesAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Package:
		//	{Package}
		//	'package' name=QualifiedName '{' ('import' imports+=[Package|QualifiedName] ';')* ('using'
		//	elementImports+=[ElementDef|QualifiedName] ';')* (properties+=Property
		//	| architectures+=ElementDef
		//	| architectures+=ArchitectureDef)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} 'package' name=QualifiedName '{' ('import' imports+=[Package|QualifiedName] ';')* ('using'
		//elementImports+=[ElementDef|QualifiedName] ';')* (properties+=Property | architectures+=ElementDef |
		//architectures+=ArchitectureDef)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('import' imports+=[Package|QualifiedName] ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'import'
		public Keyword getImportKeyword_4_0() { return cImportKeyword_4_0; }
		
		//imports+=[Package|QualifiedName]
		public Assignment getImportsAssignment_4_1() { return cImportsAssignment_4_1; }
		
		//[Package|QualifiedName]
		public CrossReference getImportsPackageCrossReference_4_1_0() { return cImportsPackageCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getImportsPackageQualifiedNameParserRuleCall_4_1_0_1() { return cImportsPackageQualifiedNameParserRuleCall_4_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
		
		//('using' elementImports+=[ElementDef|QualifiedName] ';')*
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//elementImports+=[ElementDef|QualifiedName]
		public Assignment getElementImportsAssignment_5_1() { return cElementImportsAssignment_5_1; }
		
		//[ElementDef|QualifiedName]
		public CrossReference getElementImportsElementDefCrossReference_5_1_0() { return cElementImportsElementDefCrossReference_5_1_0; }
		
		//QualifiedName
		public RuleCall getElementImportsElementDefQualifiedNameParserRuleCall_5_1_0_1() { return cElementImportsElementDefQualifiedNameParserRuleCall_5_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }
		
		//(properties+=Property | architectures+=ElementDef | architectures+=ArchitectureDef)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_0() { return cPropertiesAssignment_6_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0_0() { return cPropertiesPropertyParserRuleCall_6_0_0; }
		
		//architectures+=ElementDef
		public Assignment getArchitecturesAssignment_6_1() { return cArchitecturesAssignment_6_1; }
		
		//ElementDef
		public RuleCall getArchitecturesElementDefParserRuleCall_6_1_0() { return cArchitecturesElementDefParserRuleCall_6_1_0; }
		
		//architectures+=ArchitectureDef
		public Assignment getArchitecturesAssignment_6_2() { return cArchitecturesAssignment_6_2; }
		
		//ArchitectureDef
		public RuleCall getArchitecturesArchitectureDefParserRuleCall_6_2_0() { return cArchitecturesArchitectureDefParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequirementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdEFloatParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cTextKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cTextAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cTextEStringParserRuleCall_6_2_0 = (RuleCall)cTextAssignment_6_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSatisfiedByKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSatisfiedByAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cSatisfiedByElementDefCrossReference_7_1_0 = (CrossReference)cSatisfiedByAssignment_7_1.eContents().get(0);
		private final RuleCall cSatisfiedByElementDefQualifiedNameParserRuleCall_7_1_0_1 = (RuleCall)cSatisfiedByElementDefCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cSatisfiedByAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cSatisfiedByElementDefCrossReference_7_2_1_0 = (CrossReference)cSatisfiedByAssignment_7_2_1.eContents().get(0);
		private final RuleCall cSatisfiedByElementDefQualifiedNameParserRuleCall_7_2_1_0_1 = (RuleCall)cSatisfiedByElementDefCrossReference_7_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDeriveKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDerivedByAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cDerivedByRequirementCrossReference_8_1_0 = (CrossReference)cDerivedByAssignment_8_1.eContents().get(0);
		private final RuleCall cDerivedByRequirementQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cDerivedByRequirementCrossReference_8_1_0.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Keyword cCommaKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cDerivedByAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final CrossReference cDerivedByRequirementCrossReference_8_2_1_0 = (CrossReference)cDerivedByAssignment_8_2_1.eContents().get(0);
		private final RuleCall cDerivedByRequirementQualifiedNameParserRuleCall_8_2_1_0_1 = (RuleCall)cDerivedByRequirementCrossReference_8_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cPropertiesAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_9_0_0 = (RuleCall)cPropertiesAssignment_9_0.eContents().get(0);
		private final Assignment cCompositionAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cCompositionRequirementParserRuleCall_9_1_0 = (RuleCall)cCompositionAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Requirement:
		//	'Requirement' name=ID '(' id=EFloat ')'
		//	'{' ('text' '=' text=EString)? ('satisfiedBy' satisfiedBy+=[ElementDef|QualifiedName] (","
		//	satisfiedBy+=[ElementDef|QualifiedName])* ';')? ('derive' derivedBy+=[Requirement|QualifiedName] (","
		//	derivedBy+=[Requirement|QualifiedName])* ';')? (properties+=Property
		//	| composition+=Requirement)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Requirement' name=ID '(' id=EFloat ')' '{' ('text' '=' text=EString)? ('satisfiedBy'
		//satisfiedBy+=[ElementDef|QualifiedName] ("," satisfiedBy+=[ElementDef|QualifiedName])* ';')? ('derive'
		//derivedBy+=[Requirement|QualifiedName] ("," derivedBy+=[Requirement|QualifiedName])* ';')? (properties+=Property |
		//composition+=Requirement)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Requirement'
		public Keyword getRequirementKeyword_0() { return cRequirementKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//id=EFloat
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//EFloat
		public RuleCall getIdEFloatParserRuleCall_3_0() { return cIdEFloatParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('text' '=' text=EString)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'text'
		public Keyword getTextKeyword_6_0() { return cTextKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//text=EString
		public Assignment getTextAssignment_6_2() { return cTextAssignment_6_2; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_6_2_0() { return cTextEStringParserRuleCall_6_2_0; }
		
		//('satisfiedBy' satisfiedBy+=[ElementDef|QualifiedName] ("," satisfiedBy+=[ElementDef|QualifiedName])* ';')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'satisfiedBy'
		public Keyword getSatisfiedByKeyword_7_0() { return cSatisfiedByKeyword_7_0; }
		
		//satisfiedBy+=[ElementDef|QualifiedName]
		public Assignment getSatisfiedByAssignment_7_1() { return cSatisfiedByAssignment_7_1; }
		
		//[ElementDef|QualifiedName]
		public CrossReference getSatisfiedByElementDefCrossReference_7_1_0() { return cSatisfiedByElementDefCrossReference_7_1_0; }
		
		//QualifiedName
		public RuleCall getSatisfiedByElementDefQualifiedNameParserRuleCall_7_1_0_1() { return cSatisfiedByElementDefQualifiedNameParserRuleCall_7_1_0_1; }
		
		//("," satisfiedBy+=[ElementDef|QualifiedName])*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//satisfiedBy+=[ElementDef|QualifiedName]
		public Assignment getSatisfiedByAssignment_7_2_1() { return cSatisfiedByAssignment_7_2_1; }
		
		//[ElementDef|QualifiedName]
		public CrossReference getSatisfiedByElementDefCrossReference_7_2_1_0() { return cSatisfiedByElementDefCrossReference_7_2_1_0; }
		
		//QualifiedName
		public RuleCall getSatisfiedByElementDefQualifiedNameParserRuleCall_7_2_1_0_1() { return cSatisfiedByElementDefQualifiedNameParserRuleCall_7_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }
		
		//('derive' derivedBy+=[Requirement|QualifiedName] ("," derivedBy+=[Requirement|QualifiedName])* ';')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'derive'
		public Keyword getDeriveKeyword_8_0() { return cDeriveKeyword_8_0; }
		
		//derivedBy+=[Requirement|QualifiedName]
		public Assignment getDerivedByAssignment_8_1() { return cDerivedByAssignment_8_1; }
		
		//[Requirement|QualifiedName]
		public CrossReference getDerivedByRequirementCrossReference_8_1_0() { return cDerivedByRequirementCrossReference_8_1_0; }
		
		//QualifiedName
		public RuleCall getDerivedByRequirementQualifiedNameParserRuleCall_8_1_0_1() { return cDerivedByRequirementQualifiedNameParserRuleCall_8_1_0_1; }
		
		//("," derivedBy+=[Requirement|QualifiedName])*
		public Group getGroup_8_2() { return cGroup_8_2; }
		
		//","
		public Keyword getCommaKeyword_8_2_0() { return cCommaKeyword_8_2_0; }
		
		//derivedBy+=[Requirement|QualifiedName]
		public Assignment getDerivedByAssignment_8_2_1() { return cDerivedByAssignment_8_2_1; }
		
		//[Requirement|QualifiedName]
		public CrossReference getDerivedByRequirementCrossReference_8_2_1_0() { return cDerivedByRequirementCrossReference_8_2_1_0; }
		
		//QualifiedName
		public RuleCall getDerivedByRequirementQualifiedNameParserRuleCall_8_2_1_0_1() { return cDerivedByRequirementQualifiedNameParserRuleCall_8_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_8_3() { return cSemicolonKeyword_8_3; }
		
		//(properties+=Property | composition+=Requirement)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_9_0() { return cPropertiesAssignment_9_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_9_0_0() { return cPropertiesPropertyParserRuleCall_9_0_0; }
		
		//composition+=Requirement
		public Assignment getCompositionAssignment_9_1() { return cCompositionAssignment_9_1; }
		
		//Requirement
		public RuleCall getCompositionRequirementParserRuleCall_9_1_0() { return cCompositionRequirementParserRuleCall_9_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class DataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DataTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataTypeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDatatypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeDataTypeDefCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeDataTypeDefQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cSuperTypeDataTypeDefCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDataTypeAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDataTypeAttributesTypeUseParserRuleCall_5_1_0 = (RuleCall)cDataTypeAttributesAssignment_5_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataTypeDef:
		//	{DataTypeDef}
		//	'datatype'
		//	name=ID ('extends' superType=[DataTypeDef|QualifiedName])?
		//	'{' ('attributes' dataTypeAttributes+=TypeUse*)?
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DataTypeDef} 'datatype' name=ID ('extends' superType=[DataTypeDef|QualifiedName])? '{' ('attributes'
		//dataTypeAttributes+=TypeUse*)? properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//{DataTypeDef}
		public Action getDataTypeDefAction_0() { return cDataTypeDefAction_0; }
		
		//'datatype'
		public Keyword getDatatypeKeyword_1() { return cDatatypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' superType=[DataTypeDef|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//superType=[DataTypeDef|QualifiedName]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }
		
		//[DataTypeDef|QualifiedName]
		public CrossReference getSuperTypeDataTypeDefCrossReference_3_1_0() { return cSuperTypeDataTypeDefCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeDataTypeDefQualifiedNameParserRuleCall_3_1_0_1() { return cSuperTypeDataTypeDefQualifiedNameParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('attributes' dataTypeAttributes+=TypeUse*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'attributes'
		public Keyword getAttributesKeyword_5_0() { return cAttributesKeyword_5_0; }
		
		//dataTypeAttributes+=TypeUse*
		public Assignment getDataTypeAttributesAssignment_5_1() { return cDataTypeAttributesAssignment_5_1; }
		
		//TypeUse
		public RuleCall getDataTypeAttributesTypeUseParserRuleCall_5_1_0() { return cDataTypeAttributesTypeUseParserRuleCall_5_1_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ValueTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ValueTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueTypeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperTypeValueTypeDefCrossReference_4_1_0 = (CrossReference)cSuperTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperTypeValueTypeDefQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cSuperTypeValueTypeDefCrossReference_4_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUnitKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cUnitAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cUnitUnitDefCrossReference_6_2_0 = (CrossReference)cUnitAssignment_6_2.eContents().get(0);
		private final RuleCall cUnitUnitDefQualifiedNameParserRuleCall_6_2_0_1 = (RuleCall)cUnitUnitDefCrossReference_6_2_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDimensionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDimensionAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cDimensionDimensionDefCrossReference_7_2_0 = (CrossReference)cDimensionAssignment_7_2.eContents().get(0);
		private final RuleCall cDimensionDimensionDefQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cDimensionDimensionDefCrossReference_7_2_0.eContents().get(1);
		private final Assignment cPropertiesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPropertiesPropertyParserRuleCall_8_0 = (RuleCall)cPropertiesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ValueTypeDef:
		//	{ValueTypeDef}
		//	'value' 'type'
		//	name=ID ('extends' superType=[ValueTypeDef|QualifiedName])?
		//	'{' ('unit' '=' unit=[UnitDef|QualifiedName])? ('dimension' '=' dimension=[DimensionDef|QualifiedName])?
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueTypeDef} 'value' 'type' name=ID ('extends' superType=[ValueTypeDef|QualifiedName])? '{' ('unit' '='
		//unit=[UnitDef|QualifiedName])? ('dimension' '=' dimension=[DimensionDef|QualifiedName])? properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//{ValueTypeDef}
		public Action getValueTypeDefAction_0() { return cValueTypeDefAction_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('extends' superType=[ValueTypeDef|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//superType=[ValueTypeDef|QualifiedName]
		public Assignment getSuperTypeAssignment_4_1() { return cSuperTypeAssignment_4_1; }
		
		//[ValueTypeDef|QualifiedName]
		public CrossReference getSuperTypeValueTypeDefCrossReference_4_1_0() { return cSuperTypeValueTypeDefCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getSuperTypeValueTypeDefQualifiedNameParserRuleCall_4_1_0_1() { return cSuperTypeValueTypeDefQualifiedNameParserRuleCall_4_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('unit' '=' unit=[UnitDef|QualifiedName])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'unit'
		public Keyword getUnitKeyword_6_0() { return cUnitKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//unit=[UnitDef|QualifiedName]
		public Assignment getUnitAssignment_6_2() { return cUnitAssignment_6_2; }
		
		//[UnitDef|QualifiedName]
		public CrossReference getUnitUnitDefCrossReference_6_2_0() { return cUnitUnitDefCrossReference_6_2_0; }
		
		//QualifiedName
		public RuleCall getUnitUnitDefQualifiedNameParserRuleCall_6_2_0_1() { return cUnitUnitDefQualifiedNameParserRuleCall_6_2_0_1; }
		
		//('dimension' '=' dimension=[DimensionDef|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'dimension'
		public Keyword getDimensionKeyword_7_0() { return cDimensionKeyword_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }
		
		//dimension=[DimensionDef|QualifiedName]
		public Assignment getDimensionAssignment_7_2() { return cDimensionAssignment_7_2; }
		
		//[DimensionDef|QualifiedName]
		public CrossReference getDimensionDimensionDefCrossReference_7_2_0() { return cDimensionDimensionDefCrossReference_7_2_0; }
		
		//QualifiedName
		public RuleCall getDimensionDimensionDefQualifiedNameParserRuleCall_7_2_0_1() { return cDimensionDimensionDefQualifiedNameParserRuleCall_7_2_0_1; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_8() { return cPropertiesAssignment_8; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_8_0() { return cPropertiesPropertyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPropertiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPropertiesPropertyParserRuleCall_4_0 = (RuleCall)cPropertiesAssignment_4.eContents().get(0);
		private final Assignment cLiteralsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLiteralsEnumLiteralValueParserRuleCall_5_0 = (RuleCall)cLiteralsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLiteralsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLiteralsEnumLiteralValueParserRuleCall_6_1_0 = (RuleCall)cLiteralsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Enumeration:
		//	{Enumeration}
		//	'enum'
		//	name=ID
		//	'{'
		//	properties+=Property*
		//	literals+=EnumLiteralValue ("," literals+=EnumLiteralValue)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumeration} 'enum' name=ID '{' properties+=Property* literals+=EnumLiteralValue ("," literals+=EnumLiteralValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_4() { return cPropertiesAssignment_4; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_4_0() { return cPropertiesPropertyParserRuleCall_4_0; }
		
		//literals+=EnumLiteralValue
		public Assignment getLiteralsAssignment_5() { return cLiteralsAssignment_5; }
		
		//EnumLiteralValue
		public RuleCall getLiteralsEnumLiteralValueParserRuleCall_5_0() { return cLiteralsEnumLiteralValueParserRuleCall_5_0; }
		
		//("," literals+=EnumLiteralValue)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//literals+=EnumLiteralValue
		public Assignment getLiteralsAssignment_6_1() { return cLiteralsAssignment_6_1; }
		
		//EnumLiteralValue
		public RuleCall getLiteralsEnumLiteralValueParserRuleCall_6_1_0() { return cLiteralsEnumLiteralValueParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TypeUse_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.TypeUse_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionTypeDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionTypeDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionTypeDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//TypeUse_Impl TypeUse:
		//	name=ID ':' definition=[TypeDef|QualifiedName] ('{' properties+=Property* '}')?
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' definition=[TypeDef|QualifiedName] ('{' properties+=Property* '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//definition=[TypeDef|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getDefinitionTypeDefCrossReference_2_0() { return cDefinitionTypeDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionTypeDefQualifiedNameParserRuleCall_2_0_1() { return cDefinitionTypeDefQualifiedNameParserRuleCall_2_0_1; }
		
		//('{' properties+=Property* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0() { return cPropertiesPropertyParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class EnumLiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EnumLiteralValue");
		private final Assignment cKeyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKeyEStringParserRuleCall_0 = (RuleCall)cKeyAssignment.eContents().get(0);
		
		//EnumLiteralValue:
		//	key=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//key=EString
		public Assignment getKeyAssignment() { return cKeyAssignment; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0() { return cKeyEStringParserRuleCall_0; }
	}
	public class DimensionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DimensionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimensionDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDimensionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cPropertiesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_0_0 = (RuleCall)cPropertiesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_1_1_1_0 = (RuleCall)cPropertiesAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DimensionDef:
		//	{DimensionDef}
		//	'dimension'
		//	name=ID ('{' (properties+=Property ("," properties+=Property)*)?
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimensionDef} 'dimension' name=ID ('{' (properties+=Property ("," properties+=Property)*)? '}')?
		public Group getGroup() { return cGroup; }
		
		//{DimensionDef}
		public Action getDimensionDefAction_0() { return cDimensionDefAction_0; }
		
		//'dimension'
		public Keyword getDimensionKeyword_1() { return cDimensionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{' (properties+=Property ("," properties+=Property)*)? '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//(properties+=Property ("," properties+=Property)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_0() { return cPropertiesAssignment_3_1_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_0_0() { return cPropertiesPropertyParserRuleCall_3_1_0_0; }
		
		//("," properties+=Property)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_3_1_1_1() { return cPropertiesAssignment_3_1_1_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_1_1_1_0() { return cPropertiesPropertyParserRuleCall_3_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}
	public class UnitDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.UnitDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUnitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDimensionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDimensionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cDimensionDimensionDefCrossReference_4_2_0 = (CrossReference)cDimensionAssignment_4_2.eContents().get(0);
		private final RuleCall cDimensionDimensionDefQualifiedNameParserRuleCall_4_2_0_1 = (RuleCall)cDimensionDimensionDefCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0_0 = (RuleCall)cPropertiesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_1_1_0 = (RuleCall)cPropertiesAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnitDef:
		//	{UnitDef}
		//	'unit'
		//	name=ID
		//	'{' ('dimension' '=' dimension=[DimensionDef|QualifiedName])? (properties+=Property ("," properties+=Property)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{UnitDef} 'unit' name=ID '{' ('dimension' '=' dimension=[DimensionDef|QualifiedName])? (properties+=Property (","
		//properties+=Property)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{UnitDef}
		public Action getUnitDefAction_0() { return cUnitDefAction_0; }
		
		//'unit'
		public Keyword getUnitKeyword_1() { return cUnitKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('dimension' '=' dimension=[DimensionDef|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'dimension'
		public Keyword getDimensionKeyword_4_0() { return cDimensionKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//dimension=[DimensionDef|QualifiedName]
		public Assignment getDimensionAssignment_4_2() { return cDimensionAssignment_4_2; }
		
		//[DimensionDef|QualifiedName]
		public CrossReference getDimensionDimensionDefCrossReference_4_2_0() { return cDimensionDimensionDefCrossReference_4_2_0; }
		
		//QualifiedName
		public RuleCall getDimensionDimensionDefQualifiedNameParserRuleCall_4_2_0_1() { return cDimensionDimensionDefQualifiedNameParserRuleCall_4_2_0_1; }
		
		//(properties+=Property ("," properties+=Property)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_0() { return cPropertiesAssignment_5_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0_0() { return cPropertiesPropertyParserRuleCall_5_0_0; }
		
		//("," properties+=Property)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_1_1() { return cPropertiesAssignment_5_1_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_1_1_0() { return cPropertiesPropertyParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ComponentUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ComponentUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionComponentDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionComponentDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionComponentDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_3_1_0 = (RuleCall)cLowerBoundAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_3_3_0 = (RuleCall)cUpperBoundAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPortsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPortsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPortsPortUseParserRuleCall_5_2_0 = (RuleCall)cPortsAssignment_5_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ComponentUse:
		//	name=ID ':' definition=[ComponentDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
		//	'{' ('using' 'ports' ports+=PortUse*)?
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' definition=[ComponentDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? '{' ('using' 'ports'
		//ports+=PortUse*)? properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//definition=[ComponentDef|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//[ComponentDef|QualifiedName]
		public CrossReference getDefinitionComponentDefCrossReference_2_0() { return cDefinitionComponentDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionComponentDefQualifiedNameParserRuleCall_2_0_1() { return cDefinitionComponentDefQualifiedNameParserRuleCall_2_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_3_1() { return cLowerBoundAssignment_3_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_3_1_0() { return cLowerBoundEIntParserRuleCall_3_1_0; }
		
		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_3_3() { return cUpperBoundAssignment_3_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_3_3_0() { return cUpperBoundEIntParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('using' 'ports' ports+=PortUse*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'using'
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }
		
		//'ports'
		public Keyword getPortsKeyword_5_1() { return cPortsKeyword_5_1; }
		
		//ports+=PortUse*
		public Assignment getPortsAssignment_5_2() { return cPortsAssignment_5_2; }
		
		//PortUse
		public RuleCall getPortsPortUseParserRuleCall_5_2_0() { return cPortsPortUseParserRuleCall_5_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConnectorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConnectorDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParticipantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPortsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPortsPortUse_ReverseParserRuleCall_4_1_0 = (RuleCall)cPortsAssignment_4_1.eContents().get(0);
		private final Assignment cCompositeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompositeConfigurationParserRuleCall_5_0 = (RuleCall)cCompositeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFlowsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cFlowsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cFlowsFlowParserRuleCall_6_1_0 = (RuleCall)cFlowsAssignment_6_1.eContents().get(0);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPropertiesAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_7_0_0 = (RuleCall)cPropertiesAssignment_7_0.eContents().get(0);
		private final Assignment cArchDefsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cArchDefsStructuralDefParserRuleCall_7_1_0 = (RuleCall)cArchDefsAssignment_7_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_7_2_0 = (RuleCall)cDataDefsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConnectorDef:
		//	'connector' 'def' name=ID
		//	'{' ('participants' ports+=PortUse_Reverse*)?
		//	composite=Configuration? ('flows' flows+=Flow*)? (properties+=Property
		//	| archDefs+=StructuralDef
		//	| dataDefs+=DataDef)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'connector' 'def' name=ID '{' ('participants' ports+=PortUse_Reverse*)? composite=Configuration? ('flows' flows+=Flow*)?
		//(properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)* '}'
		public Group getGroup() { return cGroup; }
		
		//'connector'
		public Keyword getConnectorKeyword_0() { return cConnectorKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('participants' ports+=PortUse_Reverse*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'participants'
		public Keyword getParticipantsKeyword_4_0() { return cParticipantsKeyword_4_0; }
		
		//ports+=PortUse_Reverse*
		public Assignment getPortsAssignment_4_1() { return cPortsAssignment_4_1; }
		
		//PortUse_Reverse
		public RuleCall getPortsPortUse_ReverseParserRuleCall_4_1_0() { return cPortsPortUse_ReverseParserRuleCall_4_1_0; }
		
		//composite=Configuration?
		public Assignment getCompositeAssignment_5() { return cCompositeAssignment_5; }
		
		//Configuration
		public RuleCall getCompositeConfigurationParserRuleCall_5_0() { return cCompositeConfigurationParserRuleCall_5_0; }
		
		//('flows' flows+=Flow*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'flows'
		public Keyword getFlowsKeyword_6_0() { return cFlowsKeyword_6_0; }
		
		//flows+=Flow*
		public Assignment getFlowsAssignment_6_1() { return cFlowsAssignment_6_1; }
		
		//Flow
		public RuleCall getFlowsFlowParserRuleCall_6_1_0() { return cFlowsFlowParserRuleCall_6_1_0; }
		
		//(properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_7_0() { return cPropertiesAssignment_7_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_7_0_0() { return cPropertiesPropertyParserRuleCall_7_0_0; }
		
		//archDefs+=StructuralDef
		public Assignment getArchDefsAssignment_7_1() { return cArchDefsAssignment_7_1; }
		
		//StructuralDef
		public RuleCall getArchDefsStructuralDefParserRuleCall_7_1_0() { return cArchDefsStructuralDefParserRuleCall_7_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_7_2() { return cDataDefsAssignment_7_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_7_2_0() { return cDataDefsDataDefParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ConnectorUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConnectorUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionConnectorDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionConnectorDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionConnectorDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_3_1_0 = (RuleCall)cLowerBoundAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_3_3_0 = (RuleCall)cUpperBoundAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBindingsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBindingsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBindingsConnectorBindingParserRuleCall_4_1_0 = (RuleCall)cBindingsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cBindingsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cBindingsConnectorBindingParserRuleCall_4_2_1_0 = (RuleCall)cBindingsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cPortsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPortsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPortsPortUse_ReverseParserRuleCall_5_2_0 = (RuleCall)cPortsAssignment_5_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_3_0 = (RuleCall)cPropertiesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//ConnectorUse:
		//	name=ID ':' definition=[ConnectorDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('bindings'
		//	bindings+=ConnectorBinding ("," bindings+=ConnectorBinding)*)? ('{'
		//	'ports' ports+=PortUse_Reverse*
		//	properties+=Property*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' definition=[ConnectorDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('bindings'
		//bindings+=ConnectorBinding ("," bindings+=ConnectorBinding)*)? ('{' 'ports' ports+=PortUse_Reverse*
		//properties+=Property* '}')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//definition=[ConnectorDef|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//[ConnectorDef|QualifiedName]
		public CrossReference getDefinitionConnectorDefCrossReference_2_0() { return cDefinitionConnectorDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionConnectorDefQualifiedNameParserRuleCall_2_0_1() { return cDefinitionConnectorDefQualifiedNameParserRuleCall_2_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_3_1() { return cLowerBoundAssignment_3_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_3_1_0() { return cLowerBoundEIntParserRuleCall_3_1_0; }
		
		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_3_3() { return cUpperBoundAssignment_3_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_3_3_0() { return cUpperBoundEIntParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//('bindings' bindings+=ConnectorBinding ("," bindings+=ConnectorBinding)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'bindings'
		public Keyword getBindingsKeyword_4_0() { return cBindingsKeyword_4_0; }
		
		//bindings+=ConnectorBinding
		public Assignment getBindingsAssignment_4_1() { return cBindingsAssignment_4_1; }
		
		//ConnectorBinding
		public RuleCall getBindingsConnectorBindingParserRuleCall_4_1_0() { return cBindingsConnectorBindingParserRuleCall_4_1_0; }
		
		//("," bindings+=ConnectorBinding)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//bindings+=ConnectorBinding
		public Assignment getBindingsAssignment_4_2_1() { return cBindingsAssignment_4_2_1; }
		
		//ConnectorBinding
		public RuleCall getBindingsConnectorBindingParserRuleCall_4_2_1_0() { return cBindingsConnectorBindingParserRuleCall_4_2_1_0; }
		
		//('{' 'ports' ports+=PortUse_Reverse* properties+=Property* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//'ports'
		public Keyword getPortsKeyword_5_1() { return cPortsKeyword_5_1; }
		
		//ports+=PortUse_Reverse*
		public Assignment getPortsAssignment_5_2() { return cPortsAssignment_5_2; }
		
		//PortUse_Reverse
		public RuleCall getPortsPortUse_ReverseParserRuleCall_5_2_0() { return cPortsPortUse_ReverseParserRuleCall_5_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5_3() { return cPropertiesAssignment_5_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_3_0() { return cPropertiesPropertyParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
	}
	public class CompositePortDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.CompositePortDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPortsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPortsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPortsPortUseParserRuleCall_5_0 = (RuleCall)cPortsAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cPropertiesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0_0 = (RuleCall)cPropertiesAssignment_6_0.eContents().get(0);
		private final Assignment cArchDefsAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cArchDefsStructuralDefParserRuleCall_6_1_0 = (RuleCall)cArchDefsAssignment_6_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_6_2_0 = (RuleCall)cDataDefsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CompositePortDef:
		//	'port' 'def' name=ID
		//	'{'
		//	'ports' ports+=PortUse* (properties+=Property
		//	| archDefs+=StructuralDef
		//	| dataDefs+=DataDef)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'def' name=ID '{' 'ports' ports+=PortUse* (properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'ports'
		public Keyword getPortsKeyword_4() { return cPortsKeyword_4; }
		
		//ports+=PortUse*
		public Assignment getPortsAssignment_5() { return cPortsAssignment_5; }
		
		//PortUse
		public RuleCall getPortsPortUseParserRuleCall_5_0() { return cPortsPortUseParserRuleCall_5_0; }
		
		//(properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_6_0() { return cPropertiesAssignment_6_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0_0() { return cPropertiesPropertyParserRuleCall_6_0_0; }
		
		//archDefs+=StructuralDef
		public Assignment getArchDefsAssignment_6_1() { return cArchDefsAssignment_6_1; }
		
		//StructuralDef
		public RuleCall getArchDefsStructuralDefParserRuleCall_6_1_0() { return cArchDefsStructuralDefParserRuleCall_6_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_6_2() { return cDataDefsAssignment_6_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_6_2_0() { return cDataDefsDataDefParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SimplePortDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.SimplePortDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFlowKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFlowPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlowPropertiesFlowPropertyEnumRuleCall_5_0 = (RuleCall)cFlowPropertiesAssignment_5.eContents().get(0);
		private final Assignment cFlowTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cFlowTypeTypeDefCrossReference_6_0 = (CrossReference)cFlowTypeAssignment_6.eContents().get(0);
		private final RuleCall cFlowTypeTypeDefQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cFlowTypeTypeDefCrossReference_6_0.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPropertiesAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_7_0_0 = (RuleCall)cPropertiesAssignment_7_0.eContents().get(0);
		private final Assignment cArchDefsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cArchDefsStructuralDefParserRuleCall_7_1_0 = (RuleCall)cArchDefsAssignment_7_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_7_2_0 = (RuleCall)cDataDefsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SimplePortDef:
		//	'port' 'def' name=ID
		//	'{'
		//	'flow' flowProperties=FlowProperty flowType=[TypeDef|QualifiedName] (properties+=Property
		//	| archDefs+=StructuralDef
		//	| dataDefs+=DataDef)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'port' 'def' name=ID '{' 'flow' flowProperties=FlowProperty flowType=[TypeDef|QualifiedName] (properties+=Property |
		//archDefs+=StructuralDef | dataDefs+=DataDef)* '}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'flow'
		public Keyword getFlowKeyword_4() { return cFlowKeyword_4; }
		
		//flowProperties=FlowProperty
		public Assignment getFlowPropertiesAssignment_5() { return cFlowPropertiesAssignment_5; }
		
		//FlowProperty
		public RuleCall getFlowPropertiesFlowPropertyEnumRuleCall_5_0() { return cFlowPropertiesFlowPropertyEnumRuleCall_5_0; }
		
		//flowType=[TypeDef|QualifiedName]
		public Assignment getFlowTypeAssignment_6() { return cFlowTypeAssignment_6; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getFlowTypeTypeDefCrossReference_6_0() { return cFlowTypeTypeDefCrossReference_6_0; }
		
		//QualifiedName
		public RuleCall getFlowTypeTypeDefQualifiedNameParserRuleCall_6_0_1() { return cFlowTypeTypeDefQualifiedNameParserRuleCall_6_0_1; }
		
		//(properties+=Property | archDefs+=StructuralDef | dataDefs+=DataDef)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_7_0() { return cPropertiesAssignment_7_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_7_0_0() { return cPropertiesPropertyParserRuleCall_7_0_0; }
		
		//archDefs+=StructuralDef
		public Assignment getArchDefsAssignment_7_1() { return cArchDefsAssignment_7_1; }
		
		//StructuralDef
		public RuleCall getArchDefsStructuralDefParserRuleCall_7_1_0() { return cArchDefsStructuralDefParserRuleCall_7_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_7_2() { return cDataDefsAssignment_7_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_7_2_0() { return cDataDefsDataDefParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class PortUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.PortUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionPortDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionPortDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionPortDefCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_3_1_0 = (RuleCall)cLowerBoundAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_3_3_0 = (RuleCall)cUpperBoundAssignment_3_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PortUse:
		//	name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
		//	'{'
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? '{' properties+=Property*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//definition=[PortDef|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//[PortDef|QualifiedName]
		public CrossReference getDefinitionPortDefCrossReference_2_0() { return cDefinitionPortDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionPortDefQualifiedNameParserRuleCall_2_0_1() { return cDefinitionPortDefQualifiedNameParserRuleCall_2_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_3_1() { return cLowerBoundAssignment_3_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_3_1_0() { return cLowerBoundEIntParserRuleCall_3_1_0; }
		
		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_3_3() { return cUpperBoundAssignment_3_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_3_3_0() { return cUpperBoundEIntParserRuleCall_3_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3_4() { return cRightSquareBracketKeyword_3_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PortUse_ReverseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.PortUse_Reverse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionPortDefCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionPortDefQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionPortDefCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_1_0 = (RuleCall)cLowerBoundAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cUpperBoundAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cUpperBoundEIntParserRuleCall_4_3_0 = (RuleCall)cUpperBoundAssignment_4_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PortUse_Reverse PortUse:
		//	'~' name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
		//	'{'
		//	properties+=Property*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'~' name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? '{'
		//properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//'~'
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=[PortDef|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//[PortDef|QualifiedName]
		public CrossReference getDefinitionPortDefCrossReference_3_0() { return cDefinitionPortDefCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getDefinitionPortDefQualifiedNameParserRuleCall_3_0_1() { return cDefinitionPortDefQualifiedNameParserRuleCall_3_0_1; }
		
		//('[' lowerBound=EInt ',' upperBound=EInt ']')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4_1() { return cLowerBoundAssignment_4_1; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_1_0() { return cLowerBoundEIntParserRuleCall_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2() { return cCommaKeyword_4_2; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_4_3() { return cUpperBoundAssignment_4_3; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_4_3_0() { return cUpperBoundEIntParserRuleCall_4_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_4() { return cRightSquareBracketKeyword_4_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ActionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInParametersPinParserRuleCall_5_0 = (RuleCall)cInParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_6_1_0 = (RuleCall)cInParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cReturnTypeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cReturnTypeTypeDefCrossReference_9_0 = (CrossReference)cReturnTypeAssignment_9.eContents().get(0);
		private final RuleCall cReturnTypeTypeDefQualifiedNameParserRuleCall_9_0_1 = (RuleCall)cReturnTypeTypeDefCrossReference_9_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Assignment cConstraintsAssignment_11_0 = (Assignment)cAlternatives_11.eContents().get(0);
		private final RuleCall cConstraintsConstraintUseParserRuleCall_11_0_0 = (RuleCall)cConstraintsAssignment_11_0.eContents().get(0);
		private final Assignment cDelegationsAssignment_11_1 = (Assignment)cAlternatives_11.eContents().get(1);
		private final RuleCall cDelegationsActivityDelegationParserRuleCall_11_1_0 = (RuleCall)cDelegationsAssignment_11_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_11_2 = (Assignment)cAlternatives_11.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_11_2_0 = (RuleCall)cPropertiesAssignment_11_2.eContents().get(0);
		private final Assignment cBehaDefsAssignment_11_3 = (Assignment)cAlternatives_11.eContents().get(3);
		private final RuleCall cBehaDefsBehaviorDefParserRuleCall_11_3_0 = (RuleCall)cBehaDefsAssignment_11_3.eContents().get(0);
		private final Assignment cDataDefsAssignment_11_4 = (Assignment)cAlternatives_11.eContents().get(4);
		private final RuleCall cDataDefsDataDefParserRuleCall_11_4_0 = (RuleCall)cDataDefsAssignment_11_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//ActionDef:
		//	{ActionDef}
		//	'action' 'def'
		//	name=ID '(' inParameters+=Pin ("," inParameters+=Pin)* ')' ':' returnType=[TypeDef|QualifiedName]
		//	'{' (constraints+=ConstraintUse
		//	| delegations+=ActivityDelegation
		//	| properties+=Property
		//	| behaDefs+=BehaviorDef
		//	| dataDefs+=DataDef)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionDef} 'action' 'def' name=ID '(' inParameters+=Pin ("," inParameters+=Pin)* ')' ':'
		//returnType=[TypeDef|QualifiedName] '{' (constraints+=ConstraintUse | delegations+=ActivityDelegation |
		//properties+=Property | behaDefs+=BehaviorDef | dataDefs+=DataDef)* '}'
		public Group getGroup() { return cGroup; }
		
		//{ActionDef}
		public Action getActionDefAction_0() { return cActionDefAction_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//'def'
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_5() { return cInParametersAssignment_5; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_5_0() { return cInParametersPinParserRuleCall_5_0; }
		
		//("," inParameters+=Pin)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_6_1() { return cInParametersAssignment_6_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_6_1_0() { return cInParametersPinParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//returnType=[TypeDef|QualifiedName]
		public Assignment getReturnTypeAssignment_9() { return cReturnTypeAssignment_9; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getReturnTypeTypeDefCrossReference_9_0() { return cReturnTypeTypeDefCrossReference_9_0; }
		
		//QualifiedName
		public RuleCall getReturnTypeTypeDefQualifiedNameParserRuleCall_9_0_1() { return cReturnTypeTypeDefQualifiedNameParserRuleCall_9_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_10() { return cLeftCurlyBracketKeyword_10; }
		
		//(constraints+=ConstraintUse | delegations+=ActivityDelegation | properties+=Property | behaDefs+=BehaviorDef |
		//dataDefs+=DataDef)*
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//constraints+=ConstraintUse
		public Assignment getConstraintsAssignment_11_0() { return cConstraintsAssignment_11_0; }
		
		//ConstraintUse
		public RuleCall getConstraintsConstraintUseParserRuleCall_11_0_0() { return cConstraintsConstraintUseParserRuleCall_11_0_0; }
		
		//delegations+=ActivityDelegation
		public Assignment getDelegationsAssignment_11_1() { return cDelegationsAssignment_11_1; }
		
		//ActivityDelegation
		public RuleCall getDelegationsActivityDelegationParserRuleCall_11_1_0() { return cDelegationsActivityDelegationParserRuleCall_11_1_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_11_2() { return cPropertiesAssignment_11_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_11_2_0() { return cPropertiesPropertyParserRuleCall_11_2_0; }
		
		//behaDefs+=BehaviorDef
		public Assignment getBehaDefsAssignment_11_3() { return cBehaDefsAssignment_11_3; }
		
		//BehaviorDef
		public RuleCall getBehaDefsBehaviorDefParserRuleCall_11_3_0() { return cBehaDefsBehaviorDefParserRuleCall_11_3_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_11_4() { return cDataDefsAssignment_11_4; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_11_4_0() { return cDataDefsDataDefParserRuleCall_11_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class ActivityDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_4_1_0 = (RuleCall)cInParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_4_2_1_0 = (RuleCall)cInParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOutParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_5_1_0 = (RuleCall)cOutParametersAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cOutParametersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_5_2_1_0 = (RuleCall)cOutParametersAssignment_5_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cPropertiesAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_7_0_0 = (RuleCall)cPropertiesAssignment_7_0.eContents().get(0);
		private final Assignment cBehaDefsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cBehaDefsBehaviorDefParserRuleCall_7_1_0 = (RuleCall)cBehaDefsAssignment_7_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_7_2 = (Assignment)cAlternatives_7.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_7_2_0 = (RuleCall)cDataDefsAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cConstraintKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cColonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cConstraintsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cConstraintsConstraintUseParserRuleCall_8_2_0 = (RuleCall)cConstraintsAssignment_8_2.eContents().get(0);
		private final Assignment cDelegationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDelegationsActivityDelegationParserRuleCall_9_0 = (RuleCall)cDelegationsAssignment_9.eContents().get(0);
		private final Assignment cAcbodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAcbodyActivityBodyParserRuleCall_10_0 = (RuleCall)cAcbodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ActivityDef:
		//	{ActivityDef}
		//	'activity' 'def'
		//	name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (',' outParameters+=Pin)*)?
		//	'{' (properties+=Property
		//	| behaDefs+=BehaviorDef
		//	| dataDefs+=DataDef)* ('constraint' ':' constraints+=ConstraintUse*)?
		//	delegations+=ActivityDelegation*
		//	acbody=ActivityBody?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivityDef} 'activity' 'def' name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (','
		//outParameters+=Pin)*)? '{' (properties+=Property | behaDefs+=BehaviorDef | dataDefs+=DataDef)* ('constraint' ':'
		//constraints+=ConstraintUse*)? delegations+=ActivityDelegation* acbody=ActivityBody? '}'
		public Group getGroup() { return cGroup; }
		
		//{ActivityDef}
		public Action getActivityDefAction_0() { return cActivityDefAction_0; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
		
		//'def'
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('(' inParameters+=Pin (',' inParameters+=Pin)* ')')
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_4_1() { return cInParametersAssignment_4_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_4_1_0() { return cInParametersPinParserRuleCall_4_1_0; }
		
		//(',' inParameters+=Pin)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_4_2_1() { return cInParametersAssignment_4_2_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_4_2_1_0() { return cInParametersPinParserRuleCall_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//(':' outParameters+=Pin (',' outParameters+=Pin)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_5_1() { return cOutParametersAssignment_5_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_5_1_0() { return cOutParametersPinParserRuleCall_5_1_0; }
		
		//(',' outParameters+=Pin)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_5_2_1() { return cOutParametersAssignment_5_2_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_5_2_1_0() { return cOutParametersPinParserRuleCall_5_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(properties+=Property | behaDefs+=BehaviorDef | dataDefs+=DataDef)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_7_0() { return cPropertiesAssignment_7_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_7_0_0() { return cPropertiesPropertyParserRuleCall_7_0_0; }
		
		//behaDefs+=BehaviorDef
		public Assignment getBehaDefsAssignment_7_1() { return cBehaDefsAssignment_7_1; }
		
		//BehaviorDef
		public RuleCall getBehaDefsBehaviorDefParserRuleCall_7_1_0() { return cBehaDefsBehaviorDefParserRuleCall_7_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_7_2() { return cDataDefsAssignment_7_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_7_2_0() { return cDataDefsDataDefParserRuleCall_7_2_0; }
		
		//('constraint' ':' constraints+=ConstraintUse*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'constraint'
		public Keyword getConstraintKeyword_8_0() { return cConstraintKeyword_8_0; }
		
		//':'
		public Keyword getColonKeyword_8_1() { return cColonKeyword_8_1; }
		
		//constraints+=ConstraintUse*
		public Assignment getConstraintsAssignment_8_2() { return cConstraintsAssignment_8_2; }
		
		//ConstraintUse
		public RuleCall getConstraintsConstraintUseParserRuleCall_8_2_0() { return cConstraintsConstraintUseParserRuleCall_8_2_0; }
		
		//delegations+=ActivityDelegation*
		public Assignment getDelegationsAssignment_9() { return cDelegationsAssignment_9; }
		
		//ActivityDelegation
		public RuleCall getDelegationsActivityDelegationParserRuleCall_9_0() { return cDelegationsActivityDelegationParserRuleCall_9_0; }
		
		//acbody=ActivityBody?
		public Assignment getAcbodyAssignment_10() { return cAcbodyAssignment_10; }
		
		//ActivityBody
		public RuleCall getAcbodyActivityBodyParserRuleCall_10_0() { return cAcbodyActivityBodyParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DataStoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DataStore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatastoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeTypeDefCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeTypeDefQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeTypeDefCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInitialKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cValueKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cEqualsSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cInitValueAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cInitValueExpressionParserRuleCall_6_3_0 = (RuleCall)cInitValueAssignment_6_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataStore:
		//	'datastore'
		//	name=ID ':' type=[TypeDef|QualifiedName]
		//	'{'
		//	properties+=Property* ('initial' 'value' '=' initValue=Expression)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'datastore' name=ID ':' type=[TypeDef|QualifiedName] '{' properties+=Property* ('initial' 'value' '='
		//initValue=Expression)? '}'
		public Group getGroup() { return cGroup; }
		
		//'datastore'
		public Keyword getDatastoreKeyword_0() { return cDatastoreKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[TypeDef|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getTypeTypeDefCrossReference_3_0() { return cTypeTypeDefCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeDefQualifiedNameParserRuleCall_3_0_1() { return cTypeTypeDefQualifiedNameParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }
		
		//('initial' 'value' '=' initValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'initial'
		public Keyword getInitialKeyword_6_0() { return cInitialKeyword_6_0; }
		
		//'value'
		public Keyword getValueKeyword_6_1() { return cValueKeyword_6_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_2() { return cEqualsSignKeyword_6_2; }
		
		//initValue=Expression
		public Assignment getInitValueAssignment_6_3() { return cInitValueAssignment_6_3; }
		
		//Expression
		public RuleCall getInitValueExpressionParserRuleCall_6_3_0() { return cInitValueExpressionParserRuleCall_6_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DataBufferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DataBuffer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBufferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeTypeDefCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeTypeDefQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTypeTypeDefCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPropertiesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cPropertiesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_2_0 = (RuleCall)cPropertiesAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_3_1_0 = (RuleCall)cPropertiesAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInitValueKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitValueExpressionParserRuleCall_6_1_0 = (RuleCall)cInitValueAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataBuffer:
		//	'buffer'
		//	name=ID
		//	'{'
		//	'type' type=[TypeDef|QualifiedName] ('properties' '{' properties+=Property ("," properties+=Property)* '}')?
		//	('initValue' initValue=Expression)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'buffer' name=ID '{' 'type' type=[TypeDef|QualifiedName] ('properties' '{' properties+=Property (","
		//properties+=Property)* '}')? ('initValue' initValue=Expression)? '}'
		public Group getGroup() { return cGroup; }
		
		//'buffer'
		public Keyword getBufferKeyword_0() { return cBufferKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[TypeDef|QualifiedName]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getTypeTypeDefCrossReference_4_0() { return cTypeTypeDefCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getTypeTypeDefQualifiedNameParserRuleCall_4_0_1() { return cTypeTypeDefQualifiedNameParserRuleCall_4_0_1; }
		
		//('properties' '{' properties+=Property ("," properties+=Property)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'properties'
		public Keyword getPropertiesKeyword_5_0() { return cPropertiesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_2() { return cPropertiesAssignment_5_2; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_2_0() { return cPropertiesPropertyParserRuleCall_5_2_0; }
		
		//("," properties+=Property)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_3_1() { return cPropertiesAssignment_5_3_1; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_3_1_0() { return cPropertiesPropertyParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('initValue' initValue=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'initValue'
		public Keyword getInitValueKeyword_6_0() { return cInitValueKeyword_6_0; }
		
		//initValue=Expression
		public Assignment getInitValueAssignment_6_1() { return cInitValueAssignment_6_1; }
		
		//Expression
		public RuleCall getInitValueExpressionParserRuleCall_6_1_0() { return cInitValueExpressionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Protocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_2_1_0 = (RuleCall)cInParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_2_2_1_0 = (RuleCall)cInParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_3_1_0 = (RuleCall)cOutParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOutParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_3_2_1_0 = (RuleCall)cOutParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0_0 = (RuleCall)cPropertiesAssignment_5_0.eContents().get(0);
		private final Assignment cBehaDefsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBehaDefsBehaviorDefParserRuleCall_5_1_0 = (RuleCall)cBehaDefsAssignment_5_1.eContents().get(0);
		private final Assignment cDataDefsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDataDefsDataDefParserRuleCall_5_2_0 = (RuleCall)cDataDefsAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDelegationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cDelegationsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cDelegationsActivityDelegationParserRuleCall_6_2_0 = (RuleCall)cDelegationsAssignment_6_2.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyProtocolBodyParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Protocol: // TODO
		//	'protocol' name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (','
		//	outParameters+=Pin)*)? '{' (properties+=Property behaDefs+=BehaviorDef dataDefs+=DataDef)* ('delegations' ':'
		//	delegations+=ActivityDelegation*)? body=ProtocolBody '}';
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO
		//'protocol' name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (','
		//outParameters+=Pin)*)? '{' (properties+=Property behaDefs+=BehaviorDef dataDefs+=DataDef)* ('delegations' ':'
		//delegations+=ActivityDelegation*)? body=ProtocolBody '}'
		public Group getGroup() { return cGroup; }
		
		//// TODO
		//'protocol'
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' inParameters+=Pin (',' inParameters+=Pin)* ')')
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_2_1() { return cInParametersAssignment_2_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_2_1_0() { return cInParametersPinParserRuleCall_2_1_0; }
		
		//(',' inParameters+=Pin)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_2_2_1() { return cInParametersAssignment_2_2_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_2_2_1_0() { return cInParametersPinParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//(':' outParameters+=Pin (',' outParameters+=Pin)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_3_1() { return cOutParametersAssignment_3_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_3_1_0() { return cOutParametersPinParserRuleCall_3_1_0; }
		
		//(',' outParameters+=Pin)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_3_2_1() { return cOutParametersAssignment_3_2_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_3_2_1_0() { return cOutParametersPinParserRuleCall_3_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(properties+=Property behaDefs+=BehaviorDef dataDefs+=DataDef)*
		public Group getGroup_5() { return cGroup_5; }
		
		//properties+=Property
		public Assignment getPropertiesAssignment_5_0() { return cPropertiesAssignment_5_0; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0_0() { return cPropertiesPropertyParserRuleCall_5_0_0; }
		
		//behaDefs+=BehaviorDef
		public Assignment getBehaDefsAssignment_5_1() { return cBehaDefsAssignment_5_1; }
		
		//BehaviorDef
		public RuleCall getBehaDefsBehaviorDefParserRuleCall_5_1_0() { return cBehaDefsBehaviorDefParserRuleCall_5_1_0; }
		
		//dataDefs+=DataDef
		public Assignment getDataDefsAssignment_5_2() { return cDataDefsAssignment_5_2; }
		
		//DataDef
		public RuleCall getDataDefsDataDefParserRuleCall_5_2_0() { return cDataDefsDataDefParserRuleCall_5_2_0; }
		
		//('delegations' ':' delegations+=ActivityDelegation*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'delegations'
		public Keyword getDelegationsKeyword_6_0() { return cDelegationsKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//delegations+=ActivityDelegation*
		public Assignment getDelegationsAssignment_6_2() { return cDelegationsAssignment_6_2; }
		
		//ActivityDelegation
		public RuleCall getDelegationsActivityDelegationParserRuleCall_6_2_0() { return cDelegationsActivityDelegationParserRuleCall_6_2_0; }
		
		//body=ProtocolBody
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }
		
		//ProtocolBody
		public RuleCall getBodyProtocolBodyParserRuleCall_7_0() { return cBodyProtocolBodyParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ConstraintDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConstraintDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstraintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_3_1_0 = (RuleCall)cInParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInParametersPinParserRuleCall_3_2_1_0 = (RuleCall)cInParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOutParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_4_1_0 = (RuleCall)cOutParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cOutParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cOutParametersPinParserRuleCall_4_2_1_0 = (RuleCall)cOutParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEquationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cEquationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cEquationExpressionParserRuleCall_6_2_0 = (RuleCall)cEquationAssignment_6_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPropertiesPropertyParserRuleCall_7_0 = (RuleCall)cPropertiesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ConstraintDef:
		//	{ConstraintDef}
		//	'constraint'
		//	name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (',' outParameters+=Pin)*)?
		//	'{' ('equation' '=' equation=Expression)?
		//	properties+=Property*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintDef} 'constraint' name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (','
		//outParameters+=Pin)*)? '{' ('equation' '=' equation=Expression)? properties+=Property* '}'
		public Group getGroup() { return cGroup; }
		
		//{ConstraintDef}
		public Action getConstraintDefAction_0() { return cConstraintDefAction_0; }
		
		//'constraint'
		public Keyword getConstraintKeyword_1() { return cConstraintKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' inParameters+=Pin (',' inParameters+=Pin)* ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_3_1() { return cInParametersAssignment_3_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_3_1_0() { return cInParametersPinParserRuleCall_3_1_0; }
		
		//(',' inParameters+=Pin)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//inParameters+=Pin
		public Assignment getInParametersAssignment_3_2_1() { return cInParametersAssignment_3_2_1; }
		
		//Pin
		public RuleCall getInParametersPinParserRuleCall_3_2_1_0() { return cInParametersPinParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//(':' outParameters+=Pin (',' outParameters+=Pin)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':'
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_4_1() { return cOutParametersAssignment_4_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_4_1_0() { return cOutParametersPinParserRuleCall_4_1_0; }
		
		//(',' outParameters+=Pin)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//outParameters+=Pin
		public Assignment getOutParametersAssignment_4_2_1() { return cOutParametersAssignment_4_2_1; }
		
		//Pin
		public RuleCall getOutParametersPinParserRuleCall_4_2_1_0() { return cOutParametersPinParserRuleCall_4_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('equation' '=' equation=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'equation'
		public Keyword getEquationKeyword_6_0() { return cEquationKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//equation=Expression
		public Assignment getEquationAssignment_6_2() { return cEquationAssignment_6_2; }
		
		//Expression
		public RuleCall getEquationExpressionParserRuleCall_6_2_0() { return cEquationExpressionParserRuleCall_6_2_0; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_7() { return cPropertiesAssignment_7; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_7_0() { return cPropertiesPropertyParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ExecutableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Executable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsTypeUseParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Keyword cInKeyword_4_2_1 = (Keyword)cGroup_4_2.eContents().get(1);
		private final Assignment cParamsAssignment_4_2_2 = (Assignment)cGroup_4_2.eContents().get(2);
		private final RuleCall cParamsTypeUseParserRuleCall_4_2_2_0 = (RuleCall)cParamsAssignment_4_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOutKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cReturnTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cReturnTypeTypeDefCrossReference_8_0 = (CrossReference)cReturnTypeAssignment_8.eContents().get(0);
		private final RuleCall cReturnTypeTypeDefQualifiedNameParserRuleCall_8_0_1 = (RuleCall)cReturnTypeTypeDefCrossReference_8_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyNonBlockStatementParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		/// *
		// * Executable Viewpoint 
		// * / Executable:
		//	'executable' 'def' name=ID '(' ('in' params+=TypeUse (',' 'in' params+=TypeUse)*)? ')' ':' 'out'
		//	returnType=[TypeDef|QualifiedName]
		//	'{'
		//	body+=NonBlockStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'executable' 'def' name=ID '(' ('in' params+=TypeUse (',' 'in' params+=TypeUse)*)? ')' ':' 'out'
		//returnType=[TypeDef|QualifiedName] '{' body+=NonBlockStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'executable'
		public Keyword getExecutableKeyword_0() { return cExecutableKeyword_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//('in' params+=TypeUse (',' 'in' params+=TypeUse)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//params+=TypeUse
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }
		
		//TypeUse
		public RuleCall getParamsTypeUseParserRuleCall_4_1_0() { return cParamsTypeUseParserRuleCall_4_1_0; }
		
		//(',' 'in' params+=TypeUse)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//'in'
		public Keyword getInKeyword_4_2_1() { return cInKeyword_4_2_1; }
		
		//params+=TypeUse
		public Assignment getParamsAssignment_4_2_2() { return cParamsAssignment_4_2_2; }
		
		//TypeUse
		public RuleCall getParamsTypeUseParserRuleCall_4_2_2_0() { return cParamsTypeUseParserRuleCall_4_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'out'
		public Keyword getOutKeyword_7() { return cOutKeyword_7; }
		
		//returnType=[TypeDef|QualifiedName]
		public Assignment getReturnTypeAssignment_8() { return cReturnTypeAssignment_8; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getReturnTypeTypeDefCrossReference_8_0() { return cReturnTypeTypeDefCrossReference_8_0; }
		
		//QualifiedName
		public RuleCall getReturnTypeTypeDefQualifiedNameParserRuleCall_8_0_1() { return cReturnTypeTypeDefQualifiedNameParserRuleCall_8_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }
		
		//body+=NonBlockStatement*
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//NonBlockStatement
		public RuleCall getBodyNonBlockStatementParserRuleCall_10_0() { return cBodyNonBlockStatementParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWhileStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cForStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSwitchStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		/// **
		// * Executable[STATEMENTS]
		// * / Statement:
		//	Expression | BlockStatement | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement |
		//	SwitchStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | BlockStatement | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement |
		//SwitchStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_1() { return cBlockStatementParserRuleCall_1; }
		
		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_2() { return cVariableDeclParserRuleCall_2; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_3() { return cReturnStatementParserRuleCall_3; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_4() { return cWhileStatementParserRuleCall_4; }
		
		//DoStatement
		public RuleCall getDoStatementParserRuleCall_5() { return cDoStatementParserRuleCall_5; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_6() { return cForStatementParserRuleCall_6; }
		
		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_7() { return cSwitchStatementParserRuleCall_7; }
	}
	public class NonBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.NonBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDoStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cForStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// Same as above, but block statement is not allowed
		//NonBlockStatement Statement:
		//	Expression | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_1() { return cVariableDeclParserRuleCall_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_2() { return cReturnStatementParserRuleCall_2; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }
		
		//DoStatement
		public RuleCall getDoStatementParserRuleCall_4() { return cDoStatementParserRuleCall_4; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_5() { return cForStatementParserRuleCall_5; }
	}
	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockStatement:
		//	{BlockStatement}
		//	'{'
		//	body+=Statement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlockStatement} '{' body+=Statement* '}'
		public Group getGroup() { return cGroup; }
		
		//{BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//body+=Statement*
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDefinitionTypeDefCrossReference_3_0 = (CrossReference)cDefinitionAssignment_3.eContents().get(0);
		private final RuleCall cDefinitionTypeDefQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cDefinitionTypeDefCrossReference_3_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		////Assignment returns Assignment:
		////	var=[TypeUse|EString] '=' value=Expression
		////;
		//VariableDecl:
		//	'let' name=ID ':' definition=[TypeDef|QualifiedName] '=' value=Expression
		//	// TODO must add the following line: got a left-reduction conflict
		//	//|  definition=[TypeDef|QualifiedName] name=ID '=' value=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'let' name=ID ':' definition=[TypeDef|QualifiedName] '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//definition=[TypeDef|QualifiedName]
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getDefinitionTypeDefCrossReference_3_0() { return cDefinitionTypeDefCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getDefinitionTypeDefQualifiedNameParserRuleCall_3_0_1() { return cDefinitionTypeDefQualifiedNameParserRuleCall_3_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//value=Expression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_5_0() { return cValueExpressionParserRuleCall_5_0; }
	}
	public class IfBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.IfBlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMain_ifAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMain_ifIfStatementParserRuleCall_0_0 = (RuleCall)cMain_ifAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParalel_ifsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParalel_ifsIfStatementParserRuleCall_1_1_0 = (RuleCall)cParalel_ifsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSequential_ifsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSequential_ifsIfStatementParserRuleCall_2_1_0 = (RuleCall)cSequential_ifsAssignment_2_1.eContents().get(0);
		private final Assignment cElseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseElseStatementParserRuleCall_3_0 = (RuleCall)cElseAssignment_3.eContents().get(0);
		
		//IfBlockStatement:
		//	main_if=IfStatement ('or' paralel_ifs+=IfStatement)* ('else' sequential_ifs+=IfStatement)*
		//	else=ElseStatement?;
		@Override public ParserRule getRule() { return rule; }
		
		//main_if=IfStatement ('or' paralel_ifs+=IfStatement)* ('else' sequential_ifs+=IfStatement)* else=ElseStatement?
		public Group getGroup() { return cGroup; }
		
		//main_if=IfStatement
		public Assignment getMain_ifAssignment_0() { return cMain_ifAssignment_0; }
		
		//IfStatement
		public RuleCall getMain_ifIfStatementParserRuleCall_0_0() { return cMain_ifIfStatementParserRuleCall_0_0; }
		
		//('or' paralel_ifs+=IfStatement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//paralel_ifs+=IfStatement
		public Assignment getParalel_ifsAssignment_1_1() { return cParalel_ifsAssignment_1_1; }
		
		//IfStatement
		public RuleCall getParalel_ifsIfStatementParserRuleCall_1_1_0() { return cParalel_ifsIfStatementParserRuleCall_1_1_0; }
		
		//('else' sequential_ifs+=IfStatement)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'else'
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//sequential_ifs+=IfStatement
		public Assignment getSequential_ifsAssignment_2_1() { return cSequential_ifsAssignment_2_1; }
		
		//IfStatement
		public RuleCall getSequential_ifsIfStatementParserRuleCall_2_1_0() { return cSequential_ifsIfStatementParserRuleCall_2_1_0; }
		
		//else=ElseStatement?
		public Assignment getElseAssignment_3() { return cElseAssignment_3; }
		
		//ElseStatement
		public RuleCall getElseElseStatementParserRuleCall_3_0() { return cElseElseStatementParserRuleCall_3_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//IfStatement:
		//	'if' '(' condition=Expression ')' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' condition=Expression ')' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class ElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//ElseStatement:
		//	'else' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//body=Statement
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_1_0() { return cBodyStatementParserRuleCall_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ReturnStatement:
		//	'return' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	'while' '(' condition=Expression ')' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' '(' condition=Expression ')' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyStatementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DoStatement:
		//	'do' body=Statement 'while' '(' condition=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' body=Statement 'while' '(' condition=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//body=Statement
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_1_0() { return cBodyStatementParserRuleCall_1_0; }
		
		//'while'
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//condition=Expression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_0() { return cConditionExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlForControlParserRuleCall_2_0 = (RuleCall)cControlAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//ForStatement:
		//	'for' '(' control=ForControl ')' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' '(' control=ForControl ')' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//control=ForControl
		public Assignment getControlAssignment_2() { return cControlAssignment_2; }
		
		//ForControl
		public RuleCall getControlForControlParserRuleCall_2_0() { return cControlForControlParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class ForControlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ForControl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsForVarParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsForVarParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//ForControl:
		//	vars+=ForVar (',' vars+=ForVar);
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=ForVar (',' vars+=ForVar)
		public Group getGroup() { return cGroup; }
		
		//vars+=ForVar
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//ForVar
		public RuleCall getVarsForVarParserRuleCall_0_0() { return cVarsForVarParserRuleCall_0_0; }
		
		//(',' vars+=ForVar)
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=ForVar
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//ForVar
		public RuleCall getVarsForVarParserRuleCall_1_1_0() { return cVarsForVarParserRuleCall_1_1_0; }
	}
	public class ForVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ForVar");
		private final Keyword cForvarKeyword = (Keyword)rule.eContents().get(1);
		
		//ForVar:
		//	'forvar'
		//	/ * 	var=VariableDecl 'in' expr=Expression
		//	| var=VariableDecl ':' expr=Expression* / // TODO add variable this, got a left-reduction problem
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'forvar'
		public Keyword getForvarKeyword() { return cForvarKeyword; }
	}
	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cClausesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClausesSwitchClauseParserRuleCall_5_0 = (RuleCall)cClausesAssignment_5.eContents().get(0);
		private final Assignment cClausesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cClausesDefaultSwitchClauseParserRuleCall_6_0 = (RuleCall)cClausesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SwitchStatement:
		//	'switch' '(' expr=Expression ')' '{' clauses+=SwitchClause* clauses+=DefaultSwitchClause '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' '(' expr=Expression ')' '{' clauses+=SwitchClause* clauses+=DefaultSwitchClause '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//clauses+=SwitchClause*
		public Assignment getClausesAssignment_5() { return cClausesAssignment_5; }
		
		//SwitchClause
		public RuleCall getClausesSwitchClauseParserRuleCall_5_0() { return cClausesSwitchClauseParserRuleCall_5_0; }
		
		//clauses+=DefaultSwitchClause
		public Assignment getClausesAssignment_6() { return cClausesAssignment_6; }
		
		//DefaultSwitchClause
		public RuleCall getClausesDefaultSwitchClauseParserRuleCall_6_0() { return cClausesDefaultSwitchClauseParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SwitchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.SwitchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//SwitchClause:
		//	'case' value=Expression ':' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' value=Expression ':' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//body=Statement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_3_0() { return cBodyStatementParserRuleCall_3_0; }
	}
	public class DefaultSwitchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DefaultSwitchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//DefaultSwitchClause:
		//	'default' ':' body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//'default' ':' body=Statement
		public Group getGroup() { return cGroup; }
		
		//'default'
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//body=Statement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_2_0() { return cBodyStatementParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueEStringParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cConditionalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Executable[EXPRESSIONS]
		// * Expressions are divided into 6 groups of expressions
		// * / Expression:
		//	value=EString // Removed FIXME caused problems in behavioral diagram   
		//	/ *PrimaryExpression
		//	| IncrementAndDecrementExpression
		//	| UnaryExpression
		//	| BinaryExpression* /
		//	| ConditionalExpression
		//	/ *| AssignmentExpression* /;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString // Removed FIXME caused problems in behavioral diagram   
		/// *PrimaryExpression
		//	| IncrementAndDecrementExpression
		//	| UnaryExpression
		//	| BinaryExpression* / | ConditionalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=EString
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0_0() { return cValueEStringParserRuleCall_0_0; }
		
		//ConditionalExpression
		public RuleCall getConditionalExpressionParserRuleCall_1() { return cConditionalExpressionParserRuleCall_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonNameExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Basic, simplest expressions
		// * / PrimaryExpression Expression:
		//	NameExpression
		//	| NonNameExpression
		@Override public ParserRule getRule() { return rule; }
		
		//NameExpression | NonNameExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameExpression
		public RuleCall getNameExpressionParserRuleCall_0() { return cNameExpressionParserRuleCall_0; }
		
		//NonNameExpression
		public RuleCall getNonNameExpressionParserRuleCall_1() { return cNonNameExpressionParserRuleCall_1; }
	}
	public class NameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.NameExpression");
		private final Assignment cCiteAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cCiteNamedElementCrossReference_0 = (CrossReference)cCiteAssignment.eContents().get(0);
		private final RuleCall cCiteNamedElementQualifiedNameParserRuleCall_0_1 = (RuleCall)cCiteNamedElementCrossReference_0.eContents().get(1);
		
		//NameExpression:
		//	cite=[NamedElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//cite=[NamedElement|QualifiedName]
		public Assignment getCiteAssignment() { return cCiteAssignment; }
		
		//[NamedElement|QualifiedName]
		public CrossReference getCiteNamedElementCrossReference_0() { return cCiteNamedElementCrossReference_0; }
		
		//QualifiedName
		public RuleCall getCiteNamedElementQualifiedNameParserRuleCall_0_1() { return cCiteNamedElementQualifiedNameParserRuleCall_0_1; }
	}
	public class NonNameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.NonNameExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThisExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NonNameExpression Expression:
		//	LiteralExpression
		//	| ThisExpression
		//	| ParenthesizedExpression
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralExpression | ThisExpression | ParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0() { return cLiteralExpressionParserRuleCall_0; }
		
		//ThisExpression
		public RuleCall getThisExpressionParserRuleCall_1() { return cThisExpressionParserRuleCall_1; }
		
		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_2() { return cParenthesizedExpressionParserRuleCall_2; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNaturalLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LiteralExpression Expression:
		//	BooleanLiteralExpression
		//	| NaturalLiteralExpression
		//	| StringLiteralExpression
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteralExpression | NaturalLiteralExpression | StringLiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanLiteralExpression
		public RuleCall getBooleanLiteralExpressionParserRuleCall_0() { return cBooleanLiteralExpressionParserRuleCall_0; }
		
		//NaturalLiteralExpression
		public RuleCall getNaturalLiteralExpressionParserRuleCall_1() { return cNaturalLiteralExpressionParserRuleCall_1; }
		
		//StringLiteralExpression
		public RuleCall getStringLiteralExpressionParserRuleCall_2() { return cStringLiteralExpressionParserRuleCall_2; }
	}
	public class BooleanLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.BooleanLiteralExpression");
		private final Assignment cIsTrueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_0 = (Keyword)cIsTrueAssignment.eContents().get(0);
		
		//BooleanLiteralExpression:
		//	isTrue?='true';
		@Override public ParserRule getRule() { return rule; }
		
		//isTrue?='true'
		public Assignment getIsTrueAssignment() { return cIsTrueAssignment; }
		
		//'true'
		public Keyword getIsTrueTrueKeyword_0() { return cIsTrueTrueKeyword_0; }
	}
	public class NaturalLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.NaturalLiteralExpression");
		private final Assignment cInt_valueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInt_valueINTTerminalRuleCall_0 = (RuleCall)cInt_valueAssignment.eContents().get(0);
		
		//NaturalLiteralExpression:
		//	int_value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//int_value=INT
		public Assignment getInt_valueAssignment() { return cInt_valueAssignment; }
		
		//INT
		public RuleCall getInt_valueINTTerminalRuleCall_0() { return cInt_valueINTTerminalRuleCall_0; }
	}
	public class StringLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.StringLiteralExpression");
		private final Assignment cStr_valueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStr_valueSTRINGTerminalRuleCall_0 = (RuleCall)cStr_valueAssignment.eContents().get(0);
		
		//StringLiteralExpression:
		//	str_value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//str_value=STRING
		public Assignment getStr_valueAssignment() { return cStr_valueAssignment; }
		
		//STRING
		public RuleCall getStr_valueSTRINGTerminalRuleCall_0() { return cStr_valueSTRINGTerminalRuleCall_0; }
	}
	public class ThisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ThisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ThisExpression:
		//	{ThisExpression}
		//	'this';
		@Override public ParserRule getRule() { return rule; }
		
		//{ThisExpression} 'this'
		public Group getGroup() { return cGroup; }
		
		//{ThisExpression}
		public Action getThisExpressionAction_0() { return cThisExpressionAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression Expression:
		//	'(' Expression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PropertyAccessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.PropertyAccessExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cTargetNonNameExpressionParserRuleCall_0_0_0 = (RuleCall)cTargetAssignment_0_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cTargetNameExpressionParserRuleCall_0_1_0 = (RuleCall)cTargetAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cFieldNamedElementCrossReference_2_0 = (CrossReference)cFieldAssignment_2.eContents().get(0);
		private final RuleCall cFieldNamedElementQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cFieldNamedElementCrossReference_2_0.eContents().get(1);
		
		//PropertyAccessExpression:
		//	(target=NonNameExpression | target=NameExpression) '.' field=[NamedElement|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(target=NonNameExpression | target=NameExpression) '.' field=[NamedElement|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//(target=NonNameExpression | target=NameExpression)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//target=NonNameExpression
		public Assignment getTargetAssignment_0_0() { return cTargetAssignment_0_0; }
		
		//NonNameExpression
		public RuleCall getTargetNonNameExpressionParserRuleCall_0_0_0() { return cTargetNonNameExpressionParserRuleCall_0_0_0; }
		
		//target=NameExpression
		public Assignment getTargetAssignment_0_1() { return cTargetAssignment_0_1; }
		
		//NameExpression
		public RuleCall getTargetNameExpressionParserRuleCall_0_1_0() { return cTargetNameExpressionParserRuleCall_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//field=[NamedElement|QualifiedName]
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//[NamedElement|QualifiedName]
		public CrossReference getFieldNamedElementCrossReference_2_0() { return cFieldNamedElementCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getFieldNamedElementQualifiedNameParserRuleCall_2_0_1() { return cFieldNamedElementQualifiedNameParserRuleCall_2_0_1; }
	}
	public class IncrementAndDecrementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.IncrementAndDecrementExpression");
		private final Keyword cIncKeyword = (Keyword)rule.eContents().get(1);
		
		/// * InvocationExpression returns InvocationExpression: // TODO enable all of this
		//target=[BehavioralDef|EString] tuple=Tuple
		//
		//Tuple returns Tuple:
		//	PositionalTuple | NamedTuple
		//
		//PositionalTuple returns PositionalTuple:
		//	'(' exp=Expression (exp+=Expression)* ')'
		//
		//NamedTuple returns NamedTuple:
		//	'(' exp=NamedExpression (exp+=NamedExpression)* ')'
		//
		//NamedExpression returns NamedExpression:
		//	name=EString '=>' exp=Expression
		// * / / **
		// * Increment and decrement expressions
		// * / IncrementAndDecrementExpression Expression: // TODO
		//	'inc'
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO
		//'inc'
		public Keyword getIncKeyword() { return cIncKeyword; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.UnaryExpression");
		private final Keyword cUnaryKeyword = (Keyword)rule.eContents().get(1);
		
		/// **
		// * Unary expressions
		// * / UnaryExpression Expression: // TODO
		//	'unary'
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO
		//'unary'
		public Keyword getUnaryKeyword() { return cUnaryKeyword; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.BinaryExpression");
		private final Keyword cBinKeyword = (Keyword)rule.eContents().get(1);
		
		/// **
		// * Binary Expressions
		// * / BinaryExpression Expression: // TODO
		//	'bin'
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO
		//'bin'
		public Keyword getBinKeyword() { return cBinKeyword; }
	}
	public class ConditionalAndOrConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConditionalAndOrConditionalOrExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInclusiveOrOrConditionalAndExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConditionalAndOrConditionalOrExpression Expression:
		//	InclusiveOrOrConditionalAndExpression | ConditionalOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//InclusiveOrOrConditionalAndExpression | ConditionalOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InclusiveOrOrConditionalAndExpression
		public RuleCall getInclusiveOrOrConditionalAndExpressionParserRuleCall_0() { return cInclusiveOrOrConditionalAndExpressionParserRuleCall_0; }
		
		//ConditionalOrExpression
		public RuleCall getConditionalOrExpressionParserRuleCall_1() { return cConditionalOrExpressionParserRuleCall_1; }
	}
	public class InclusiveOrOrConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.InclusiveOrOrConditionalAndExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExclusiveOrOrInclusiveOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalAndExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InclusiveOrOrConditionalAndExpression Expression:
		//	ExclusiveOrOrInclusiveOrExpression | ConditionalAndExpression
		@Override public ParserRule getRule() { return rule; }
		
		//ExclusiveOrOrInclusiveOrExpression | ConditionalAndExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExclusiveOrOrInclusiveOrExpression
		public RuleCall getExclusiveOrOrInclusiveOrExpressionParserRuleCall_0() { return cExclusiveOrOrInclusiveOrExpressionParserRuleCall_0; }
		
		//ConditionalAndExpression
		public RuleCall getConditionalAndExpressionParserRuleCall_1() { return cConditionalAndExpressionParserRuleCall_1; }
	}
	public class ExclusiveOrOrInclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ExclusiveOrOrInclusiveOrExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndOrExclusiveOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInclusiveOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExclusiveOrOrInclusiveOrExpression Expression:
		//	AndOrExclusiveOrExpression | InclusiveOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//AndOrExclusiveOrExpression | InclusiveOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AndOrExclusiveOrExpression
		public RuleCall getAndOrExclusiveOrExpressionParserRuleCall_0() { return cAndOrExclusiveOrExpressionParserRuleCall_0; }
		
		//InclusiveOrExpression
		public RuleCall getInclusiveOrExpressionParserRuleCall_1() { return cInclusiveOrExpressionParserRuleCall_1; }
	}
	public class AndOrExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.AndOrExclusiveOrExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEqualityOrAndExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExclusiveOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AndOrExclusiveOrExpression Expression:
		//	EqualityOrAndExpression | ExclusiveOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityOrAndExpression | ExclusiveOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EqualityOrAndExpression
		public RuleCall getEqualityOrAndExpressionParserRuleCall_0() { return cEqualityOrAndExpressionParserRuleCall_0; }
		
		//ExclusiveOrExpression
		public RuleCall getExclusiveOrExpressionParserRuleCall_1() { return cExclusiveOrExpressionParserRuleCall_1; }
	}
	public class EqualityOrAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EqualityOrAndExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassificationOrEqualityExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAndExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EqualityOrAndExpression Expression:
		//	ClassificationOrEqualityExpression | AndExpression
		@Override public ParserRule getRule() { return rule; }
		
		//ClassificationOrEqualityExpression | AndExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ClassificationOrEqualityExpression
		public RuleCall getClassificationOrEqualityExpressionParserRuleCall_0() { return cClassificationOrEqualityExpressionParserRuleCall_0; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_1() { return cAndExpressionParserRuleCall_1; }
	}
	public class ClassificationOrEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ClassificationOrEqualityExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationalOrClassificationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualityExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ClassificationOrEqualityExpression Expression:
		//	RelationalOrClassificationExpression | EqualityExpression
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalOrClassificationExpression | EqualityExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RelationalOrClassificationExpression
		public RuleCall getRelationalOrClassificationExpressionParserRuleCall_0() { return cRelationalOrClassificationExpressionParserRuleCall_0; }
		
		//EqualityExpression
		public RuleCall getEqualityExpressionParserRuleCall_1() { return cEqualityExpressionParserRuleCall_1; }
	}
	public class RelationalOrClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.RelationalOrClassificationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmeticOrRelationalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassificationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RelationalOrClassificationExpression Expression:
		//	ArithmeticOrRelationalExpression | ClassificationExpression
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticOrRelationalExpression | ClassificationExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArithmeticOrRelationalExpression
		public RuleCall getArithmeticOrRelationalExpressionParserRuleCall_0() { return cArithmeticOrRelationalExpressionParserRuleCall_0; }
		
		//ClassificationExpression
		public RuleCall getClassificationExpressionParserRuleCall_1() { return cClassificationExpressionParserRuleCall_1; }
	}
	public class ArithmeticOrRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ArithmeticOrRelationalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryOrArithmeticExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArithmeticOrRelationalExpression Expression:
		//	UnaryOrArithmeticExpression | RelationalExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrArithmeticExpression | RelationalExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryOrArithmeticExpression
		public RuleCall getUnaryOrArithmeticExpressionParserRuleCall_0() { return cUnaryOrArithmeticExpressionParserRuleCall_0; }
		
		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_1() { return cRelationalExpressionParserRuleCall_1; }
	}
	public class UnaryOrArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.UnaryOrArithmeticExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryOrMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAdditiveExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrArithmeticExpression Expression:
		//	UnaryOrMultiplicativeExpression | AdditiveExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrMultiplicativeExpression | AdditiveExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryOrMultiplicativeExpression
		public RuleCall getUnaryOrMultiplicativeExpressionParserRuleCall_0() { return cUnaryOrMultiplicativeExpressionParserRuleCall_0; }
		
		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_1() { return cAdditiveExpressionParserRuleCall_1; }
	}
	public class UnaryOrMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.UnaryOrMultiplicativeExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOrMultiplicativeExpression Expression:
		//	UnaryExpression | MultiplicativeExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression | MultiplicativeExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_1() { return cMultiplicativeExpressionParserRuleCall_1; }
	}
	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1UnaryExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorPercentSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2UnaryOrMultiplicativeExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//MultiplicativeExpression ArithmeticExpression:
		//	op1=UnaryExpression operator=("*" | "/" | "%") op2=UnaryOrMultiplicativeExpression
		@Override public ParserRule getRule() { return rule; }
		
		//op1=UnaryExpression operator=("*" | "/" | "%") op2=UnaryOrMultiplicativeExpression
		public Group getGroup() { return cGroup; }
		
		//op1=UnaryExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//UnaryExpression
		public RuleCall getOp1UnaryExpressionParserRuleCall_0_0() { return cOp1UnaryExpressionParserRuleCall_0_0; }
		
		//operator=("*" | "/" | "%")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("*" | "/" | "%")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_0_0() { return cOperatorAsteriskKeyword_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_0_1() { return cOperatorSolidusKeyword_1_0_1; }
		
		//"%"
		public Keyword getOperatorPercentSignKeyword_1_0_2() { return cOperatorPercentSignKeyword_1_0_2; }
		
		//op2=UnaryOrMultiplicativeExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//UnaryOrMultiplicativeExpression
		public RuleCall getOp2UnaryOrMultiplicativeExpressionParserRuleCall_2_0() { return cOp2UnaryOrMultiplicativeExpressionParserRuleCall_2_0; }
	}
	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1UnaryOrMultiplicativeExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2UnaryOrArithmeticExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//AdditiveExpression ArithmeticExpression:
		//	=> op1=UnaryOrMultiplicativeExpression operator=("+" | "-") op2=UnaryOrArithmeticExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=UnaryOrMultiplicativeExpression operator=("+" | "-") op2=UnaryOrArithmeticExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=UnaryOrMultiplicativeExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//UnaryOrMultiplicativeExpression
		public RuleCall getOp1UnaryOrMultiplicativeExpressionParserRuleCall_0_0() { return cOp1UnaryOrMultiplicativeExpressionParserRuleCall_0_0; }
		
		//operator=("+" | "-")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("+" | "-")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_0_0() { return cOperatorPlusSignKeyword_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_0_1() { return cOperatorHyphenMinusKeyword_1_0_1; }
		
		//op2=UnaryOrArithmeticExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//UnaryOrArithmeticExpression
		public RuleCall getOp2UnaryOrArithmeticExpressionParserRuleCall_2_0() { return cOp2UnaryOrArithmeticExpressionParserRuleCall_2_0; }
	}
	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ArithmeticOrShiftExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cOperatorAlternatives_1_0.eContents().get(3);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ArithmeticOrShiftExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//RelationalExpression:
		//	=> op1=ArithmeticOrShiftExpression operator=("<" | ">" | "<=" | ">=") op2=ArithmeticOrShiftExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=ArithmeticOrShiftExpression operator=("<" | ">" | "<=" | ">=") op2=ArithmeticOrShiftExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=ArithmeticOrShiftExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//ArithmeticOrShiftExpression
		public RuleCall getOp1ArithmeticOrShiftExpressionParserRuleCall_0_0() { return cOp1ArithmeticOrShiftExpressionParserRuleCall_0_0; }
		
		//operator=("<" | ">" | "<=" | ">=")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("<" | ">" | "<=" | ">=")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"<"
		public Keyword getOperatorLessThanSignKeyword_1_0_0() { return cOperatorLessThanSignKeyword_1_0_0; }
		
		//">"
		public Keyword getOperatorGreaterThanSignKeyword_1_0_1() { return cOperatorGreaterThanSignKeyword_1_0_1; }
		
		//"<="
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_0_2; }
		
		//">="
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_0_3; }
		
		//op2=ArithmeticOrShiftExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//ArithmeticOrShiftExpression
		public RuleCall getOp2ArithmeticOrShiftExpressionParserRuleCall_2_0() { return cOp2ArithmeticOrShiftExpressionParserRuleCall_2_0; }
	}
	public class ArithmeticOrShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ArithmeticOrShiftExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryOrArithmeticExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cShiftExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArithmeticOrShiftExpression Expression:
		//	UnaryOrArithmeticExpression | ShiftExpression
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOrArithmeticExpression | ShiftExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryOrArithmeticExpression
		public RuleCall getUnaryOrArithmeticExpressionParserRuleCall_0() { return cUnaryOrArithmeticExpressionParserRuleCall_0; }
		
		//ShiftExpression
		public RuleCall getShiftExpressionParserRuleCall_1() { return cShiftExpressionParserRuleCall_1; }
	}
	public class ShiftExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ShiftExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1UnaryOrArithmeticExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignLessThanSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ArithmeticOrShiftExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//ShiftExpression:
		//	=> op1=UnaryOrArithmeticExpression operator=("<<" | ">>" | ">>>") op2=ArithmeticOrShiftExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=UnaryOrArithmeticExpression operator=("<<" | ">>" | ">>>") op2=ArithmeticOrShiftExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=UnaryOrArithmeticExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//UnaryOrArithmeticExpression
		public RuleCall getOp1UnaryOrArithmeticExpressionParserRuleCall_0_0() { return cOp1UnaryOrArithmeticExpressionParserRuleCall_0_0; }
		
		//operator=("<<" | ">>" | ">>>")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("<<" | ">>" | ">>>")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"<<"
		public Keyword getOperatorLessThanSignLessThanSignKeyword_1_0_0() { return cOperatorLessThanSignLessThanSignKeyword_1_0_0; }
		
		//">>"
		public Keyword getOperatorGreaterThanSignGreaterThanSignKeyword_1_0_1() { return cOperatorGreaterThanSignGreaterThanSignKeyword_1_0_1; }
		
		//">>>"
		public Keyword getOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_2() { return cOperatorGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_2; }
		
		//op2=ArithmeticOrShiftExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//ArithmeticOrShiftExpression
		public RuleCall getOp2ArithmeticOrShiftExpressionParserRuleCall_2_0() { return cOp2ArithmeticOrShiftExpressionParserRuleCall_2_0; }
	}
	public class ClassificationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ClassificationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpArithmeticOrRelationalExpressionParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorInstanceofKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorHastypeKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeNameTypeDefCrossReference_2_0 = (CrossReference)cTypeNameAssignment_2.eContents().get(0);
		private final RuleCall cTypeNameTypeDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeNameTypeDefCrossReference_2_0.eContents().get(1);
		
		//ClassificationExpression:
		//	=> op=ArithmeticOrRelationalExpression operator=("instanceof" | "hastype") typeName=[TypeDef|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//=> op=ArithmeticOrRelationalExpression operator=("instanceof" | "hastype") typeName=[TypeDef|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//=> op=ArithmeticOrRelationalExpression
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//ArithmeticOrRelationalExpression
		public RuleCall getOpArithmeticOrRelationalExpressionParserRuleCall_0_0() { return cOpArithmeticOrRelationalExpressionParserRuleCall_0_0; }
		
		//operator=("instanceof" | "hastype")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("instanceof" | "hastype")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"instanceof"
		public Keyword getOperatorInstanceofKeyword_1_0_0() { return cOperatorInstanceofKeyword_1_0_0; }
		
		//"hastype"
		public Keyword getOperatorHastypeKeyword_1_0_1() { return cOperatorHastypeKeyword_1_0_1; }
		
		//typeName=[TypeDef|QualifiedName]
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getTypeNameTypeDefCrossReference_2_0() { return cTypeNameTypeDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getTypeNameTypeDefQualifiedNameParserRuleCall_2_0_1() { return cTypeNameTypeDefQualifiedNameParserRuleCall_2_0_1; }
	}
	public class EqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1RelationalOrClassificationExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ClassificationOrEqualityExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//EqualityExpression LogicalExpression:
		//	=> op1=RelationalOrClassificationExpression operator=("=" | "!=") op2=ClassificationOrEqualityExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=RelationalOrClassificationExpression operator=("=" | "!=") op2=ClassificationOrEqualityExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=RelationalOrClassificationExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//RelationalOrClassificationExpression
		public RuleCall getOp1RelationalOrClassificationExpressionParserRuleCall_0_0() { return cOp1RelationalOrClassificationExpressionParserRuleCall_0_0; }
		
		//operator=("=" | "!=")
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//("=" | "!=")
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//"="
		public Keyword getOperatorEqualsSignKeyword_1_0_0() { return cOperatorEqualsSignKeyword_1_0_0; }
		
		//"!="
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_0_1; }
		
		//op2=ClassificationOrEqualityExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//ClassificationOrEqualityExpression
		public RuleCall getOp2ClassificationOrEqualityExpressionParserRuleCall_2_0() { return cOp2ClassificationOrEqualityExpressionParserRuleCall_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ClassificationOrEqualityExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2EqualityOrAndExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//AndExpression LogicalExpression:
		//	=> op1=ClassificationOrEqualityExpression operator="&" op2=EqualityOrAndExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=ClassificationOrEqualityExpression operator="&" op2=EqualityOrAndExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=ClassificationOrEqualityExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//ClassificationOrEqualityExpression
		public RuleCall getOp1ClassificationOrEqualityExpressionParserRuleCall_0_0() { return cOp1ClassificationOrEqualityExpressionParserRuleCall_0_0; }
		
		//operator="&"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//"&"
		public Keyword getOperatorAmpersandKeyword_1_0() { return cOperatorAmpersandKeyword_1_0; }
		
		//op2=EqualityOrAndExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//EqualityOrAndExpression
		public RuleCall getOp2EqualityOrAndExpressionParserRuleCall_2_0() { return cOp2EqualityOrAndExpressionParserRuleCall_2_0; }
	}
	public class ExclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ExclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1EqualityOrAndExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperatorCircumflexAccentKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2AndOrExclusiveOrExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//ExclusiveOrExpression LogicalExpression:
		//	=> op1=EqualityOrAndExpression operator="^" op2=AndOrExclusiveOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=EqualityOrAndExpression operator="^" op2=AndOrExclusiveOrExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=EqualityOrAndExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//EqualityOrAndExpression
		public RuleCall getOp1EqualityOrAndExpressionParserRuleCall_0_0() { return cOp1EqualityOrAndExpressionParserRuleCall_0_0; }
		
		//operator="^"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//"^"
		public Keyword getOperatorCircumflexAccentKeyword_1_0() { return cOperatorCircumflexAccentKeyword_1_0; }
		
		//op2=AndOrExclusiveOrExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//AndOrExclusiveOrExpression
		public RuleCall getOp2AndOrExclusiveOrExpressionParserRuleCall_2_0() { return cOp2AndOrExclusiveOrExpressionParserRuleCall_2_0; }
	}
	public class InclusiveOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.InclusiveOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1AndOrExclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperatorVerticalLineKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ExclusiveOrOrInclusiveOrExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//InclusiveOrExpression LogicalExpression:
		//	=> op1=AndOrExclusiveOrExpression operator="|" op2=ExclusiveOrOrInclusiveOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=AndOrExclusiveOrExpression operator="|" op2=ExclusiveOrOrInclusiveOrExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=AndOrExclusiveOrExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//AndOrExclusiveOrExpression
		public RuleCall getOp1AndOrExclusiveOrExpressionParserRuleCall_0_0() { return cOp1AndOrExclusiveOrExpressionParserRuleCall_0_0; }
		
		//operator="|"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//"|"
		public Keyword getOperatorVerticalLineKeyword_1_0() { return cOperatorVerticalLineKeyword_1_0; }
		
		//op2=ExclusiveOrOrInclusiveOrExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//ExclusiveOrOrInclusiveOrExpression
		public RuleCall getOp2ExclusiveOrOrInclusiveOrExpressionParserRuleCall_2_0() { return cOp2ExclusiveOrOrInclusiveOrExpressionParserRuleCall_2_0; }
	}
	public class ConditionalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConditionalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ExclusiveOrOrInclusiveOrExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2InclusiveOrOrConditionalAndExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//ConditionalAndExpression ConditionalLogicalExpression:
		//	=> op1=ExclusiveOrOrInclusiveOrExpression operator="&&" op2=InclusiveOrOrConditionalAndExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=ExclusiveOrOrInclusiveOrExpression operator="&&" op2=InclusiveOrOrConditionalAndExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=ExclusiveOrOrInclusiveOrExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//ExclusiveOrOrInclusiveOrExpression
		public RuleCall getOp1ExclusiveOrOrInclusiveOrExpressionParserRuleCall_0_0() { return cOp1ExclusiveOrOrInclusiveOrExpressionParserRuleCall_0_0; }
		
		//operator="&&"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//"&&"
		public Keyword getOperatorAmpersandAmpersandKeyword_1_0() { return cOperatorAmpersandAmpersandKeyword_1_0; }
		
		//op2=InclusiveOrOrConditionalAndExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//InclusiveOrOrConditionalAndExpression
		public RuleCall getOp2InclusiveOrOrConditionalAndExpressionParserRuleCall_2_0() { return cOp2InclusiveOrOrConditionalAndExpressionParserRuleCall_2_0; }
	}
	public class ConditionalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConditionalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1InclusiveOrOrConditionalAndExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_0 = (Keyword)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ConditionalAndOrConditionalOrExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		
		//ConditionalOrExpression ConditionalLogicalExpression:
		//	=> op1=InclusiveOrOrConditionalAndExpression operator="||" op2=ConditionalAndOrConditionalOrExpression
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=InclusiveOrOrConditionalAndExpression operator="||" op2=ConditionalAndOrConditionalOrExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=InclusiveOrOrConditionalAndExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//InclusiveOrOrConditionalAndExpression
		public RuleCall getOp1InclusiveOrOrConditionalAndExpressionParserRuleCall_0_0() { return cOp1InclusiveOrOrConditionalAndExpressionParserRuleCall_0_0; }
		
		//operator="||"
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//"||"
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_0; }
		
		//op2=ConditionalAndOrConditionalOrExpression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//ConditionalAndOrConditionalOrExpression
		public RuleCall getOp2ConditionalAndOrConditionalOrExpressionParserRuleCall_2_0() { return cOp2ConditionalAndOrConditionalOrExpressionParserRuleCall_2_0; }
	}
	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConditionalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalAndOrConditionalOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalTestExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Conditional (ternary operation) expressions
		// * / ConditionalExpression Expression:
		//	ConditionalAndOrConditionalOrExpression | ConditionalTestExpression
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalAndOrConditionalOrExpression | ConditionalTestExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalAndOrConditionalOrExpression
		public RuleCall getConditionalAndOrConditionalOrExpressionParserRuleCall_0() { return cConditionalAndOrConditionalOrExpressionParserRuleCall_0; }
		
		//ConditionalTestExpression
		public RuleCall getConditionalTestExpressionParserRuleCall_1() { return cConditionalTestExpressionParserRuleCall_1; }
	}
	public class ConditionalTestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConditionalTestExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOp1ConditionalAndOrConditionalOrExpressionParserRuleCall_0_0 = (RuleCall)cOp1Assignment_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOp2ExpressionParserRuleCall_2_0 = (RuleCall)cOp2Assignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOp3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOp3ConditionalExpressionParserRuleCall_4_0 = (RuleCall)cOp3Assignment_4.eContents().get(0);
		
		//ConditionalTestExpression:
		//	=> op1=ConditionalAndOrConditionalOrExpression "?" op2=Expression ":" op3=ConditionalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> op1=ConditionalAndOrConditionalOrExpression "?" op2=Expression ":" op3=ConditionalExpression
		public Group getGroup() { return cGroup; }
		
		//=> op1=ConditionalAndOrConditionalOrExpression
		public Assignment getOp1Assignment_0() { return cOp1Assignment_0; }
		
		//ConditionalAndOrConditionalOrExpression
		public RuleCall getOp1ConditionalAndOrConditionalOrExpressionParserRuleCall_0_0() { return cOp1ConditionalAndOrConditionalOrExpressionParserRuleCall_0_0; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
		
		//op2=Expression
		public Assignment getOp2Assignment_2() { return cOp2Assignment_2; }
		
		//Expression
		public RuleCall getOp2ExpressionParserRuleCall_2_0() { return cOp2ExpressionParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//op3=ConditionalExpression
		public Assignment getOp3Assignment_4() { return cOp3Assignment_4; }
		
		//ConditionalExpression
		public RuleCall getOp3ConditionalExpressionParserRuleCall_4_0() { return cOp3ConditionalExpressionParserRuleCall_4_0; }
	}
	public class AssignmentExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.AssignmentExpression");
		private final Keyword cAssKeyword = (Keyword)rule.eContents().get(1);
		
		/// **
		// * Assignment expressions (TODO check AssignmentStatement)
		// * / AssignmentExpression Expression: // TODO
		//	'ass'
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO
		//'ass'
		public Keyword getAssKeyword() { return cAssKeyword; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAnyKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/// **
		// * Name reference and naming rules
		// * / TypeName:
		//	QualifiedName
		//	| 'any' // TODO check this, will have impact on diagrams
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName | 'any'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'any'
		public Keyword getAnyKeyword_1() { return cAnyKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cColonQualifiedNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDotQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//QualifiedName:
		//	ColonQualifiedName
		//	| DotQualifiedName
		//	| ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ColonQualifiedName | DotQualifiedName | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ColonQualifiedName
		public RuleCall getColonQualifiedNameParserRuleCall_0() { return cColonQualifiedNameParserRuleCall_0; }
		
		//DotQualifiedName
		public RuleCall getDotQualifiedNameParserRuleCall_1() { return cDotQualifiedNameParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class ColonQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ColonQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ColonQualifiedName:
		//	ID '::' QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '::' QualifiedName
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_2() { return cQualifiedNameParserRuleCall_2; }
	}
	public class DotQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.DotQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DotQualifiedName:
		//	ID ('.' ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		/// **
		// * Other stuff
		// * / EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cComponentsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cComponentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cComponentsComponentUseParserRuleCall_3_2_0 = (RuleCall)cComponentsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConnectorsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConnectorsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConnectorsConnectorUseParserRuleCall_4_2_0 = (RuleCall)cConnectorsAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDelegationsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDelegationsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDelegationsDelegationParserRuleCall_5_2_0 = (RuleCall)cDelegationsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Configuration:
		//	{Configuration}
		//	'configuration'
		//	'{' ('components' ':' components+=ComponentUse*)? ('connectors' ':' connectors+=ConnectorUse*)? ('delegations' ':'
		//	delegations+=Delegation*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Configuration} 'configuration' '{' ('components' ':' components+=ComponentUse*)? ('connectors' ':'
		//connectors+=ConnectorUse*)? ('delegations' ':' delegations+=Delegation*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }
		
		//'configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('components' ':' components+=ComponentUse*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'components'
		public Keyword getComponentsKeyword_3_0() { return cComponentsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//components+=ComponentUse*
		public Assignment getComponentsAssignment_3_2() { return cComponentsAssignment_3_2; }
		
		//ComponentUse
		public RuleCall getComponentsComponentUseParserRuleCall_3_2_0() { return cComponentsComponentUseParserRuleCall_3_2_0; }
		
		//('connectors' ':' connectors+=ConnectorUse*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'connectors'
		public Keyword getConnectorsKeyword_4_0() { return cConnectorsKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//connectors+=ConnectorUse*
		public Assignment getConnectorsAssignment_4_2() { return cConnectorsAssignment_4_2; }
		
		//ConnectorUse
		public RuleCall getConnectorsConnectorUseParserRuleCall_4_2_0() { return cConnectorsConnectorUseParserRuleCall_4_2_0; }
		
		//('delegations' ':' delegations+=Delegation*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'delegations'
		public Keyword getDelegationsKeyword_5_0() { return cDelegationsKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//delegations+=Delegation*
		public Assignment getDelegationsAssignment_5_2() { return cDelegationsAssignment_5_2; }
		
		//Delegation
		public RuleCall getDelegationsDelegationParserRuleCall_5_2_0() { return cDelegationsDelegationParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Delegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFullPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFullPortPortUseCrossReference_0_0 = (CrossReference)cFullPortAssignment_0.eContents().get(0);
		private final RuleCall cFullPortPortUseQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFullPortPortUseCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPortProxyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cPortProxyPortUseCrossReference_2_0 = (CrossReference)cPortProxyAssignment_2.eContents().get(0);
		private final RuleCall cPortProxyPortUseQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cPortProxyPortUseCrossReference_2_0.eContents().get(1);
		
		//Delegation:
		//	fullPort=[PortUse|QualifiedName] 'to' portProxy=[PortUse|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//fullPort=[PortUse|QualifiedName] 'to' portProxy=[PortUse|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//fullPort=[PortUse|QualifiedName]
		public Assignment getFullPortAssignment_0() { return cFullPortAssignment_0; }
		
		//[PortUse|QualifiedName]
		public CrossReference getFullPortPortUseCrossReference_0_0() { return cFullPortPortUseCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getFullPortPortUseQualifiedNameParserRuleCall_0_0_1() { return cFullPortPortUseQualifiedNameParserRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//portProxy=[PortUse|QualifiedName]
		public Assignment getPortProxyAssignment_2() { return cPortProxyAssignment_2; }
		
		//[PortUse|QualifiedName]
		public CrossReference getPortProxyPortUseCrossReference_2_0() { return cPortProxyPortUseCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getPortProxyPortUseQualifiedNameParserRuleCall_2_0_1() { return cPortProxyPortUseQualifiedNameParserRuleCall_2_0_1; }
	}
	public class FlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Flow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFlowTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFlowTypeTypeDefCrossReference_0_0 = (CrossReference)cFlowTypeAssignment_0.eContents().get(0);
		private final RuleCall cFlowTypeTypeDefQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFlowTypeTypeDefCrossReference_0_0.eContents().get(1);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourcePortUseCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourcePortUseQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSourcePortUseCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDestinationPortUseCrossReference_4_0 = (CrossReference)cDestinationAssignment_4.eContents().get(0);
		private final RuleCall cDestinationPortUseQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cDestinationPortUseCrossReference_4_0.eContents().get(1);
		
		//Flow:
		//	flowType=[TypeDef|QualifiedName] 'from' source=[PortUse|QualifiedName] 'to' destination=[PortUse|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//flowType=[TypeDef|QualifiedName] 'from' source=[PortUse|QualifiedName] 'to' destination=[PortUse|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//flowType=[TypeDef|QualifiedName]
		public Assignment getFlowTypeAssignment_0() { return cFlowTypeAssignment_0; }
		
		//[TypeDef|QualifiedName]
		public CrossReference getFlowTypeTypeDefCrossReference_0_0() { return cFlowTypeTypeDefCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getFlowTypeTypeDefQualifiedNameParserRuleCall_0_0_1() { return cFlowTypeTypeDefQualifiedNameParserRuleCall_0_0_1; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//source=[PortUse|QualifiedName]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[PortUse|QualifiedName]
		public CrossReference getSourcePortUseCrossReference_2_0() { return cSourcePortUseCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSourcePortUseQualifiedNameParserRuleCall_2_0_1() { return cSourcePortUseQualifiedNameParserRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//destination=[PortUse|QualifiedName]
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }
		
		//[PortUse|QualifiedName]
		public CrossReference getDestinationPortUseCrossReference_4_0() { return cDestinationPortUseCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getDestinationPortUseQualifiedNameParserRuleCall_4_0_1() { return cDestinationPortUseQualifiedNameParserRuleCall_4_0_1; }
	}
	public class ConnectorBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConnectorBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstPortAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFirstPortPortUseCrossReference_0_0 = (CrossReference)cFirstPortAssignment_0.eContents().get(0);
		private final RuleCall cFirstPortPortUseQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cFirstPortPortUseCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSecondPortPortUseCrossReference_2_0 = (CrossReference)cSecondPortAssignment_2.eContents().get(0);
		private final RuleCall cSecondPortPortUseQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSecondPortPortUseCrossReference_2_0.eContents().get(1);
		
		//ConnectorBinding:
		//	firstPort=[PortUse|QualifiedName] '=' secondPort=[PortUse|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//firstPort=[PortUse|QualifiedName] '=' secondPort=[PortUse|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//firstPort=[PortUse|QualifiedName]
		public Assignment getFirstPortAssignment_0() { return cFirstPortAssignment_0; }
		
		//[PortUse|QualifiedName]
		public CrossReference getFirstPortPortUseCrossReference_0_0() { return cFirstPortPortUseCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getFirstPortPortUseQualifiedNameParserRuleCall_0_0_1() { return cFirstPortPortUseQualifiedNameParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//secondPort=[PortUse|QualifiedName]
		public Assignment getSecondPortAssignment_2() { return cSecondPortAssignment_2; }
		
		//[PortUse|QualifiedName]
		public CrossReference getSecondPortPortUseCrossReference_2_0() { return cSecondPortPortUseCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSecondPortPortUseQualifiedNameParserRuleCall_2_0_1() { return cSecondPortPortUseQualifiedNameParserRuleCall_2_0_1; }
	}
	public class ConstraintUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConstraintUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintUseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindConstraintKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cDefinitionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDefinitionConstraintDefCrossReference_2_0 = (CrossReference)cDefinitionAssignment_2.eContents().get(0);
		private final RuleCall cDefinitionConstraintDefQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDefinitionConstraintDefCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cParamsTypeUseCrossReference_4_0_0 = (CrossReference)cParamsAssignment_4_0.eContents().get(0);
		private final RuleCall cParamsTypeUseQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cParamsTypeUseCrossReference_4_0_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cParamsTypeUseCrossReference_4_1_1_0 = (CrossReference)cParamsAssignment_4_1_1.eContents().get(0);
		private final RuleCall cParamsTypeUseQualifiedNameParserRuleCall_4_1_1_0_1 = (RuleCall)cParamsTypeUseCrossReference_4_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConstraintUse:
		//	{ConstraintUse} kind=ConstraintKind definition=[ConstraintDef|QualifiedName] '(' (params+=[TypeUse|QualifiedName]
		//	("," params+=[TypeUse|QualifiedName])*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintUse} kind=ConstraintKind definition=[ConstraintDef|QualifiedName] '(' (params+=[TypeUse|QualifiedName] (","
		//params+=[TypeUse|QualifiedName])*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{ConstraintUse}
		public Action getConstraintUseAction_0() { return cConstraintUseAction_0; }
		
		//kind=ConstraintKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//ConstraintKind
		public RuleCall getKindConstraintKindEnumRuleCall_1_0() { return cKindConstraintKindEnumRuleCall_1_0; }
		
		//definition=[ConstraintDef|QualifiedName]
		public Assignment getDefinitionAssignment_2() { return cDefinitionAssignment_2; }
		
		//[ConstraintDef|QualifiedName]
		public CrossReference getDefinitionConstraintDefCrossReference_2_0() { return cDefinitionConstraintDefCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDefinitionConstraintDefQualifiedNameParserRuleCall_2_0_1() { return cDefinitionConstraintDefQualifiedNameParserRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(params+=[TypeUse|QualifiedName] ("," params+=[TypeUse|QualifiedName])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//params+=[TypeUse|QualifiedName]
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }
		
		//[TypeUse|QualifiedName]
		public CrossReference getParamsTypeUseCrossReference_4_0_0() { return cParamsTypeUseCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getParamsTypeUseQualifiedNameParserRuleCall_4_0_0_1() { return cParamsTypeUseQualifiedNameParserRuleCall_4_0_0_1; }
		
		//("," params+=[TypeUse|QualifiedName])*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//params+=[TypeUse|QualifiedName]
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }
		
		//[TypeUse|QualifiedName]
		public CrossReference getParamsTypeUseCrossReference_4_1_1_0() { return cParamsTypeUseCrossReference_4_1_1_0; }
		
		//QualifiedName
		public RuleCall getParamsTypeUseQualifiedNameParserRuleCall_4_1_1_0_1() { return cParamsTypeUseQualifiedNameParserRuleCall_4_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ActivityDelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityDelegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelegateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceActivityFlowableCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceActivityFlowableQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cSourceActivityFlowableCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cTargetActivityFlowableCrossReference_3_0_0 = (CrossReference)cTargetAssignment_3_0.eContents().get(0);
		private final RuleCall cTargetActivityFlowableQualifiedNameParserRuleCall_3_0_0_1 = (RuleCall)cTargetActivityFlowableCrossReference_3_0_0.eContents().get(1);
		private final Assignment cTargetSwitchAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cTargetSwitchActivitySwitchParserRuleCall_3_1_0 = (RuleCall)cTargetSwitchAssignment_3_1.eContents().get(0);
		
		//ActivityDelegation:
		//	'delegate' source=[ActivityFlowable|QualifiedName] 'to' (target=[ActivityFlowable|QualifiedName] |
		//	targetSwitch=ActivitySwitch);
		@Override public ParserRule getRule() { return rule; }
		
		//'delegate' source=[ActivityFlowable|QualifiedName] 'to' (target=[ActivityFlowable|QualifiedName] |
		//targetSwitch=ActivitySwitch)
		public Group getGroup() { return cGroup; }
		
		//'delegate'
		public Keyword getDelegateKeyword_0() { return cDelegateKeyword_0; }
		
		//source=[ActivityFlowable|QualifiedName]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[ActivityFlowable|QualifiedName]
		public CrossReference getSourceActivityFlowableCrossReference_1_0() { return cSourceActivityFlowableCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getSourceActivityFlowableQualifiedNameParserRuleCall_1_0_1() { return cSourceActivityFlowableQualifiedNameParserRuleCall_1_0_1; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//(target=[ActivityFlowable|QualifiedName] | targetSwitch=ActivitySwitch)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//target=[ActivityFlowable|QualifiedName]
		public Assignment getTargetAssignment_3_0() { return cTargetAssignment_3_0; }
		
		//[ActivityFlowable|QualifiedName]
		public CrossReference getTargetActivityFlowableCrossReference_3_0_0() { return cTargetActivityFlowableCrossReference_3_0_0; }
		
		//QualifiedName
		public RuleCall getTargetActivityFlowableQualifiedNameParserRuleCall_3_0_0_1() { return cTargetActivityFlowableQualifiedNameParserRuleCall_3_0_0_1; }
		
		//targetSwitch=ActivitySwitch
		public Assignment getTargetSwitchAssignment_3_1() { return cTargetSwitchAssignment_3_1; }
		
		//ActivitySwitch
		public RuleCall getTargetSwitchActivitySwitchParserRuleCall_3_1_0() { return cTargetSwitchActivitySwitchParserRuleCall_3_1_0; }
	}
	public class ActivitySwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivitySwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivitySwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCasesActivitySwitchCaseParserRuleCall_3_0_0 = (RuleCall)cCasesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cCasesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cCasesActivitySwitchCaseParserRuleCall_3_1_1_0 = (RuleCall)cCasesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActivitySwitch:
		//	{ActivitySwitch}
		//	'switch'
		//	'{' (cases+=ActivitySwitchCase ("," cases+=ActivitySwitchCase)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivitySwitch} 'switch' '{' (cases+=ActivitySwitchCase ("," cases+=ActivitySwitchCase)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ActivitySwitch}
		public Action getActivitySwitchAction_0() { return cActivitySwitchAction_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(cases+=ActivitySwitchCase ("," cases+=ActivitySwitchCase)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//cases+=ActivitySwitchCase
		public Assignment getCasesAssignment_3_0() { return cCasesAssignment_3_0; }
		
		//ActivitySwitchCase
		public RuleCall getCasesActivitySwitchCaseParserRuleCall_3_0_0() { return cCasesActivitySwitchCaseParserRuleCall_3_0_0; }
		
		//("," cases+=ActivitySwitchCase)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//cases+=ActivitySwitchCase
		public Assignment getCasesAssignment_3_1_1() { return cCasesAssignment_3_1_1; }
		
		//ActivitySwitchCase
		public RuleCall getCasesActivitySwitchCaseParserRuleCall_3_1_1_0() { return cCasesActivitySwitchCaseParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ActivitySwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivitySwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivitySwitchCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetActivityFlowableCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetActivityFlowableQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cTargetActivityFlowableCrossReference_4_0.eContents().get(1);
		
		//ActivitySwitchCase:
		//	{ActivitySwitchCase}
		//	'case' condition=Expression ':' target=[ActivityFlowable|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivitySwitchCase} 'case' condition=Expression ':' target=[ActivityFlowable|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//{ActivitySwitchCase}
		public Action getActivitySwitchCaseAction_0() { return cActivitySwitchCaseAction_0; }
		
		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//target=[ActivityFlowable|QualifiedName]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[ActivityFlowable|QualifiedName]
		public CrossReference getTargetActivityFlowableCrossReference_4_0() { return cTargetActivityFlowableCrossReference_4_0; }
		
		//QualifiedName
		public RuleCall getTargetActivityFlowableQualifiedNameParserRuleCall_4_0_1() { return cTargetActivityFlowableQualifiedNameParserRuleCall_4_0_1; }
	}
	public class ActivityBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cActionsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cActionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cActionsActionUseParserRuleCall_3_2_0 = (RuleCall)cActionsAssignment_3_2.eContents().get(0);
		private final Assignment cFlowsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFlowsActivityRelationParserRuleCall_4_0 = (RuleCall)cFlowsAssignment_4.eContents().get(0);
		private final Assignment cDataObjectsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDataObjectsDataObjectParserRuleCall_5_0 = (RuleCall)cDataObjectsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ActivityBody:
		//	{ActivityBody}
		//	'body'
		//	'{' ('actions' ':' actions+=ActionUse*)?
		//	flows+=ActivityRelation*
		//	dataObjects+=DataObject*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivityBody} 'body' '{' ('actions' ':' actions+=ActionUse*)? flows+=ActivityRelation* dataObjects+=DataObject* '}'
		public Group getGroup() { return cGroup; }
		
		//{ActivityBody}
		public Action getActivityBodyAction_0() { return cActivityBodyAction_0; }
		
		//'body'
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('actions' ':' actions+=ActionUse*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'actions'
		public Keyword getActionsKeyword_3_0() { return cActionsKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//actions+=ActionUse*
		public Assignment getActionsAssignment_3_2() { return cActionsAssignment_3_2; }
		
		//ActionUse
		public RuleCall getActionsActionUseParserRuleCall_3_2_0() { return cActionsActionUseParserRuleCall_3_2_0; }
		
		//flows+=ActivityRelation*
		public Assignment getFlowsAssignment_4() { return cFlowsAssignment_4; }
		
		//ActivityRelation
		public RuleCall getFlowsActivityRelationParserRuleCall_4_0() { return cFlowsActivityRelationParserRuleCall_4_0; }
		
		//dataObjects+=DataObject*
		public Assignment getDataObjectsAssignment_5() { return cDataObjectsAssignment_5; }
		
		//DataObject
		public RuleCall getDataObjectsDataObjectParserRuleCall_5_0() { return cDataObjectsDataObjectParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ProtocolBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ProtocolBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtocolBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRecControlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecControlProtocolControlEnumRuleCall_1_0 = (RuleCall)cRecControlAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyProtocolBodyInternalParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRecTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRecTypeProtocolAlternativeTypeEnumRuleCall_3_0_0 = (RuleCall)cRecTypeAssignment_3_0.eContents().get(0);
		private final Assignment cRecursiveAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRecursiveProtocolBodyParserRuleCall_3_1_0 = (RuleCall)cRecursiveAssignment_3_1.eContents().get(0);
		
		//ProtocolBody:
		//	{ProtocolBody} recControl=ProtocolControl body=ProtocolBodyInternal (recType=ProtocolAlternativeType
		//	recursive=ProtocolBody)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtocolBody} recControl=ProtocolControl body=ProtocolBodyInternal (recType=ProtocolAlternativeType
		//recursive=ProtocolBody)?
		public Group getGroup() { return cGroup; }
		
		//{ProtocolBody}
		public Action getProtocolBodyAction_0() { return cProtocolBodyAction_0; }
		
		//recControl=ProtocolControl
		public Assignment getRecControlAssignment_1() { return cRecControlAssignment_1; }
		
		//ProtocolControl
		public RuleCall getRecControlProtocolControlEnumRuleCall_1_0() { return cRecControlProtocolControlEnumRuleCall_1_0; }
		
		//body=ProtocolBodyInternal
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }
		
		//ProtocolBodyInternal
		public RuleCall getBodyProtocolBodyInternalParserRuleCall_2_0() { return cBodyProtocolBodyInternalParserRuleCall_2_0; }
		
		//(recType=ProtocolAlternativeType recursive=ProtocolBody)?
		public Group getGroup_3() { return cGroup_3; }
		
		//recType=ProtocolAlternativeType
		public Assignment getRecTypeAssignment_3_0() { return cRecTypeAssignment_3_0; }
		
		//ProtocolAlternativeType
		public RuleCall getRecTypeProtocolAlternativeTypeEnumRuleCall_3_0_0() { return cRecTypeProtocolAlternativeTypeEnumRuleCall_3_0_0; }
		
		//recursive=ProtocolBody
		public Assignment getRecursiveAssignment_3_1() { return cRecursiveAssignment_3_1; }
		
		//ProtocolBody
		public RuleCall getRecursiveProtocolBodyParserRuleCall_3_1_0() { return cRecursiveProtocolBodyParserRuleCall_3_1_0; }
	}
	public class ProtocolBodyInternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ProtocolBodyInternal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cProtocolBodyParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cActionSendParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionReceiveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ProtocolBodyInternal:
		//	'(' ProtocolBody ')' | ActionSend | ActionReceive;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ProtocolBody ')' | ActionSend | ActionReceive
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ProtocolBody ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ProtocolBody
		public RuleCall getProtocolBodyParserRuleCall_0_1() { return cProtocolBodyParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//ActionSend
		public RuleCall getActionSendParserRuleCall_1() { return cActionSendParserRuleCall_1; }
		
		//ActionReceive
		public RuleCall getActionReceiveParserRuleCall_2() { return cActionReceiveParserRuleCall_2; }
	}
	public class ActionSendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActionSend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cViaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlowToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFlowToPinCrossReference_3_0 = (CrossReference)cFlowToAssignment_3.eContents().get(0);
		private final RuleCall cFlowToPinQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFlowToPinCrossReference_3_0.eContents().get(1);
		
		//ActionSend:
		//	'send' expr=Expression 'via' flowTo=[Pin|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'send' expr=Expression 'via' flowTo=[Pin|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'send'
		public Keyword getSendKeyword_0() { return cSendKeyword_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
		
		//'via'
		public Keyword getViaKeyword_2() { return cViaKeyword_2; }
		
		//flowTo=[Pin|QualifiedName]
		public Assignment getFlowToAssignment_3() { return cFlowToAssignment_3; }
		
		//[Pin|QualifiedName]
		public CrossReference getFlowToPinCrossReference_3_0() { return cFlowToPinCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getFlowToPinQualifiedNameParserRuleCall_3_0_1() { return cFlowToPinQualifiedNameParserRuleCall_3_0_1; }
	}
	public class ActionReceiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActionReceive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarTypeUseParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFlowToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFlowToPinCrossReference_3_0 = (CrossReference)cFlowToAssignment_3.eContents().get(0);
		private final RuleCall cFlowToPinQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cFlowToPinCrossReference_3_0.eContents().get(1);
		
		//ActionReceive:
		//	'receive' var=TypeUse 'from' flowTo=[Pin|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//'receive' var=TypeUse 'from' flowTo=[Pin|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//'receive'
		public Keyword getReceiveKeyword_0() { return cReceiveKeyword_0; }
		
		//var=TypeUse
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//TypeUse
		public RuleCall getVarTypeUseParserRuleCall_1_0() { return cVarTypeUseParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//flowTo=[Pin|QualifiedName]
		public Assignment getFlowToAssignment_3() { return cFlowToAssignment_3; }
		
		//[Pin|QualifiedName]
		public CrossReference getFlowToPinCrossReference_3_0() { return cFlowToPinCrossReference_3_0; }
		
		//QualifiedName
		public RuleCall getFlowToPinQualifiedNameParserRuleCall_3_0_1() { return cFlowToPinQualifiedNameParserRuleCall_3_0_1; }
	}
	public class ActivityFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceActivityFlowableCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceActivityFlowableQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSourceActivityFlowableCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cTargetActivityFlowableCrossReference_4_0_0 = (CrossReference)cTargetAssignment_4_0.eContents().get(0);
		private final RuleCall cTargetActivityFlowableQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cTargetActivityFlowableCrossReference_4_0_0.eContents().get(1);
		private final Assignment cTargetSwitchAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTargetSwitchActivitySwitchParserRuleCall_4_1_0 = (RuleCall)cTargetSwitchAssignment_4_1.eContents().get(0);
		
		//ActivityFlow:
		//	'flow'
		//	'from' source=[ActivityFlowable|QualifiedName]
		//	'to' (target=[ActivityFlowable|QualifiedName] | targetSwitch=ActivitySwitch)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'flow' 'from' source=[ActivityFlowable|QualifiedName] 'to' (target=[ActivityFlowable|QualifiedName] |
		//targetSwitch=ActivitySwitch)?
		public Group getGroup() { return cGroup; }
		
		//'flow'
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//source=[ActivityFlowable|QualifiedName]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[ActivityFlowable|QualifiedName]
		public CrossReference getSourceActivityFlowableCrossReference_2_0() { return cSourceActivityFlowableCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getSourceActivityFlowableQualifiedNameParserRuleCall_2_0_1() { return cSourceActivityFlowableQualifiedNameParserRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//(target=[ActivityFlowable|QualifiedName] | targetSwitch=ActivitySwitch)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//target=[ActivityFlowable|QualifiedName]
		public Assignment getTargetAssignment_4_0() { return cTargetAssignment_4_0; }
		
		//[ActivityFlowable|QualifiedName]
		public CrossReference getTargetActivityFlowableCrossReference_4_0_0() { return cTargetActivityFlowableCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getTargetActivityFlowableQualifiedNameParserRuleCall_4_0_0_1() { return cTargetActivityFlowableQualifiedNameParserRuleCall_4_0_0_1; }
		
		//targetSwitch=ActivitySwitch
		public Assignment getTargetSwitchAssignment_4_1() { return cTargetSwitchAssignment_4_1; }
		
		//ActivitySwitch
		public RuleCall getTargetSwitchActivitySwitchParserRuleCall_4_1_0() { return cTargetSwitchActivitySwitchParserRuleCall_4_1_0; }
	}
	public class AllocationTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.AllocationTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllocationTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAllocationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAllocsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAllocsAllocationParserRuleCall_3_0 = (RuleCall)cAllocsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AllocationTable:
		//	{AllocationTable}
		//	'allocations' '{'
		//	allocs+=Allocation*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{AllocationTable} 'allocations' '{' allocs+=Allocation* '}'
		public Group getGroup() { return cGroup; }
		
		//{AllocationTable}
		public Action getAllocationTableAction_0() { return cAllocationTableAction_0; }
		
		//'allocations'
		public Keyword getAllocationsKeyword_1() { return cAllocationsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//allocs+=Allocation*
		public Assignment getAllocsAssignment_3() { return cAllocsAssignment_3; }
		
		//Allocation
		public RuleCall getAllocsAllocationParserRuleCall_3_0() { return cAllocsAllocationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AllocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.Allocation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExecutableAllocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActivityAllocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Allocation:
		//	ExecutableAllocation | ActivityAllocation;
		@Override public ParserRule getRule() { return rule; }
		
		//ExecutableAllocation | ActivityAllocation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExecutableAllocation
		public RuleCall getExecutableAllocationParserRuleCall_0() { return cExecutableAllocationParserRuleCall_0; }
		
		//ActivityAllocation
		public RuleCall getActivityAllocationParserRuleCall_1() { return cActivityAllocationParserRuleCall_1; }
	}
	public class ExecutableAllocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ExecutableAllocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecutableAllocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExecutableKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSourceExecutableCrossReference_2_0_0 = (CrossReference)cSourceAssignment_2_0.eContents().get(0);
		private final RuleCall cSourceExecutableQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cSourceExecutableCrossReference_2_0_0.eContents().get(1);
		private final Keyword cNullKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cTargetActionDefCrossReference_4_0_0 = (CrossReference)cTargetAssignment_4_0.eContents().get(0);
		private final RuleCall cTargetActionDefQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cTargetActionDefCrossReference_4_0_0.eContents().get(1);
		private final Keyword cNullKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ExecutableAllocation:
		//	{ExecutableAllocation}
		//	'executable' (source=[Executable|QualifiedName] | 'null') 'to' (target=[ActionDef|QualifiedName] | 'null');
		@Override public ParserRule getRule() { return rule; }
		
		//{ExecutableAllocation} 'executable' (source=[Executable|QualifiedName] | 'null') 'to' (target=[ActionDef|QualifiedName]
		//| 'null')
		public Group getGroup() { return cGroup; }
		
		//{ExecutableAllocation}
		public Action getExecutableAllocationAction_0() { return cExecutableAllocationAction_0; }
		
		//'executable'
		public Keyword getExecutableKeyword_1() { return cExecutableKeyword_1; }
		
		//(source=[Executable|QualifiedName] | 'null')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//source=[Executable|QualifiedName]
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }
		
		//[Executable|QualifiedName]
		public CrossReference getSourceExecutableCrossReference_2_0_0() { return cSourceExecutableCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getSourceExecutableQualifiedNameParserRuleCall_2_0_0_1() { return cSourceExecutableQualifiedNameParserRuleCall_2_0_0_1; }
		
		//'null'
		public Keyword getNullKeyword_2_1() { return cNullKeyword_2_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//(target=[ActionDef|QualifiedName] | 'null')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//target=[ActionDef|QualifiedName]
		public Assignment getTargetAssignment_4_0() { return cTargetAssignment_4_0; }
		
		//[ActionDef|QualifiedName]
		public CrossReference getTargetActionDefCrossReference_4_0_0() { return cTargetActionDefCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getTargetActionDefQualifiedNameParserRuleCall_4_0_0_1() { return cTargetActionDefQualifiedNameParserRuleCall_4_0_0_1; }
		
		//'null'
		public Keyword getNullKeyword_4_1() { return cNullKeyword_4_1; }
	}
	public class ActivityAllocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ActivityAllocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAllocationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cSourceActivityDefCrossReference_2_0_0 = (CrossReference)cSourceAssignment_2_0.eContents().get(0);
		private final RuleCall cSourceActivityDefQualifiedNameParserRuleCall_2_0_0_1 = (RuleCall)cSourceActivityDefCrossReference_2_0_0.eContents().get(1);
		private final Keyword cNullKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cTargetStructuralDefCrossReference_4_0_0 = (CrossReference)cTargetAssignment_4_0.eContents().get(0);
		private final RuleCall cTargetStructuralDefQualifiedNameParserRuleCall_4_0_0_1 = (RuleCall)cTargetStructuralDefCrossReference_4_0_0.eContents().get(1);
		private final Keyword cNullKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ActivityAllocation:
		//	{ActivityAllocation}
		//	'activity' (source=[ActivityDef|QualifiedName] | 'null') 'to' (target=[StructuralDef|QualifiedName] | 'null');
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivityAllocation} 'activity' (source=[ActivityDef|QualifiedName] | 'null') 'to' (target=[StructuralDef|QualifiedName]
		//| 'null')
		public Group getGroup() { return cGroup; }
		
		//{ActivityAllocation}
		public Action getActivityAllocationAction_0() { return cActivityAllocationAction_0; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
		
		//(source=[ActivityDef|QualifiedName] | 'null')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//source=[ActivityDef|QualifiedName]
		public Assignment getSourceAssignment_2_0() { return cSourceAssignment_2_0; }
		
		//[ActivityDef|QualifiedName]
		public CrossReference getSourceActivityDefCrossReference_2_0_0() { return cSourceActivityDefCrossReference_2_0_0; }
		
		//QualifiedName
		public RuleCall getSourceActivityDefQualifiedNameParserRuleCall_2_0_0_1() { return cSourceActivityDefQualifiedNameParserRuleCall_2_0_0_1; }
		
		//'null'
		public Keyword getNullKeyword_2_1() { return cNullKeyword_2_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//(target=[StructuralDef|QualifiedName] | 'null')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//target=[StructuralDef|QualifiedName]
		public Assignment getTargetAssignment_4_0() { return cTargetAssignment_4_0; }
		
		//[StructuralDef|QualifiedName]
		public CrossReference getTargetStructuralDefCrossReference_4_0_0() { return cTargetStructuralDefCrossReference_4_0_0; }
		
		//QualifiedName
		public RuleCall getTargetStructuralDefQualifiedNameParserRuleCall_4_0_0_1() { return cTargetStructuralDefQualifiedNameParserRuleCall_4_0_0_1; }
		
		//'null'
		public Keyword getNullKeyword_4_1() { return cNullKeyword_4_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	public class FlowPropertyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.FlowProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FlowProperty:
		//	in | out;
		public EnumRule getRule() { return rule; }
		
		//in | out
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	public class ConstraintKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ConstraintKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPreConditionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPreConditionPreConditionKeyword_0_0 = (Keyword)cPreConditionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostConditionEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostConditionPostConditionKeyword_1_0 = (Keyword)cPostConditionEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInvariantEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInvariantInvariantKeyword_2_0 = (Keyword)cInvariantEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ConstraintKind:
		//	preCondition='pre-condition' | postCondition='post-condition' | invariant;
		public EnumRule getRule() { return rule; }
		
		//preCondition='pre-condition' | postCondition='post-condition' | invariant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//preCondition='pre-condition'
		public EnumLiteralDeclaration getPreConditionEnumLiteralDeclaration_0() { return cPreConditionEnumLiteralDeclaration_0; }
		
		//'pre-condition'
		public Keyword getPreConditionPreConditionKeyword_0_0() { return cPreConditionPreConditionKeyword_0_0; }
		
		//postCondition='post-condition'
		public EnumLiteralDeclaration getPostConditionEnumLiteralDeclaration_1() { return cPostConditionEnumLiteralDeclaration_1; }
		
		//'post-condition'
		public Keyword getPostConditionPostConditionKeyword_1_0() { return cPostConditionPostConditionKeyword_1_0; }
		
		//invariant
		public EnumLiteralDeclaration getInvariantEnumLiteralDeclaration_2() { return cInvariantEnumLiteralDeclaration_2; }
		
		//'invariant'
		public Keyword getInvariantInvariantKeyword_2_0() { return cInvariantInvariantKeyword_2_0; }
	}
	public class ProtocolAlternativeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ProtocolAlternativeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cComplimentaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cComplimentarySemicolonKeyword_0_0 = (Keyword)cComplimentaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAlternativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAlternativeVerticalLineKeyword_1_0 = (Keyword)cAlternativeEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ProtocolAlternativeType:
		//	complimentary=';' | alternative='|';
		public EnumRule getRule() { return rule; }
		
		//complimentary=';' | alternative='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//complimentary=';'
		public EnumLiteralDeclaration getComplimentaryEnumLiteralDeclaration_0() { return cComplimentaryEnumLiteralDeclaration_0; }
		
		//';'
		public Keyword getComplimentarySemicolonKeyword_0_0() { return cComplimentarySemicolonKeyword_0_0; }
		
		//alternative='|'
		public EnumLiteralDeclaration getAlternativeEnumLiteralDeclaration_1() { return cAlternativeEnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getAlternativeVerticalLineKeyword_1_0() { return cAlternativeVerticalLineKeyword_1_0; }
	}
	public class ProtocolControlElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "br.consiste.SysADL.ProtocolControl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAlwaysEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAlwaysAlwaysKeyword_0_0 = (Keyword)cAlwaysEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSeveralEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSeveralSeveralKeyword_1_0 = (Keyword)cSeveralEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOnceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOnceOnceKeyword_2_0 = (Keyword)cOnceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPerhapsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPerhapsPerhapsKeyword_3_0 = (Keyword)cPerhapsEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ProtocolControl:
		//	always | several | once | perhaps;
		public EnumRule getRule() { return rule; }
		
		//always | several | once | perhaps
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//always
		public EnumLiteralDeclaration getAlwaysEnumLiteralDeclaration_0() { return cAlwaysEnumLiteralDeclaration_0; }
		
		//'always'
		public Keyword getAlwaysAlwaysKeyword_0_0() { return cAlwaysAlwaysKeyword_0_0; }
		
		//several
		public EnumLiteralDeclaration getSeveralEnumLiteralDeclaration_1() { return cSeveralEnumLiteralDeclaration_1; }
		
		//'several'
		public Keyword getSeveralSeveralKeyword_1_0() { return cSeveralSeveralKeyword_1_0; }
		
		//once
		public EnumLiteralDeclaration getOnceEnumLiteralDeclaration_2() { return cOnceEnumLiteralDeclaration_2; }
		
		//'once'
		public Keyword getOnceOnceKeyword_2_0() { return cOnceOnceKeyword_2_0; }
		
		//perhaps
		public EnumLiteralDeclaration getPerhapsEnumLiteralDeclaration_3() { return cPerhapsEnumLiteralDeclaration_3; }
		
		//'perhaps'
		public Keyword getPerhapsPerhapsKeyword_3_0() { return cPerhapsPerhapsKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final ElementDefElements pElementDef;
	private final TypeDefElements pTypeDef;
	private final TypeUseElements pTypeUse;
	private final NamedElementElements pNamedElement;
	private final StructuralDefElements pStructuralDef;
	private final DataDefElements pDataDef;
	private final ComponentDefElements pComponentDef;
	private final ArchitectureDefElements pArchitectureDef;
	private final PortDefElements pPortDef;
	private final PinElements pPin;
	private final BehaviorDefElements pBehaviorDef;
	private final ActivityFlowableElements pActivityFlowable;
	private final ActionUseElements pActionUse;
	private final ActivityRelationElements pActivityRelation;
	private final DataObjectElements pDataObject;
	private final EStringElements pEString;
	private final PropertyElements pProperty;
	private final PackageElements pPackage;
	private final RequirementElements pRequirement;
	private final DataTypeDefElements pDataTypeDef;
	private final ValueTypeDefElements pValueTypeDef;
	private final EnumerationElements pEnumeration;
	private final TypeUse_ImplElements pTypeUse_Impl;
	private final EnumLiteralValueElements pEnumLiteralValue;
	private final DimensionDefElements pDimensionDef;
	private final UnitDefElements pUnitDef;
	private final ComponentUseElements pComponentUse;
	private final ConnectorDefElements pConnectorDef;
	private final ConnectorUseElements pConnectorUse;
	private final CompositePortDefElements pCompositePortDef;
	private final SimplePortDefElements pSimplePortDef;
	private final PortUseElements pPortUse;
	private final PortUse_ReverseElements pPortUse_Reverse;
	private final ActionDefElements pActionDef;
	private final ActivityDefElements pActivityDef;
	private final DataStoreElements pDataStore;
	private final DataBufferElements pDataBuffer;
	private final ProtocolElements pProtocol;
	private final ConstraintDefElements pConstraintDef;
	private final ExecutableElements pExecutable;
	private final StatementElements pStatement;
	private final NonBlockStatementElements pNonBlockStatement;
	private final BlockStatementElements pBlockStatement;
	private final VariableDeclElements pVariableDecl;
	private final IfBlockStatementElements pIfBlockStatement;
	private final IfStatementElements pIfStatement;
	private final ElseStatementElements pElseStatement;
	private final ReturnStatementElements pReturnStatement;
	private final WhileStatementElements pWhileStatement;
	private final DoStatementElements pDoStatement;
	private final ForStatementElements pForStatement;
	private final ForControlElements pForControl;
	private final ForVarElements pForVar;
	private final SwitchStatementElements pSwitchStatement;
	private final SwitchClauseElements pSwitchClause;
	private final DefaultSwitchClauseElements pDefaultSwitchClause;
	private final ExpressionElements pExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final NameExpressionElements pNameExpression;
	private final NonNameExpressionElements pNonNameExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final BooleanLiteralExpressionElements pBooleanLiteralExpression;
	private final NaturalLiteralExpressionElements pNaturalLiteralExpression;
	private final StringLiteralExpressionElements pStringLiteralExpression;
	private final ThisExpressionElements pThisExpression;
	private final ParenthesizedExpressionElements pParenthesizedExpression;
	private final PropertyAccessExpressionElements pPropertyAccessExpression;
	private final IncrementAndDecrementExpressionElements pIncrementAndDecrementExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final BinaryExpressionElements pBinaryExpression;
	private final ConditionalAndOrConditionalOrExpressionElements pConditionalAndOrConditionalOrExpression;
	private final InclusiveOrOrConditionalAndExpressionElements pInclusiveOrOrConditionalAndExpression;
	private final ExclusiveOrOrInclusiveOrExpressionElements pExclusiveOrOrInclusiveOrExpression;
	private final AndOrExclusiveOrExpressionElements pAndOrExclusiveOrExpression;
	private final EqualityOrAndExpressionElements pEqualityOrAndExpression;
	private final ClassificationOrEqualityExpressionElements pClassificationOrEqualityExpression;
	private final RelationalOrClassificationExpressionElements pRelationalOrClassificationExpression;
	private final ArithmeticOrRelationalExpressionElements pArithmeticOrRelationalExpression;
	private final UnaryOrArithmeticExpressionElements pUnaryOrArithmeticExpression;
	private final UnaryOrMultiplicativeExpressionElements pUnaryOrMultiplicativeExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final ArithmeticOrShiftExpressionElements pArithmeticOrShiftExpression;
	private final ShiftExpressionElements pShiftExpression;
	private final ClassificationExpressionElements pClassificationExpression;
	private final EqualityExpressionElements pEqualityExpression;
	private final AndExpressionElements pAndExpression;
	private final ExclusiveOrExpressionElements pExclusiveOrExpression;
	private final InclusiveOrExpressionElements pInclusiveOrExpression;
	private final ConditionalAndExpressionElements pConditionalAndExpression;
	private final ConditionalOrExpressionElements pConditionalOrExpression;
	private final ConditionalExpressionElements pConditionalExpression;
	private final ConditionalTestExpressionElements pConditionalTestExpression;
	private final AssignmentExpressionElements pAssignmentExpression;
	private final TypeNameElements pTypeName;
	private final QualifiedNameElements pQualifiedName;
	private final ColonQualifiedNameElements pColonQualifiedName;
	private final DotQualifiedNameElements pDotQualifiedName;
	private final EIntElements pEInt;
	private final ConfigurationElements pConfiguration;
	private final DelegationElements pDelegation;
	private final FlowElements pFlow;
	private final ConnectorBindingElements pConnectorBinding;
	private final FlowPropertyElements eFlowProperty;
	private final ConstraintUseElements pConstraintUse;
	private final ActivityDelegationElements pActivityDelegation;
	private final ConstraintKindElements eConstraintKind;
	private final ActivitySwitchElements pActivitySwitch;
	private final ActivitySwitchCaseElements pActivitySwitchCase;
	private final ActivityBodyElements pActivityBody;
	private final ProtocolBodyElements pProtocolBody;
	private final ProtocolAlternativeTypeElements eProtocolAlternativeType;
	private final ProtocolControlElements eProtocolControl;
	private final ProtocolBodyInternalElements pProtocolBodyInternal;
	private final ActionSendElements pActionSend;
	private final ActionReceiveElements pActionReceive;
	private final ActivityFlowElements pActivityFlow;
	private final AllocationTableElements pAllocationTable;
	private final AllocationElements pAllocation;
	private final ExecutableAllocationElements pExecutableAllocation;
	private final ActivityAllocationElements pActivityAllocation;
	private final EBooleanElements pEBoolean;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SysADLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElementDef = new ElementDefElements();
		this.pTypeDef = new TypeDefElements();
		this.pTypeUse = new TypeUseElements();
		this.pNamedElement = new NamedElementElements();
		this.pStructuralDef = new StructuralDefElements();
		this.pDataDef = new DataDefElements();
		this.pComponentDef = new ComponentDefElements();
		this.pArchitectureDef = new ArchitectureDefElements();
		this.pPortDef = new PortDefElements();
		this.pPin = new PinElements();
		this.pBehaviorDef = new BehaviorDefElements();
		this.pActivityFlowable = new ActivityFlowableElements();
		this.pActionUse = new ActionUseElements();
		this.pActivityRelation = new ActivityRelationElements();
		this.pDataObject = new DataObjectElements();
		this.pEString = new EStringElements();
		this.pProperty = new PropertyElements();
		this.pPackage = new PackageElements();
		this.pRequirement = new RequirementElements();
		this.pDataTypeDef = new DataTypeDefElements();
		this.pValueTypeDef = new ValueTypeDefElements();
		this.pEnumeration = new EnumerationElements();
		this.pTypeUse_Impl = new TypeUse_ImplElements();
		this.pEnumLiteralValue = new EnumLiteralValueElements();
		this.pDimensionDef = new DimensionDefElements();
		this.pUnitDef = new UnitDefElements();
		this.pComponentUse = new ComponentUseElements();
		this.pConnectorDef = new ConnectorDefElements();
		this.pConnectorUse = new ConnectorUseElements();
		this.pCompositePortDef = new CompositePortDefElements();
		this.pSimplePortDef = new SimplePortDefElements();
		this.pPortUse = new PortUseElements();
		this.pPortUse_Reverse = new PortUse_ReverseElements();
		this.pActionDef = new ActionDefElements();
		this.pActivityDef = new ActivityDefElements();
		this.pDataStore = new DataStoreElements();
		this.pDataBuffer = new DataBufferElements();
		this.pProtocol = new ProtocolElements();
		this.pConstraintDef = new ConstraintDefElements();
		this.pExecutable = new ExecutableElements();
		this.pStatement = new StatementElements();
		this.pNonBlockStatement = new NonBlockStatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pVariableDecl = new VariableDeclElements();
		this.pIfBlockStatement = new IfBlockStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseStatement = new ElseStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pDoStatement = new DoStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForControl = new ForControlElements();
		this.pForVar = new ForVarElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pSwitchClause = new SwitchClauseElements();
		this.pDefaultSwitchClause = new DefaultSwitchClauseElements();
		this.pExpression = new ExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pNameExpression = new NameExpressionElements();
		this.pNonNameExpression = new NonNameExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pBooleanLiteralExpression = new BooleanLiteralExpressionElements();
		this.pNaturalLiteralExpression = new NaturalLiteralExpressionElements();
		this.pStringLiteralExpression = new StringLiteralExpressionElements();
		this.pThisExpression = new ThisExpressionElements();
		this.pParenthesizedExpression = new ParenthesizedExpressionElements();
		this.pPropertyAccessExpression = new PropertyAccessExpressionElements();
		this.pIncrementAndDecrementExpression = new IncrementAndDecrementExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pConditionalAndOrConditionalOrExpression = new ConditionalAndOrConditionalOrExpressionElements();
		this.pInclusiveOrOrConditionalAndExpression = new InclusiveOrOrConditionalAndExpressionElements();
		this.pExclusiveOrOrInclusiveOrExpression = new ExclusiveOrOrInclusiveOrExpressionElements();
		this.pAndOrExclusiveOrExpression = new AndOrExclusiveOrExpressionElements();
		this.pEqualityOrAndExpression = new EqualityOrAndExpressionElements();
		this.pClassificationOrEqualityExpression = new ClassificationOrEqualityExpressionElements();
		this.pRelationalOrClassificationExpression = new RelationalOrClassificationExpressionElements();
		this.pArithmeticOrRelationalExpression = new ArithmeticOrRelationalExpressionElements();
		this.pUnaryOrArithmeticExpression = new UnaryOrArithmeticExpressionElements();
		this.pUnaryOrMultiplicativeExpression = new UnaryOrMultiplicativeExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pArithmeticOrShiftExpression = new ArithmeticOrShiftExpressionElements();
		this.pShiftExpression = new ShiftExpressionElements();
		this.pClassificationExpression = new ClassificationExpressionElements();
		this.pEqualityExpression = new EqualityExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pExclusiveOrExpression = new ExclusiveOrExpressionElements();
		this.pInclusiveOrExpression = new InclusiveOrExpressionElements();
		this.pConditionalAndExpression = new ConditionalAndExpressionElements();
		this.pConditionalOrExpression = new ConditionalOrExpressionElements();
		this.pConditionalExpression = new ConditionalExpressionElements();
		this.pConditionalTestExpression = new ConditionalTestExpressionElements();
		this.pAssignmentExpression = new AssignmentExpressionElements();
		this.pTypeName = new TypeNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pColonQualifiedName = new ColonQualifiedNameElements();
		this.pDotQualifiedName = new DotQualifiedNameElements();
		this.pEInt = new EIntElements();
		this.pConfiguration = new ConfigurationElements();
		this.pDelegation = new DelegationElements();
		this.pFlow = new FlowElements();
		this.pConnectorBinding = new ConnectorBindingElements();
		this.eFlowProperty = new FlowPropertyElements();
		this.pConstraintUse = new ConstraintUseElements();
		this.pActivityDelegation = new ActivityDelegationElements();
		this.eConstraintKind = new ConstraintKindElements();
		this.pActivitySwitch = new ActivitySwitchElements();
		this.pActivitySwitchCase = new ActivitySwitchCaseElements();
		this.pActivityBody = new ActivityBodyElements();
		this.pProtocolBody = new ProtocolBodyElements();
		this.eProtocolAlternativeType = new ProtocolAlternativeTypeElements();
		this.eProtocolControl = new ProtocolControlElements();
		this.pProtocolBodyInternal = new ProtocolBodyInternalElements();
		this.pActionSend = new ActionSendElements();
		this.pActionReceive = new ActionReceiveElements();
		this.pActivityFlow = new ActivityFlowElements();
		this.pAllocationTable = new AllocationTableElements();
		this.pAllocation = new AllocationElements();
		this.pExecutableAllocation = new ExecutableAllocationElements();
		this.pActivityAllocation = new ActivityAllocationElements();
		this.pEBoolean = new EBooleanElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.consiste.SysADL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Common Elements
	// * / Model:
	//	{Model}
	//	'Model' name=ID ';' ('using' involvedElements+=[ElementDef|QualifiedName] ';')* (properties+=Property
	//	| packages+=Package
	//	| requirements+=Requirement)*
	//	allocation=AllocationTable?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ElementDef:
	//	DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration | ComponentDef | ConnectorDef | CompositePortDef |
	//	SimplePortDef | ActionDef | ActivityDef | Protocol | ConstraintDef | Executable;
	public ElementDefElements getElementDefAccess() {
		return pElementDef;
	}
	
	public ParserRule getElementDefRule() {
		return getElementDefAccess().getRule();
	}
	
	//TypeDef:
	//	DataTypeDef | ValueTypeDef | Enumeration;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//TypeUse:
	//	TypeUse_Impl;
	public TypeUseElements getTypeUseAccess() {
		return pTypeUse;
	}
	
	public ParserRule getTypeUseRule() {
		return getTypeUseAccess().getRule();
	}
	
	//NamedElement:
	//	Package | Model | DataTypeDef | DimensionDef | TypeUse_Impl | UnitDef | ValueTypeDef | Enumeration | ArchitectureDef
	//	| ComponentUse | ConnectorDef | ConnectorUse | CompositePortDef | SimplePortDef | PortUse | ActionDef | ActionUse |
	//	ActivityDef | DataStore | DataBuffer | Protocol | ConstraintDef | Executable | Requirement;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//StructuralDef:
	//	ComponentDef | ConnectorDef | CompositePortDef | SimplePortDef;
	public StructuralDefElements getStructuralDefAccess() {
		return pStructuralDef;
	}
	
	public ParserRule getStructuralDefRule() {
		return getStructuralDefAccess().getRule();
	}
	
	//DataDef:
	//	DataTypeDef | DimensionDef | UnitDef | ValueTypeDef | Enumeration;
	public DataDefElements getDataDefAccess() {
		return pDataDef;
	}
	
	public ParserRule getDataDefRule() {
		return getDataDefAccess().getRule();
	}
	
	//ComponentDef:
	//	isBoundary?='boundary'? 'component' 'def' name=ID
	//	'{' ('ports' ports+=PortUse*)? (properties+=Property
	//	| archDefs+=StructuralDef
	//	| dataDefs+=DataDef)*
	//	composite=Configuration?
	//	'}';
	public ComponentDefElements getComponentDefAccess() {
		return pComponentDef;
	}
	
	public ParserRule getComponentDefRule() {
		return getComponentDefAccess().getRule();
	}
	
	//ArchitectureDef ComponentDef: // alternatively, a component might be an architecture 
	//	'architecture' 'def' name=ID '{' 'ports' ports+=PortUse* properties+=Property* composite=Configuration '}'
	public ArchitectureDefElements getArchitectureDefAccess() {
		return pArchitectureDef;
	}
	
	public ParserRule getArchitectureDefRule() {
		return getArchitectureDefAccess().getRule();
	}
	
	//PortDef:
	//	CompositePortDef | SimplePortDef;
	public PortDefElements getPortDefAccess() {
		return pPortDef;
	}
	
	public ParserRule getPortDefRule() {
		return getPortDefAccess().getRule();
	}
	
	//Pin:
	//	{Pin} name=ID ':' isFlow?='flow'? definition=[TypeDef|QualifiedName];
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//BehaviorDef:
	//	ActivityDef | Protocol | ConstraintDef | ActionDef;
	public BehaviorDefElements getBehaviorDefAccess() {
		return pBehaviorDef;
	}
	
	public ParserRule getBehaviorDefRule() {
		return getBehaviorDefAccess().getRule();
	}
	
	//ActivityFlowable:
	//	ActionUse | ActivitySwitch | DataStore | DataBuffer;
	public ActivityFlowableElements getActivityFlowableAccess() {
		return pActivityFlowable;
	}
	
	public ParserRule getActivityFlowableRule() {
		return getActivityFlowableAccess().getRule();
	}
	
	//ActionUse:
	//	{ActionUse} name=ID ':' definition=[ActionDef|QualifiedName] '{' ('using' 'pins' pinIn+=Pin*)?
	//	properties+=Property*
	//	'}';
	public ActionUseElements getActionUseAccess() {
		return pActionUse;
	}
	
	public ParserRule getActionUseRule() {
		return getActionUseAccess().getRule();
	}
	
	//ActivityRelation:
	//	ActivityDelegation | ActivityFlow;
	public ActivityRelationElements getActivityRelationAccess() {
		return pActivityRelation;
	}
	
	public ParserRule getActivityRelationRule() {
		return getActivityRelationAccess().getRule();
	}
	
	//DataObject:
	//	DataStore | DataBuffer;
	public DataObjectElements getDataObjectAccess() {
		return pDataObject;
	}
	
	public ParserRule getDataObjectRule() {
		return getDataObjectAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Property:
	//	{Property}
	//	'property' name=ID (':' type=[TypeDef|QualifiedName])? ('=' value=Expression)? ';';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Package:
	//	{Package}
	//	'package' name=QualifiedName '{' ('import' imports+=[Package|QualifiedName] ';')* ('using'
	//	elementImports+=[ElementDef|QualifiedName] ';')* (properties+=Property
	//	| architectures+=ElementDef
	//	| architectures+=ArchitectureDef)*
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Requirement:
	//	'Requirement' name=ID '(' id=EFloat ')'
	//	'{' ('text' '=' text=EString)? ('satisfiedBy' satisfiedBy+=[ElementDef|QualifiedName] (","
	//	satisfiedBy+=[ElementDef|QualifiedName])* ';')? ('derive' derivedBy+=[Requirement|QualifiedName] (","
	//	derivedBy+=[Requirement|QualifiedName])* ';')? (properties+=Property
	//	| composition+=Requirement)*
	//	'}';
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//DataTypeDef:
	//	{DataTypeDef}
	//	'datatype'
	//	name=ID ('extends' superType=[DataTypeDef|QualifiedName])?
	//	'{' ('attributes' dataTypeAttributes+=TypeUse*)?
	//	properties+=Property*
	//	'}';
	public DataTypeDefElements getDataTypeDefAccess() {
		return pDataTypeDef;
	}
	
	public ParserRule getDataTypeDefRule() {
		return getDataTypeDefAccess().getRule();
	}
	
	//ValueTypeDef:
	//	{ValueTypeDef}
	//	'value' 'type'
	//	name=ID ('extends' superType=[ValueTypeDef|QualifiedName])?
	//	'{' ('unit' '=' unit=[UnitDef|QualifiedName])? ('dimension' '=' dimension=[DimensionDef|QualifiedName])?
	//	properties+=Property*
	//	'}';
	public ValueTypeDefElements getValueTypeDefAccess() {
		return pValueTypeDef;
	}
	
	public ParserRule getValueTypeDefRule() {
		return getValueTypeDefAccess().getRule();
	}
	
	//Enumeration:
	//	{Enumeration}
	//	'enum'
	//	name=ID
	//	'{'
	//	properties+=Property*
	//	literals+=EnumLiteralValue ("," literals+=EnumLiteralValue)*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//TypeUse_Impl TypeUse:
	//	name=ID ':' definition=[TypeDef|QualifiedName] ('{' properties+=Property* '}')?
	public TypeUse_ImplElements getTypeUse_ImplAccess() {
		return pTypeUse_Impl;
	}
	
	public ParserRule getTypeUse_ImplRule() {
		return getTypeUse_ImplAccess().getRule();
	}
	
	//EnumLiteralValue:
	//	key=EString;
	public EnumLiteralValueElements getEnumLiteralValueAccess() {
		return pEnumLiteralValue;
	}
	
	public ParserRule getEnumLiteralValueRule() {
		return getEnumLiteralValueAccess().getRule();
	}
	
	//DimensionDef:
	//	{DimensionDef}
	//	'dimension'
	//	name=ID ('{' (properties+=Property ("," properties+=Property)*)?
	//	'}')?;
	public DimensionDefElements getDimensionDefAccess() {
		return pDimensionDef;
	}
	
	public ParserRule getDimensionDefRule() {
		return getDimensionDefAccess().getRule();
	}
	
	//UnitDef:
	//	{UnitDef}
	//	'unit'
	//	name=ID
	//	'{' ('dimension' '=' dimension=[DimensionDef|QualifiedName])? (properties+=Property ("," properties+=Property)* '}')?
	//	'}';
	public UnitDefElements getUnitDefAccess() {
		return pUnitDef;
	}
	
	public ParserRule getUnitDefRule() {
		return getUnitDefAccess().getRule();
	}
	
	//ComponentUse:
	//	name=ID ':' definition=[ComponentDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	//	'{' ('using' 'ports' ports+=PortUse*)?
	//	properties+=Property*
	//	'}';
	public ComponentUseElements getComponentUseAccess() {
		return pComponentUse;
	}
	
	public ParserRule getComponentUseRule() {
		return getComponentUseAccess().getRule();
	}
	
	//ConnectorDef:
	//	'connector' 'def' name=ID
	//	'{' ('participants' ports+=PortUse_Reverse*)?
	//	composite=Configuration? ('flows' flows+=Flow*)? (properties+=Property
	//	| archDefs+=StructuralDef
	//	| dataDefs+=DataDef)*
	//	'}';
	public ConnectorDefElements getConnectorDefAccess() {
		return pConnectorDef;
	}
	
	public ParserRule getConnectorDefRule() {
		return getConnectorDefAccess().getRule();
	}
	
	//ConnectorUse:
	//	name=ID ':' definition=[ConnectorDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')? ('bindings'
	//	bindings+=ConnectorBinding ("," bindings+=ConnectorBinding)*)? ('{'
	//	'ports' ports+=PortUse_Reverse*
	//	properties+=Property*
	//	'}')?;
	public ConnectorUseElements getConnectorUseAccess() {
		return pConnectorUse;
	}
	
	public ParserRule getConnectorUseRule() {
		return getConnectorUseAccess().getRule();
	}
	
	//CompositePortDef:
	//	'port' 'def' name=ID
	//	'{'
	//	'ports' ports+=PortUse* (properties+=Property
	//	| archDefs+=StructuralDef
	//	| dataDefs+=DataDef)*
	//	'}';
	public CompositePortDefElements getCompositePortDefAccess() {
		return pCompositePortDef;
	}
	
	public ParserRule getCompositePortDefRule() {
		return getCompositePortDefAccess().getRule();
	}
	
	//SimplePortDef:
	//	'port' 'def' name=ID
	//	'{'
	//	'flow' flowProperties=FlowProperty flowType=[TypeDef|QualifiedName] (properties+=Property
	//	| archDefs+=StructuralDef
	//	| dataDefs+=DataDef)*
	//	'}';
	public SimplePortDefElements getSimplePortDefAccess() {
		return pSimplePortDef;
	}
	
	public ParserRule getSimplePortDefRule() {
		return getSimplePortDefAccess().getRule();
	}
	
	//PortUse:
	//	name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	//	'{'
	//	properties+=Property*
	//	'}';
	public PortUseElements getPortUseAccess() {
		return pPortUse;
	}
	
	public ParserRule getPortUseRule() {
		return getPortUseAccess().getRule();
	}
	
	//PortUse_Reverse PortUse:
	//	'~' name=ID ':' definition=[PortDef|QualifiedName] ('[' lowerBound=EInt ',' upperBound=EInt ']')?
	//	'{'
	//	properties+=Property*
	//	'}'
	public PortUse_ReverseElements getPortUse_ReverseAccess() {
		return pPortUse_Reverse;
	}
	
	public ParserRule getPortUse_ReverseRule() {
		return getPortUse_ReverseAccess().getRule();
	}
	
	//ActionDef:
	//	{ActionDef}
	//	'action' 'def'
	//	name=ID '(' inParameters+=Pin ("," inParameters+=Pin)* ')' ':' returnType=[TypeDef|QualifiedName]
	//	'{' (constraints+=ConstraintUse
	//	| delegations+=ActivityDelegation
	//	| properties+=Property
	//	| behaDefs+=BehaviorDef
	//	| dataDefs+=DataDef)*
	//	'}';
	public ActionDefElements getActionDefAccess() {
		return pActionDef;
	}
	
	public ParserRule getActionDefRule() {
		return getActionDefAccess().getRule();
	}
	
	//ActivityDef:
	//	{ActivityDef}
	//	'activity' 'def'
	//	name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (',' outParameters+=Pin)*)?
	//	'{' (properties+=Property
	//	| behaDefs+=BehaviorDef
	//	| dataDefs+=DataDef)* ('constraint' ':' constraints+=ConstraintUse*)?
	//	delegations+=ActivityDelegation*
	//	acbody=ActivityBody?
	//	'}';
	public ActivityDefElements getActivityDefAccess() {
		return pActivityDef;
	}
	
	public ParserRule getActivityDefRule() {
		return getActivityDefAccess().getRule();
	}
	
	//DataStore:
	//	'datastore'
	//	name=ID ':' type=[TypeDef|QualifiedName]
	//	'{'
	//	properties+=Property* ('initial' 'value' '=' initValue=Expression)?
	//	'}';
	public DataStoreElements getDataStoreAccess() {
		return pDataStore;
	}
	
	public ParserRule getDataStoreRule() {
		return getDataStoreAccess().getRule();
	}
	
	//DataBuffer:
	//	'buffer'
	//	name=ID
	//	'{'
	//	'type' type=[TypeDef|QualifiedName] ('properties' '{' properties+=Property ("," properties+=Property)* '}')?
	//	('initValue' initValue=Expression)?
	//	'}';
	public DataBufferElements getDataBufferAccess() {
		return pDataBuffer;
	}
	
	public ParserRule getDataBufferRule() {
		return getDataBufferAccess().getRule();
	}
	
	//Protocol: // TODO
	//	'protocol' name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (','
	//	outParameters+=Pin)*)? '{' (properties+=Property behaDefs+=BehaviorDef dataDefs+=DataDef)* ('delegations' ':'
	//	delegations+=ActivityDelegation*)? body=ProtocolBody '}';
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//ConstraintDef:
	//	{ConstraintDef}
	//	'constraint'
	//	name=ID ('(' inParameters+=Pin (',' inParameters+=Pin)* ')') (':' outParameters+=Pin (',' outParameters+=Pin)*)?
	//	'{' ('equation' '=' equation=Expression)?
	//	properties+=Property*
	//	'}';
	public ConstraintDefElements getConstraintDefAccess() {
		return pConstraintDef;
	}
	
	public ParserRule getConstraintDefRule() {
		return getConstraintDefAccess().getRule();
	}
	
	/// *
	// * Executable Viewpoint 
	// * / Executable:
	//	'executable' 'def' name=ID '(' ('in' params+=TypeUse (',' 'in' params+=TypeUse)*)? ')' ':' 'out'
	//	returnType=[TypeDef|QualifiedName]
	//	'{'
	//	body+=NonBlockStatement*
	//	'}';
	public ExecutableElements getExecutableAccess() {
		return pExecutable;
	}
	
	public ParserRule getExecutableRule() {
		return getExecutableAccess().getRule();
	}
	
	/// **
	// * Executable[STATEMENTS]
	// * / Statement:
	//	Expression | BlockStatement | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement |
	//	SwitchStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// Same as above, but block statement is not allowed
	//NonBlockStatement Statement:
	//	Expression | VariableDecl | ReturnStatement | WhileStatement | DoStatement | ForStatement
	public NonBlockStatementElements getNonBlockStatementAccess() {
		return pNonBlockStatement;
	}
	
	public ParserRule getNonBlockStatementRule() {
		return getNonBlockStatementAccess().getRule();
	}
	
	//BlockStatement:
	//	{BlockStatement}
	//	'{'
	//	body+=Statement*
	//	'}';
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}
	
	////Assignment returns Assignment:
	////	var=[TypeUse|EString] '=' value=Expression
	////;
	//VariableDecl:
	//	'let' name=ID ':' definition=[TypeDef|QualifiedName] '=' value=Expression
	//	// TODO must add the following line: got a left-reduction conflict
	//	//|  definition=[TypeDef|QualifiedName] name=ID '=' value=Expression
	//;
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}
	
	//IfBlockStatement:
	//	main_if=IfStatement ('or' paralel_ifs+=IfStatement)* ('else' sequential_ifs+=IfStatement)*
	//	else=ElseStatement?;
	public IfBlockStatementElements getIfBlockStatementAccess() {
		return pIfBlockStatement;
	}
	
	public ParserRule getIfBlockStatementRule() {
		return getIfBlockStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'if' '(' condition=Expression ')' body=Statement;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElseStatement:
	//	'else' body=Statement;
	public ElseStatementElements getElseStatementAccess() {
		return pElseStatement;
	}
	
	public ParserRule getElseStatementRule() {
		return getElseStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	'return' value=Expression;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	'while' '(' condition=Expression ')' body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//DoStatement:
	//	'do' body=Statement 'while' '(' condition=Expression ')';
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}
	
	//ForStatement:
	//	'for' '(' control=ForControl ')' body=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForControl:
	//	vars+=ForVar (',' vars+=ForVar);
	public ForControlElements getForControlAccess() {
		return pForControl;
	}
	
	public ParserRule getForControlRule() {
		return getForControlAccess().getRule();
	}
	
	//ForVar:
	//	'forvar'
	//	/ * 	var=VariableDecl 'in' expr=Expression
	//	| var=VariableDecl ':' expr=Expression* / // TODO add variable this, got a left-reduction problem
	//;
	public ForVarElements getForVarAccess() {
		return pForVar;
	}
	
	public ParserRule getForVarRule() {
		return getForVarAccess().getRule();
	}
	
	//SwitchStatement:
	//	'switch' '(' expr=Expression ')' '{' clauses+=SwitchClause* clauses+=DefaultSwitchClause '}';
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}
	
	//SwitchClause:
	//	'case' value=Expression ':' body=Statement;
	public SwitchClauseElements getSwitchClauseAccess() {
		return pSwitchClause;
	}
	
	public ParserRule getSwitchClauseRule() {
		return getSwitchClauseAccess().getRule();
	}
	
	//DefaultSwitchClause:
	//	'default' ':' body=Statement;
	public DefaultSwitchClauseElements getDefaultSwitchClauseAccess() {
		return pDefaultSwitchClause;
	}
	
	public ParserRule getDefaultSwitchClauseRule() {
		return getDefaultSwitchClauseAccess().getRule();
	}
	
	/// **
	// * Executable[EXPRESSIONS]
	// * Expressions are divided into 6 groups of expressions
	// * / Expression:
	//	value=EString // Removed FIXME caused problems in behavioral diagram   
	//	/ *PrimaryExpression
	//	| IncrementAndDecrementExpression
	//	| UnaryExpression
	//	| BinaryExpression* /
	//	| ConditionalExpression
	//	/ *| AssignmentExpression* /;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	/// **
	// * Basic, simplest expressions
	// * / PrimaryExpression Expression:
	//	NameExpression
	//	| NonNameExpression
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//NameExpression:
	//	cite=[NamedElement|QualifiedName];
	public NameExpressionElements getNameExpressionAccess() {
		return pNameExpression;
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//NonNameExpression Expression:
	//	LiteralExpression
	//	| ThisExpression
	//	| ParenthesizedExpression
	public NonNameExpressionElements getNonNameExpressionAccess() {
		return pNonNameExpression;
	}
	
	public ParserRule getNonNameExpressionRule() {
		return getNonNameExpressionAccess().getRule();
	}
	
	//LiteralExpression Expression:
	//	BooleanLiteralExpression
	//	| NaturalLiteralExpression
	//	| StringLiteralExpression
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//BooleanLiteralExpression:
	//	isTrue?='true';
	public BooleanLiteralExpressionElements getBooleanLiteralExpressionAccess() {
		return pBooleanLiteralExpression;
	}
	
	public ParserRule getBooleanLiteralExpressionRule() {
		return getBooleanLiteralExpressionAccess().getRule();
	}
	
	//NaturalLiteralExpression:
	//	int_value=INT;
	public NaturalLiteralExpressionElements getNaturalLiteralExpressionAccess() {
		return pNaturalLiteralExpression;
	}
	
	public ParserRule getNaturalLiteralExpressionRule() {
		return getNaturalLiteralExpressionAccess().getRule();
	}
	
	//StringLiteralExpression:
	//	str_value=STRING;
	public StringLiteralExpressionElements getStringLiteralExpressionAccess() {
		return pStringLiteralExpression;
	}
	
	public ParserRule getStringLiteralExpressionRule() {
		return getStringLiteralExpressionAccess().getRule();
	}
	
	//ThisExpression:
	//	{ThisExpression}
	//	'this';
	public ThisExpressionElements getThisExpressionAccess() {
		return pThisExpression;
	}
	
	public ParserRule getThisExpressionRule() {
		return getThisExpressionAccess().getRule();
	}
	
	//ParenthesizedExpression Expression:
	//	'(' Expression ')'
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return pParenthesizedExpression;
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}
	
	//PropertyAccessExpression:
	//	(target=NonNameExpression | target=NameExpression) '.' field=[NamedElement|QualifiedName];
	public PropertyAccessExpressionElements getPropertyAccessExpressionAccess() {
		return pPropertyAccessExpression;
	}
	
	public ParserRule getPropertyAccessExpressionRule() {
		return getPropertyAccessExpressionAccess().getRule();
	}
	
	/// * InvocationExpression returns InvocationExpression: // TODO enable all of this
	//target=[BehavioralDef|EString] tuple=Tuple
	//
	//Tuple returns Tuple:
	//	PositionalTuple | NamedTuple
	//
	//PositionalTuple returns PositionalTuple:
	//	'(' exp=Expression (exp+=Expression)* ')'
	//
	//NamedTuple returns NamedTuple:
	//	'(' exp=NamedExpression (exp+=NamedExpression)* ')'
	//
	//NamedExpression returns NamedExpression:
	//	name=EString '=>' exp=Expression
	// * / / **
	// * Increment and decrement expressions
	// * / IncrementAndDecrementExpression Expression: // TODO
	//	'inc'
	public IncrementAndDecrementExpressionElements getIncrementAndDecrementExpressionAccess() {
		return pIncrementAndDecrementExpression;
	}
	
	public ParserRule getIncrementAndDecrementExpressionRule() {
		return getIncrementAndDecrementExpressionAccess().getRule();
	}
	
	/// **
	// * Unary expressions
	// * / UnaryExpression Expression: // TODO
	//	'unary'
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	/// **
	// * Binary Expressions
	// * / BinaryExpression Expression: // TODO
	//	'bin'
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//ConditionalAndOrConditionalOrExpression Expression:
	//	InclusiveOrOrConditionalAndExpression | ConditionalOrExpression
	public ConditionalAndOrConditionalOrExpressionElements getConditionalAndOrConditionalOrExpressionAccess() {
		return pConditionalAndOrConditionalOrExpression;
	}
	
	public ParserRule getConditionalAndOrConditionalOrExpressionRule() {
		return getConditionalAndOrConditionalOrExpressionAccess().getRule();
	}
	
	//InclusiveOrOrConditionalAndExpression Expression:
	//	ExclusiveOrOrInclusiveOrExpression | ConditionalAndExpression
	public InclusiveOrOrConditionalAndExpressionElements getInclusiveOrOrConditionalAndExpressionAccess() {
		return pInclusiveOrOrConditionalAndExpression;
	}
	
	public ParserRule getInclusiveOrOrConditionalAndExpressionRule() {
		return getInclusiveOrOrConditionalAndExpressionAccess().getRule();
	}
	
	//ExclusiveOrOrInclusiveOrExpression Expression:
	//	AndOrExclusiveOrExpression | InclusiveOrExpression
	public ExclusiveOrOrInclusiveOrExpressionElements getExclusiveOrOrInclusiveOrExpressionAccess() {
		return pExclusiveOrOrInclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrOrInclusiveOrExpressionRule() {
		return getExclusiveOrOrInclusiveOrExpressionAccess().getRule();
	}
	
	//AndOrExclusiveOrExpression Expression:
	//	EqualityOrAndExpression | ExclusiveOrExpression
	public AndOrExclusiveOrExpressionElements getAndOrExclusiveOrExpressionAccess() {
		return pAndOrExclusiveOrExpression;
	}
	
	public ParserRule getAndOrExclusiveOrExpressionRule() {
		return getAndOrExclusiveOrExpressionAccess().getRule();
	}
	
	//EqualityOrAndExpression Expression:
	//	ClassificationOrEqualityExpression | AndExpression
	public EqualityOrAndExpressionElements getEqualityOrAndExpressionAccess() {
		return pEqualityOrAndExpression;
	}
	
	public ParserRule getEqualityOrAndExpressionRule() {
		return getEqualityOrAndExpressionAccess().getRule();
	}
	
	//ClassificationOrEqualityExpression Expression:
	//	RelationalOrClassificationExpression | EqualityExpression
	public ClassificationOrEqualityExpressionElements getClassificationOrEqualityExpressionAccess() {
		return pClassificationOrEqualityExpression;
	}
	
	public ParserRule getClassificationOrEqualityExpressionRule() {
		return getClassificationOrEqualityExpressionAccess().getRule();
	}
	
	//RelationalOrClassificationExpression Expression:
	//	ArithmeticOrRelationalExpression | ClassificationExpression
	public RelationalOrClassificationExpressionElements getRelationalOrClassificationExpressionAccess() {
		return pRelationalOrClassificationExpression;
	}
	
	public ParserRule getRelationalOrClassificationExpressionRule() {
		return getRelationalOrClassificationExpressionAccess().getRule();
	}
	
	//ArithmeticOrRelationalExpression Expression:
	//	UnaryOrArithmeticExpression | RelationalExpression
	public ArithmeticOrRelationalExpressionElements getArithmeticOrRelationalExpressionAccess() {
		return pArithmeticOrRelationalExpression;
	}
	
	public ParserRule getArithmeticOrRelationalExpressionRule() {
		return getArithmeticOrRelationalExpressionAccess().getRule();
	}
	
	//UnaryOrArithmeticExpression Expression:
	//	UnaryOrMultiplicativeExpression | AdditiveExpression
	public UnaryOrArithmeticExpressionElements getUnaryOrArithmeticExpressionAccess() {
		return pUnaryOrArithmeticExpression;
	}
	
	public ParserRule getUnaryOrArithmeticExpressionRule() {
		return getUnaryOrArithmeticExpressionAccess().getRule();
	}
	
	//UnaryOrMultiplicativeExpression Expression:
	//	UnaryExpression | MultiplicativeExpression
	public UnaryOrMultiplicativeExpressionElements getUnaryOrMultiplicativeExpressionAccess() {
		return pUnaryOrMultiplicativeExpression;
	}
	
	public ParserRule getUnaryOrMultiplicativeExpressionRule() {
		return getUnaryOrMultiplicativeExpressionAccess().getRule();
	}
	
	//MultiplicativeExpression ArithmeticExpression:
	//	op1=UnaryExpression operator=("*" | "/" | "%") op2=UnaryOrMultiplicativeExpression
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}
	
	//AdditiveExpression ArithmeticExpression:
	//	=> op1=UnaryOrMultiplicativeExpression operator=("+" | "-") op2=UnaryOrArithmeticExpression
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}
	
	//RelationalExpression:
	//	=> op1=ArithmeticOrShiftExpression operator=("<" | ">" | "<=" | ">=") op2=ArithmeticOrShiftExpression;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}
	
	//ArithmeticOrShiftExpression Expression:
	//	UnaryOrArithmeticExpression | ShiftExpression
	public ArithmeticOrShiftExpressionElements getArithmeticOrShiftExpressionAccess() {
		return pArithmeticOrShiftExpression;
	}
	
	public ParserRule getArithmeticOrShiftExpressionRule() {
		return getArithmeticOrShiftExpressionAccess().getRule();
	}
	
	//ShiftExpression:
	//	=> op1=UnaryOrArithmeticExpression operator=("<<" | ">>" | ">>>") op2=ArithmeticOrShiftExpression;
	public ShiftExpressionElements getShiftExpressionAccess() {
		return pShiftExpression;
	}
	
	public ParserRule getShiftExpressionRule() {
		return getShiftExpressionAccess().getRule();
	}
	
	//ClassificationExpression:
	//	=> op=ArithmeticOrRelationalExpression operator=("instanceof" | "hastype") typeName=[TypeDef|QualifiedName];
	public ClassificationExpressionElements getClassificationExpressionAccess() {
		return pClassificationExpression;
	}
	
	public ParserRule getClassificationExpressionRule() {
		return getClassificationExpressionAccess().getRule();
	}
	
	//EqualityExpression LogicalExpression:
	//	=> op1=RelationalOrClassificationExpression operator=("=" | "!=") op2=ClassificationOrEqualityExpression
	public EqualityExpressionElements getEqualityExpressionAccess() {
		return pEqualityExpression;
	}
	
	public ParserRule getEqualityExpressionRule() {
		return getEqualityExpressionAccess().getRule();
	}
	
	//AndExpression LogicalExpression:
	//	=> op1=ClassificationOrEqualityExpression operator="&" op2=EqualityOrAndExpression
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//ExclusiveOrExpression LogicalExpression:
	//	=> op1=EqualityOrAndExpression operator="^" op2=AndOrExclusiveOrExpression
	public ExclusiveOrExpressionElements getExclusiveOrExpressionAccess() {
		return pExclusiveOrExpression;
	}
	
	public ParserRule getExclusiveOrExpressionRule() {
		return getExclusiveOrExpressionAccess().getRule();
	}
	
	//InclusiveOrExpression LogicalExpression:
	//	=> op1=AndOrExclusiveOrExpression operator="|" op2=ExclusiveOrOrInclusiveOrExpression
	public InclusiveOrExpressionElements getInclusiveOrExpressionAccess() {
		return pInclusiveOrExpression;
	}
	
	public ParserRule getInclusiveOrExpressionRule() {
		return getInclusiveOrExpressionAccess().getRule();
	}
	
	//ConditionalAndExpression ConditionalLogicalExpression:
	//	=> op1=ExclusiveOrOrInclusiveOrExpression operator="&&" op2=InclusiveOrOrConditionalAndExpression
	public ConditionalAndExpressionElements getConditionalAndExpressionAccess() {
		return pConditionalAndExpression;
	}
	
	public ParserRule getConditionalAndExpressionRule() {
		return getConditionalAndExpressionAccess().getRule();
	}
	
	//ConditionalOrExpression ConditionalLogicalExpression:
	//	=> op1=InclusiveOrOrConditionalAndExpression operator="||" op2=ConditionalAndOrConditionalOrExpression
	public ConditionalOrExpressionElements getConditionalOrExpressionAccess() {
		return pConditionalOrExpression;
	}
	
	public ParserRule getConditionalOrExpressionRule() {
		return getConditionalOrExpressionAccess().getRule();
	}
	
	/// **
	// * Conditional (ternary operation) expressions
	// * / ConditionalExpression Expression:
	//	ConditionalAndOrConditionalOrExpression | ConditionalTestExpression
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return pConditionalExpression;
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}
	
	//ConditionalTestExpression:
	//	=> op1=ConditionalAndOrConditionalOrExpression "?" op2=Expression ":" op3=ConditionalExpression;
	public ConditionalTestExpressionElements getConditionalTestExpressionAccess() {
		return pConditionalTestExpression;
	}
	
	public ParserRule getConditionalTestExpressionRule() {
		return getConditionalTestExpressionAccess().getRule();
	}
	
	/// **
	// * Assignment expressions (TODO check AssignmentStatement)
	// * / AssignmentExpression Expression: // TODO
	//	'ass'
	public AssignmentExpressionElements getAssignmentExpressionAccess() {
		return pAssignmentExpression;
	}
	
	public ParserRule getAssignmentExpressionRule() {
		return getAssignmentExpressionAccess().getRule();
	}
	
	/// **
	// * Name reference and naming rules
	// * / TypeName:
	//	QualifiedName
	//	| 'any' // TODO check this, will have impact on diagrams
	//;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//QualifiedName:
	//	ColonQualifiedName
	//	| DotQualifiedName
	//	| ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ColonQualifiedName:
	//	ID '::' QualifiedName;
	public ColonQualifiedNameElements getColonQualifiedNameAccess() {
		return pColonQualifiedName;
	}
	
	public ParserRule getColonQualifiedNameRule() {
		return getColonQualifiedNameAccess().getRule();
	}
	
	//DotQualifiedName:
	//	ID ('.' ID)+;
	public DotQualifiedNameElements getDotQualifiedNameAccess() {
		return pDotQualifiedName;
	}
	
	public ParserRule getDotQualifiedNameRule() {
		return getDotQualifiedNameAccess().getRule();
	}
	
	/// **
	// * Other stuff
	// * / EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Configuration:
	//	{Configuration}
	//	'configuration'
	//	'{' ('components' ':' components+=ComponentUse*)? ('connectors' ':' connectors+=ConnectorUse*)? ('delegations' ':'
	//	delegations+=Delegation*)?
	//	'}';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Delegation:
	//	fullPort=[PortUse|QualifiedName] 'to' portProxy=[PortUse|QualifiedName];
	public DelegationElements getDelegationAccess() {
		return pDelegation;
	}
	
	public ParserRule getDelegationRule() {
		return getDelegationAccess().getRule();
	}
	
	//Flow:
	//	flowType=[TypeDef|QualifiedName] 'from' source=[PortUse|QualifiedName] 'to' destination=[PortUse|QualifiedName];
	public FlowElements getFlowAccess() {
		return pFlow;
	}
	
	public ParserRule getFlowRule() {
		return getFlowAccess().getRule();
	}
	
	//ConnectorBinding:
	//	firstPort=[PortUse|QualifiedName] '=' secondPort=[PortUse|QualifiedName];
	public ConnectorBindingElements getConnectorBindingAccess() {
		return pConnectorBinding;
	}
	
	public ParserRule getConnectorBindingRule() {
		return getConnectorBindingAccess().getRule();
	}
	
	//enum FlowProperty:
	//	in | out;
	public FlowPropertyElements getFlowPropertyAccess() {
		return eFlowProperty;
	}
	
	public EnumRule getFlowPropertyRule() {
		return getFlowPropertyAccess().getRule();
	}
	
	//ConstraintUse:
	//	{ConstraintUse} kind=ConstraintKind definition=[ConstraintDef|QualifiedName] '(' (params+=[TypeUse|QualifiedName]
	//	("," params+=[TypeUse|QualifiedName])*)? ')';
	public ConstraintUseElements getConstraintUseAccess() {
		return pConstraintUse;
	}
	
	public ParserRule getConstraintUseRule() {
		return getConstraintUseAccess().getRule();
	}
	
	//ActivityDelegation:
	//	'delegate' source=[ActivityFlowable|QualifiedName] 'to' (target=[ActivityFlowable|QualifiedName] |
	//	targetSwitch=ActivitySwitch);
	public ActivityDelegationElements getActivityDelegationAccess() {
		return pActivityDelegation;
	}
	
	public ParserRule getActivityDelegationRule() {
		return getActivityDelegationAccess().getRule();
	}
	
	//enum ConstraintKind:
	//	preCondition='pre-condition' | postCondition='post-condition' | invariant;
	public ConstraintKindElements getConstraintKindAccess() {
		return eConstraintKind;
	}
	
	public EnumRule getConstraintKindRule() {
		return getConstraintKindAccess().getRule();
	}
	
	//ActivitySwitch:
	//	{ActivitySwitch}
	//	'switch'
	//	'{' (cases+=ActivitySwitchCase ("," cases+=ActivitySwitchCase)*)?
	//	'}';
	public ActivitySwitchElements getActivitySwitchAccess() {
		return pActivitySwitch;
	}
	
	public ParserRule getActivitySwitchRule() {
		return getActivitySwitchAccess().getRule();
	}
	
	//ActivitySwitchCase:
	//	{ActivitySwitchCase}
	//	'case' condition=Expression ':' target=[ActivityFlowable|QualifiedName];
	public ActivitySwitchCaseElements getActivitySwitchCaseAccess() {
		return pActivitySwitchCase;
	}
	
	public ParserRule getActivitySwitchCaseRule() {
		return getActivitySwitchCaseAccess().getRule();
	}
	
	//ActivityBody:
	//	{ActivityBody}
	//	'body'
	//	'{' ('actions' ':' actions+=ActionUse*)?
	//	flows+=ActivityRelation*
	//	dataObjects+=DataObject*
	//	'}';
	public ActivityBodyElements getActivityBodyAccess() {
		return pActivityBody;
	}
	
	public ParserRule getActivityBodyRule() {
		return getActivityBodyAccess().getRule();
	}
	
	//ProtocolBody:
	//	{ProtocolBody} recControl=ProtocolControl body=ProtocolBodyInternal (recType=ProtocolAlternativeType
	//	recursive=ProtocolBody)?;
	public ProtocolBodyElements getProtocolBodyAccess() {
		return pProtocolBody;
	}
	
	public ParserRule getProtocolBodyRule() {
		return getProtocolBodyAccess().getRule();
	}
	
	//enum ProtocolAlternativeType:
	//	complimentary=';' | alternative='|';
	public ProtocolAlternativeTypeElements getProtocolAlternativeTypeAccess() {
		return eProtocolAlternativeType;
	}
	
	public EnumRule getProtocolAlternativeTypeRule() {
		return getProtocolAlternativeTypeAccess().getRule();
	}
	
	//enum ProtocolControl:
	//	always | several | once | perhaps;
	public ProtocolControlElements getProtocolControlAccess() {
		return eProtocolControl;
	}
	
	public EnumRule getProtocolControlRule() {
		return getProtocolControlAccess().getRule();
	}
	
	//ProtocolBodyInternal:
	//	'(' ProtocolBody ')' | ActionSend | ActionReceive;
	public ProtocolBodyInternalElements getProtocolBodyInternalAccess() {
		return pProtocolBodyInternal;
	}
	
	public ParserRule getProtocolBodyInternalRule() {
		return getProtocolBodyInternalAccess().getRule();
	}
	
	//ActionSend:
	//	'send' expr=Expression 'via' flowTo=[Pin|QualifiedName];
	public ActionSendElements getActionSendAccess() {
		return pActionSend;
	}
	
	public ParserRule getActionSendRule() {
		return getActionSendAccess().getRule();
	}
	
	//ActionReceive:
	//	'receive' var=TypeUse 'from' flowTo=[Pin|QualifiedName];
	public ActionReceiveElements getActionReceiveAccess() {
		return pActionReceive;
	}
	
	public ParserRule getActionReceiveRule() {
		return getActionReceiveAccess().getRule();
	}
	
	//ActivityFlow:
	//	'flow'
	//	'from' source=[ActivityFlowable|QualifiedName]
	//	'to' (target=[ActivityFlowable|QualifiedName] | targetSwitch=ActivitySwitch)?;
	public ActivityFlowElements getActivityFlowAccess() {
		return pActivityFlow;
	}
	
	public ParserRule getActivityFlowRule() {
		return getActivityFlowAccess().getRule();
	}
	
	//AllocationTable:
	//	{AllocationTable}
	//	'allocations' '{'
	//	allocs+=Allocation*
	//	'}';
	public AllocationTableElements getAllocationTableAccess() {
		return pAllocationTable;
	}
	
	public ParserRule getAllocationTableRule() {
		return getAllocationTableAccess().getRule();
	}
	
	//Allocation:
	//	ExecutableAllocation | ActivityAllocation;
	public AllocationElements getAllocationAccess() {
		return pAllocation;
	}
	
	public ParserRule getAllocationRule() {
		return getAllocationAccess().getRule();
	}
	
	//ExecutableAllocation:
	//	{ExecutableAllocation}
	//	'executable' (source=[Executable|QualifiedName] | 'null') 'to' (target=[ActionDef|QualifiedName] | 'null');
	public ExecutableAllocationElements getExecutableAllocationAccess() {
		return pExecutableAllocation;
	}
	
	public ParserRule getExecutableAllocationRule() {
		return getExecutableAllocationAccess().getRule();
	}
	
	//ActivityAllocation:
	//	{ActivityAllocation}
	//	'activity' (source=[ActivityDef|QualifiedName] | 'null') 'to' (target=[StructuralDef|QualifiedName] | 'null');
	public ActivityAllocationElements getActivityAllocationAccess() {
		return pActivityAllocation;
	}
	
	public ParserRule getActivityAllocationRule() {
		return getActivityAllocationAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
