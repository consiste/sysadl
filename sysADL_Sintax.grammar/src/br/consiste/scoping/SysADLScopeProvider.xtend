/*
 * generated by Xtext 2.10.0
 */
package br.consiste.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

import sysADL_Sintax.SysADLPackage
import sysADL_Sintax.EnumValueLiteralExpression
import sysADL_Sintax.Enumeration
import sysADL_Sintax.DataTypeAccessExpression
import sysADL_Sintax.DataTypeDef

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SysADLScopeProvider extends AbstractSysADLScopeProvider {
	override getScope(EObject context, EReference ref) {
		if (context instanceof DataTypeAccessExpression && ref == SysADLPackage.eINSTANCE.dataTypeAccessExpression_Attr) {
			return scope_DataTypeAccessExpression_Attr(context as DataTypeAccessExpression);
		}
		if (context instanceof EnumValueLiteralExpression && ref == SysADLPackage.eINSTANCE.enumValueLiteralExpression_EnumValue) {
			return scope_EnumValueLiteralExpression_EnumValue(context as EnumValueLiteralExpression);
		}
		return super.getScope(context, ref)
	}
	
	def scope_DataTypeAccessExpression_Attr(DataTypeAccessExpression a) {
		Scopes.scopeFor((a.dataType.definition as DataTypeDef).dataTypeAttributes);
	}
	
	def scope_EnumValueLiteralExpression_EnumValue(EnumValueLiteralExpression a) {
		Scopes.scopeFor((a._enum as Enumeration).literals);
	}
	
}
